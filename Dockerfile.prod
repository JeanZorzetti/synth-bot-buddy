# ðŸš€ PRODUCTION DOCKERFILE - AI Trading Bot
FROM python:3.11-slim-bullseye

# Metadata
LABEL maintainer="AI Trading Bot Team"
LABEL version="2.1.3"
LABEL description="Autonomous AI Trading Bot for Deriv API"

# Environment variables
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1
ENV ENVIRONMENT=production
ENV TZ=UTC

# Create app user for security
RUN groupadd -r appuser && useradd -r -g appuser appuser

# Install system dependencies
RUN apt-get update && apt-get install -y \
    gcc \
    g++ \
    curl \
    postgresql-client \
    redis-tools \
    && rm -rf /var/lib/apt/lists/*

# Set working directory
WORKDIR /app

# Copy requirements first for better caching
COPY requirements.txt .
COPY requirements-prod.txt .

# Install Python dependencies
RUN pip install --no-cache-dir --upgrade pip setuptools wheel && \
    pip install --no-cache-dir -r requirements.txt && \
    pip install --no-cache-dir -r requirements-prod.txt

# Copy application code
COPY backend/ ./backend/
COPY frontend/dist/ ./frontend/dist/
COPY tests/ ./tests/
COPY models/ ./models/
COPY config/ ./config/

# Copy production scripts
COPY scripts/ ./scripts/
COPY docker/ ./docker/

# Create necessary directories
RUN mkdir -p logs backups certs && \
    chown -R appuser:appuser /app

# Copy entrypoint script
COPY docker/entrypoint.prod.sh /entrypoint.sh
RUN chmod +x /entrypoint.sh

# Switch to non-root user
USER appuser

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

# Expose ports
EXPOSE 8000 8443

# Set entrypoint
ENTRYPOINT ["/entrypoint.sh"]

# Default command
CMD ["python", "backend/main.py"]