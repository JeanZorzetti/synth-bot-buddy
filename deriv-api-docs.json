{
  "scrapedAt": "2025-09-08T18:25:36.895Z",
  "totalPages": 54,
  "content": {
    "Getting started with Deriv APIs": {
      "title": "Quickly add trading features and account info | Deriv API",
      "url": "https://developers.deriv.com/docs/getting-started",
      "mainContent": "Quick start\n\nThis guide will help you seamlessly integrate our API into your applications, providing access to real-time market data, trading functionalities, account information, and more. The possibilities are limitless.\n\nWhile Deriv‚Äôs API is powerful and flexible, using it effectively does require some programming knowledge.\n\nIt‚Äôs important to note that Deriv does not provide a programmer. You‚Äôll need to work with a trusted\ndeveloper on your own or handle the development yourself if you have programming expertise.\n\nHowever, everything you need to build a manual or automated trading platform is available through the Deriv API.\n\nUpdated 3 months ago\n\nDid this page help you?\nYes\nNo",
      "headings": [
        {
          "level": "h3",
          "text": "Quick start"
        }
      ],
      "codeBlocks": [],
      "tables": [],
      "links": []
    },
    "Account setup": {
      "title": "Account setup and API access management | Deriv API",
      "url": "https://developers.deriv.com/docs/account-setup",
      "mainContent": "Create a Deriv account\nVisit api.deriv.com\nClick Sign Up on the top right corner of the page.\nProvide your Email Address.\nCheck your inbox for a verification email and click the link to confirm your account.\nAfter verifying your email, provide your Country of residence, Citizenship, and create a Password.\nYour Demo account is now active ‚Äî you can start building and testing your apps right away.\nTo create a Real account, click Complete my profile.\nChoose your Account Currency, fill in your Personal and Address details, and accept the Terms of use to proceed.\nYour Real account is now active ‚Äî you‚Äôre eligible to earn markup commissions on your app.\nüìò\n\nNote:\n\nIf your country of residence is one of the supported countries for Wallets, you will also receive a virtual Wallet (demo) account. Once you complete the real account creation process, a real Wallet account will also be created, based on the currency you select.\n\nAttention Developers ‚Äì Wallet Accounts Can‚Äôt Trade!\nIf your account type is CRW (Wallet) or VRW (Virtual Wallet), you cannot perform trading transactions via API.\nTo continue using the API for trading operations (like buy, proposal, etc.), please follow these steps:\n1Ô∏è‚É£ Create a real trading account (CR) on Traders Hub.\n2Ô∏è‚É£ Use that CR account when generating your API token.\nHow to add or select your real trading (CR) account\n\nTo use the Deriv API for trading and earn markup commission, you must have a CR (real trading) account. Here‚Äôs how to check or create one:\n\n\n\nStep 1\nOpen the account switcher\n\nClick the dropdown next to your balance to view all available accounts.\n\nStep 2\nManage your accounts\n\nTap \"Add or manage account\" to open or switch to a trading account (CR).\n\nStep 3\nChoose your currency\n\nSelect the \"Fiat currencies\" tab and pick your preferred currency to open a CR account.\n\nOnce created, your CR account (e.g. CR12345678) will be ready to use with API tokens for trading actions like buy, proposal, etc.\n\nRegister your Deriv application\nFirst-time app registration\nOpen the Dashboard which will take you directly to the Register application screen.\nTo create additional apps\nOpen the Dashboard and go to the Applications tab.\nClick Register new application to create a new app.\nRegister a new application\n\nProvide a name for your application and accept the Terms and conditions.\n\nConfigure your application:\n\nAdd your markup fee percentage.\n\nüìò\n\nNote\n\nMarkup is the commission added to the trade price to earn additional income.\nLearn more about markup calculation here.\n\nFill in your OAuth details:\n\nRedirect URL ‚Äì Allows users to log in to your app using their Deriv accounts without using an API token.\nVerification URL ‚Äì Used for email verification. If provided, a link with a verification token will be sent to the user‚Äôs email. Otherwise, the Redirect URL is used.\nExample: If your domain is https://example.com and your verification endpoint is /verify, the full URL would be:\nhttps://example.com/verify\nSelect the required Scopes of authorization and click Create.\n\nYour app will now appear in the Application Manager under the Applications tab.\n\nTo update an existing app\n\nOpen the Dashboard and go to the Applications tab.\n\nClick the pencil icon  next to the app you want to edit.\n\nYou can update the App name, Markup fee percentage, and OAuth details as needed.\n\nCreate an API token\n\nOpen the Dashboard and go to the API tokens tab.\n\nClick Create new token from the left panel.\n\nSelect the account type for which you want to generate a token.\n\n‚ùóÔ∏è\n\nImportant\n\nTo use the API for trading operations (like buy, proposal, etc.), use your real trading account (CR).\n\nChoose the required access level (scopes):\n\nRead ‚Äì View market data and account information.\n\nTrade ‚Äì Full access to trade, manage funds, and sensitive data.\n\nPayments ‚Äì Enables withdrawals to payment agents and inter-account transfers.\n\nTrading Information ‚Äì View trading history.\n\nAdmin ‚Äì Full access to account settings, token usage, and account management.\n\n‚ùóÔ∏è\n\nNot recommended\n\nThe Admin scope gives extensive access to all account functions and should only be used when absolutely necessary. Make sure the token is stored and used securely.\n\nEnter a descriptive name for your token.\n\nClick Create token to generate the token.\n\nA confirmation pop-up will appear ‚Äî ‚ÄúToken created successfully.‚Äù\nMake sure to copy and save the token key now.\n\n‚ö†Ô∏è\n\nImportant\n\nFor security reasons, the token cannot be viewed or copied again.\nIf you lose the token, you‚Äôll need to create a new one.\n\nUpdated 28 days ago\n\nDid this page help you?\nYes\nNo",
      "headings": [
        {
          "level": "h2",
          "text": "Create a Deriv account"
        },
        {
          "level": "h2",
          "text": "üìòNote:"
        },
        {
          "level": "h3",
          "text": "How to add or select your real trading (CR) account"
        },
        {
          "level": "h3",
          "text": "Step 1"
        },
        {
          "level": "h2",
          "text": "Open the account switcher"
        },
        {
          "level": "h3",
          "text": "Step 2"
        },
        {
          "level": "h2",
          "text": "Manage your accounts"
        },
        {
          "level": "h3",
          "text": "Step 3"
        },
        {
          "level": "h2",
          "text": "Choose your currency"
        },
        {
          "level": "h2",
          "text": "Register your Deriv application"
        },
        {
          "level": "h3",
          "text": "First-time app registration"
        },
        {
          "level": "h3",
          "text": "To create additional apps"
        },
        {
          "level": "h3",
          "text": "Register a new application"
        },
        {
          "level": "h2",
          "text": "üìòNote"
        },
        {
          "level": "h3",
          "text": "To update an existing app"
        },
        {
          "level": "h2",
          "text": "Create an API token"
        },
        {
          "level": "h2",
          "text": "‚ùóÔ∏èImportant"
        },
        {
          "level": "h2",
          "text": "‚ùóÔ∏èNot recommended"
        },
        {
          "level": "h2",
          "text": "‚ö†Ô∏èImportant"
        }
      ],
      "codeBlocks": [
        {
          "language": "text",
          "content": "buy"
        },
        {
          "language": "text",
          "content": "proposal"
        },
        {
          "language": "text",
          "content": "buy"
        },
        {
          "language": "text",
          "content": "proposal"
        },
        {
          "language": "text",
          "content": "https://example.com"
        },
        {
          "language": "text",
          "content": "/verify"
        },
        {
          "language": "text",
          "content": "https://example.com/verify"
        }
      ],
      "tables": [],
      "links": [
        {
          "text": "api.deriv.com",
          "href": "https://api.deriv.com/"
        },
        {
          "text": "supported countries for Wallets",
          "href": "https://developers.deriv.com/docs/country-list#wallets"
        },
        {
          "text": "Traders Hub",
          "href": "https://hub.deriv.com/tradershub/options"
        },
        {
          "text": "Dashboard",
          "href": "https://api.deriv.com/dashboard/"
        },
        {
          "text": "Dashboard",
          "href": "https://api.deriv.com/dashboard/"
        },
        {
          "text": "here",
          "href": "https://developers.deriv.com/docs/mark-up"
        },
        {
          "text": "Dashboard",
          "href": "https://api.deriv.com/dashboard/"
        },
        {
          "text": "Dashboard",
          "href": "https://api.deriv.com/dashboard/"
        }
      ]
    },
    "Authentication": {
      "title": "Easy OAuth setup for secure API authentication | Deriv API",
      "url": "https://developers.deriv.com/docs/authentication",
      "mainContent": "To unlock the complete functionality of Deriv APIs, you must first authenticate and then authorize your users.\n\nFor Deriv APIs, your users must be authenticated and authorized by our OAuth provider and WebSocket Server.\n\nThe OAuth provider handles user logins and grants secure access tokens. The WebSocket server then uses these tokens to verify users and facilitate seamless communication with the Deriv API. Together, these components ensure the security and efficiency of your app.\n\nAuthentication process\n\nOAuth, short for Open Authorization, is a protocol that enables a client to access server-hosted resources on behalf of the user without exposing their credentials. For more information, refer to OAuth.\n\nThis method enables Deriv account holders to log into third-party apps without generating an API token. Consequently, the third-party app does not access the user‚Äôs password or permanent API token, enhancing security.\n\nTo authenticate your user:\n\nMake sure the URL is specified correctly in the OAuth Details. To verify this, navigate to the Application manager under the Applications tab in the Dashboard and click the copy icon  to copy the OAuth redirect URL. To change or update the URL, click the pencil icon  next to the app you want to edit.\nAdd a login button on your website or app.\nWhen users click the button, automatically send them to the following URL: https://oauth.deriv.com/oauth2/authorize?app_id=YOUR_APP_ID\nReplace YOUR_APP_ID with the actual ID of your app (found under Dashboard ‚Üí Applications ‚Üí Application manager).\nIf you're a Deriv partner and want to ensure that all your users are correctly tagged under your account, you must include your affiliate token and UTM campaign in the OAuth URL for sign in.\nFor example: https://oauth.deriv.com/oauth2/authorize?app_id=YOUR_APP_ID&affiliate_token=YOUR_TOKEN&utm_campaign=YOUR_CAMPAIGN\n\n\nYou‚Äôll find these values in the referral links shared with you. Here‚Äôs how to extract and use them:\nIf your referral link looks like:\nhttps://deriv.com/signup?sidc=FB58247C-6B33-4677-A6AD-168C2D72323C&utm_campaign=dynamicworks&utm_medium=affiliate&utm_source=CU00001\nYour affiliate_token is the sidc value: FB58247C-6B33-4677-A6AD-168C2D72323C\nYour utm_campaign is: dynamicworks\nYour OAuth URL should be:\nhttps://oauth.deriv.com/oauth2/authorize?app_id=YOUR_APP_ID&affiliate_token=FB58247C-6B33-4677-A6AD-168C2D72323C&utm_campaign=dynamicworks\nIf your referral link looks like:\nhttps://track.deriv.com/_jqd7qq_iBB18zg8lBvFoLmNd7ZgqdRLk/1/\nYour affiliate_token is: jqd7qq_iBB18zg8lBvFoLmNd7ZgqdRLk\nYour utm_campaign is: myaffiliates\nYour OAuth URL should be:\nhttps://oauth.deriv.com/oauth2/authorize?app_id=YOUR_APP_ID&affiliate_token=jqd7qq_iBB18zg8lBvFoLmNd7ZgqdRLk&utm_campaign=myaffiliates\nAdding these parameters ensures proper referral tracking and commissions under your partnership.\nüìò\n\nImportant note:\n\nFor sign-ups, use the parameter t and utm_campaign:\n\nJSON\nhttps://hub.deriv.com/tradershub/signup?t=YOUR_TOKEN&utm_campaign=YOUR_CAMPAIGN\n\n\nWhen the user completes the signup or login, they will be redirected to the Redirect URL.\n\nThe redirected URL will include appended arguments containing the user's session tokens. For instance:\n\nJSON\nhttps://[YOUR_WEBSITE_URL]/redirect/?acct1=cr799393&token1=a1-f7pnteezo4jzhpxclctizt27hyeot&cur1=usd& acct2=vrtc1859315&token2=a1clwe3vfuuus5kraceykdsoqm4snfq&cur2=usd&acct3=CRW1157&token3=a1-Yxh5gJS8m406Jopon5JlvKNRsxLMC&cur3=usd&acct4=VRW1160&token4=a1-yUqdjiIN0t6ICRc4eIMHDr1i6uKSV&cur3=usd\n\nAuthorisation process\n\nThe query parameters within the redirect URL represent the user's accounts and associated session tokens.\n\nTo convert these query parameters into an array, follow this approach:\n\nJSON\nconst user_accounts = [\n  {\n    currency: 'usd',\n    token: 'a1-Yxh5gJS8m406Jopon5JlvKNRsxLMC',\n    account: 'CRW1157'\n  },\n  {\n    account: 'VRW1160',\n    token: 'a1-yUqdjiIN0t6ICRc4eIMHDr1i6uKSV',\n    currency: 'usd',\n  },\n  {\n    account: 'cr799393',\n    token: 'a1-f7pnteezo4jzhpxclctizt27hyeot',\n    currency: 'usd',\n  },\n  {\n    account: 'vrtc1859315',\n    token: 'a1clwe3vfuuus5kraceykdsoqm4snfq',\n    currency: 'usd',\n  },\n];\n\n\nCall the authorize API using the session token linked to the selected user's account to grant authorization.\n\nJSON\n{\n  \"authorize\": \"a1-Yxh5gJS8m406Jopon5JlvKNRsxLMC\"\n}\n\n\n\nThe response to the authorize call is an object as follows:\n\nJSON\n{\n  \"account_list\": [\n    {\n      \"account_category\": \"wallet\",\n      \"account_type\": \"doughflow\",\n      \"broker\": \"CRW\",\n      \"created_at\": 1753955451,\n      \"currency\": \"USD\",\n      \"currency_type\": \"fiat\",\n      \"is_disabled\": 0,\n      \"is_virtual\": 0,\n      \"landing_company_name\": \"svg\",\n      \"linked_to\": [],\n      \"loginid\": \"CRW1157\"\n    },\n    {\n      \"account_category\": \"wallet\",\n      \"account_type\": \"virtual\",\n      \"broker\": \"VRW\",\n      \"created_at\": 1753955451,\n      \"currency\": \"USD\",\n      \"currency_type\": \"fiat\",\n      \"is_disabled\": 0,\n      \"is_virtual\": 1,\n      \"landing_company_name\": \"virtual\",\n      \"linked_to\": [],\n      \"loginid\": \"VRW1160\"\n    },\n    {\n      \"account_type\": \"trading\",\n      \"created_at\": 1647509550,\n      \"currency\": \"USD\",\n      \"is_disabled\": 0,\n      \"is_virtual\": 0,\n      \"landing_company_name\": \"svg\",\n      \"loginid\": \"CR799393\",\n      \"trading\": {}\n    },\n    {\n      \"account_type\": \"trading\",\n      \"created_at\": 1664132232,\n      \"currency\": \"USD\",\n      \"is_disabled\": 0,\n      \"is_virtual\": 0,\n      \"landing_company_name\": \"svg\",\n      \"loginid\": \"VRTC1859315\",\n      \"trading\": {}\n    },\n  ],\n  \"balance\": 0,\n  \"country\": \"aq\",\n  \"currency\": \"USD\",\n  \"email\": \"ss@deriv.com\",\n  \"fullname\": \"Ms QA script ssRPPta\",\n  \"is_virtual\": 0,\n  \"landing_company_fullname\": \"Deriv (SVG) LLC\",\n  \"landing_company_name\": \"svg\",\n  \"linked_to\": [],\n  \"local_currencies\": {\n    \"AAD\": {\n      \"fractional_digits\": 2\n    }\n  },\n  \"loginid\": \"CRW1157\",\n  \"preferred_language\": \"EN\",\n  \"scopes\": [\n    \"admin\",\n    \"payments\",\n    \"read\",\n    \"trade\",\n    \"trading_information\"\n  ],\n  \"upgradeable_landing_companies\": [],\n  \"user_id\": 464\n}\n\n\nNow that the selected user is authorised, and you can use Deriv API calls on behalf of the account.\n\nUpdated about 1 month ago\n\nDid this page help you?\nYes\nNo",
      "headings": [
        {
          "level": "h2",
          "text": "Authentication process"
        },
        {
          "level": "h2",
          "text": "üìòImportant note:"
        },
        {
          "level": "h2",
          "text": "Authorisation process"
        }
      ],
      "codeBlocks": [
        {
          "language": "text",
          "content": "https://oauth.deriv.com/oauth2/authorize?app_id=YOUR_APP_ID"
        },
        {
          "language": "text",
          "content": "YOUR_APP_ID"
        },
        {
          "language": "text",
          "content": "https://oauth.deriv.com/oauth2/authorize?app_id=YOUR_APP_ID&affiliate_token=YOUR_TOKEN&utm_campaign=YOUR_CAMPAIGN"
        },
        {
          "language": "text",
          "content": "FB58247C-6B33-4677-A6AD-168C2D72323C"
        },
        {
          "language": "text",
          "content": "dynamicworks"
        },
        {
          "language": "text",
          "content": "jqd7qq_iBB18zg8lBvFoLmNd7ZgqdRLk"
        },
        {
          "language": "text",
          "content": "myaffiliates"
        },
        {
          "language": "text",
          "content": "t"
        },
        {
          "language": "text",
          "content": "utm_campaign"
        },
        {
          "language": "text",
          "content": "https://hub.deriv.com/tradershub/signup?t=YOUR_TOKEN&utm_campaign=YOUR_CAMPAIGN"
        },
        {
          "language": "text",
          "content": "https://hub.deriv.com/tradershub/signup?t=YOUR_TOKEN&utm_campaign=YOUR_CAMPAIGN"
        },
        {
          "language": "text",
          "content": "https://[YOUR_WEBSITE_URL]/redirect/?acct1=cr799393&token1=a1-f7pnteezo4jzhpxclctizt27hyeot&cur1=usd& acct2=vrtc1859315&token2=a1clwe3vfuuus5kraceykdsoqm4snfq&cur2=usd&acct3=CRW1157&token3=a1-Yxh5gJS8m406Jopon5JlvKNRsxLMC&cur3=usd&acct4=VRW1160&token4=a1-yUqdjiIN0t6ICRc4eIMHDr1i6uKSV&cur3=usd"
        },
        {
          "language": "text",
          "content": "https://[YOUR_WEBSITE_URL]/redirect/?acct1=cr799393&token1=a1-f7pnteezo4jzhpxclctizt27hyeot&cur1=usd& acct2=vrtc1859315&token2=a1clwe3vfuuus5kraceykdsoqm4snfq&cur2=usd&acct3=CRW1157&token3=a1-Yxh5gJS8m406Jopon5JlvKNRsxLMC&cur3=usd&acct4=VRW1160&token4=a1-yUqdjiIN0t6ICRc4eIMHDr1i6uKSV&cur3=usd"
        },
        {
          "language": "text",
          "content": "const user_accounts = [\n  {\n    currency: 'usd',\n    token: 'a1-Yxh5gJS8m406Jopon5JlvKNRsxLMC',\n    account: 'CRW1157'\n  },\n  {\n    account: 'VRW1160',\n    token: 'a1-yUqdjiIN0t6ICRc4eIMHDr1i6uKSV',\n    currency: 'usd',\n  },\n  {\n    account: 'cr799393',\n    token: 'a1-f7pnteezo4jzhpxclctizt27hyeot',\n    currency: 'usd',\n  },\n  {\n    account: 'vrtc1859315',\n    token: 'a1clwe3vfuuus5kraceykdsoqm4snfq',\n    currency: 'usd',\n  },\n];"
        },
        {
          "language": "text",
          "content": "const user_accounts = [\n  {\n    currency: 'usd',\n    token: 'a1-Yxh5gJS8m406Jopon5JlvKNRsxLMC',\n    account: 'CRW1157'\n  },\n  {\n    account: 'VRW1160',\n    token: 'a1-yUqdjiIN0t6ICRc4eIMHDr1i6uKSV',\n    currency: 'usd',\n  },\n  {\n    account: 'cr799393',\n    token: 'a1-f7pnteezo4jzhpxclctizt27hyeot',\n    currency: 'usd',\n  },\n  {\n    account: 'vrtc1859315',\n    token: 'a1clwe3vfuuus5kraceykdsoqm4snfq',\n    currency: 'usd',\n  },\n];"
        },
        {
          "language": "text",
          "content": "{\n  \"authorize\": \"a1-Yxh5gJS8m406Jopon5JlvKNRsxLMC\"\n}"
        },
        {
          "language": "text",
          "content": "{\n  \"authorize\": \"a1-Yxh5gJS8m406Jopon5JlvKNRsxLMC\"\n}"
        },
        {
          "language": "text",
          "content": "{\n  \"account_list\": [\n    {\n      \"account_category\": \"wallet\",\n      \"account_type\": \"doughflow\",\n      \"broker\": \"CRW\",\n      \"created_at\": 1753955451,\n      \"currency\": \"USD\",\n      \"currency_type\": \"fiat\",\n      \"is_disabled\": 0,\n      \"is_virtual\": 0,\n      \"landing_company_name\": \"svg\",\n      \"linked_to\": [],\n      \"loginid\": \"CRW1157\"\n    },\n    {\n      \"account_category\": \"wallet\",\n      \"account_type\": \"virtual\",\n      \"broker\": \"VRW\",\n      \"created_at\": 1753955451,\n      \"currency\": \"USD\",\n      \"currency_type\": \"fiat\",\n      \"is_disabled\": 0,\n      \"is_virtual\": 1,\n      \"landing_company_name\": \"virtual\",\n      \"linked_to\": [],\n      \"loginid\": \"VRW1160\"\n    },\n    {\n      \"account_type\": \"trading\",\n      \"created_at\": 1647509550,\n      \"currency\": \"USD\",\n      \"is_disabled\": 0,\n      \"is_virtual\": 0,\n      \"landing_company_name\": \"svg\",\n      \"loginid\": \"CR799393\",\n      \"trading\": {}\n    },\n    {\n      \"account_type\": \"trading\",\n      \"created_at\": 1664132232,\n      \"currency\": \"USD\",\n      \"is_disabled\": 0,\n      \"is_virtual\": 0,\n      \"landing_company_name\": \"svg\",\n      \"loginid\": \"VRTC1859315\",\n      \"trading\": {}\n    },\n  ],\n  \"balance\": 0,\n  \"country\": \"aq\",\n  \"currency\": \"USD\",\n  \"email\": \"ss@deriv.com\",\n  \"fullname\": \"Ms QA script ssRPPta\",\n  \"is_virtual\": 0,\n  \"landing_company_fullname\": \"Deriv (SVG) LLC\",\n  \"landing_company_name\": \"svg\",\n  \"linked_to\": [],\n  \"local_currencies\": {\n    \"AAD\": {\n      \"fractional_digits\": 2\n    }\n  },\n  \"loginid\": \"CRW1157\",\n  \"preferred_language\": \"EN\",\n  \"scopes\": [\n    \"admin\",\n    \"payments\",\n    \"read\",\n    \"trade\",\n    \"trading_information\"\n  ],\n  \"upgradeable_landing_companies\": [],\n  \"user_id\": 464\n}"
        },
        {
          "language": "text",
          "content": "{\n  \"account_list\": [\n    {\n      \"account_category\": \"wallet\",\n      \"account_type\": \"doughflow\",\n      \"broker\": \"CRW\",\n      \"created_at\": 1753955451,\n      \"currency\": \"USD\",\n      \"currency_type\": \"fiat\",\n      \"is_disabled\": 0,\n      \"is_virtual\": 0,\n      \"landing_company_name\": \"svg\",\n      \"linked_to\": [],\n      \"loginid\": \"CRW1157\"\n    },\n    {\n      \"account_category\": \"wallet\",\n      \"account_type\": \"virtual\",\n      \"broker\": \"VRW\",\n      \"created_at\": 1753955451,\n      \"currency\": \"USD\",\n      \"currency_type\": \"fiat\",\n      \"is_disabled\": 0,\n      \"is_virtual\": 1,\n      \"landing_company_name\": \"virtual\",\n      \"linked_to\": [],\n      \"loginid\": \"VRW1160\"\n    },\n    {\n      \"account_type\": \"trading\",\n      \"created_at\": 1647509550,\n      \"currency\": \"USD\",\n      \"is_disabled\": 0,\n      \"is_virtual\": 0,\n      \"landing_company_name\": \"svg\",\n      \"loginid\": \"CR799393\",\n      \"trading\": {}\n    },\n    {\n      \"account_type\": \"trading\",\n      \"created_at\": 1664132232,\n      \"currency\": \"USD\",\n      \"is_disabled\": 0,\n      \"is_virtual\": 0,\n      \"landing_company_name\": \"svg\",\n      \"loginid\": \"VRTC1859315\",\n      \"trading\": {}\n    },\n  ],\n  \"balance\": 0,\n  \"country\": \"aq\",\n  \"currency\": \"USD\",\n  \"email\": \"ss@deriv.com\",\n  \"fullname\": \"Ms QA script ssRPPta\",\n  \"is_virtual\": 0,\n  \"landing_company_fullname\": \"Deriv (SVG) LLC\",\n  \"landing_company_name\": \"svg\",\n  \"linked_to\": [],\n  \"local_currencies\": {\n    \"AAD\": {\n      \"fractional_digits\": 2\n    }\n  },\n  \"loginid\": \"CRW1157\",\n  \"preferred_language\": \"EN\",\n  \"scopes\": [\n    \"admin\",\n    \"payments\",\n    \"read\",\n    \"trade\",\n    \"trading_information\"\n  ],\n  \"upgradeable_landing_companies\": [],\n  \"user_id\": 464\n}"
        }
      ],
      "tables": [],
      "links": [
        {
          "text": "OAuth",
          "href": "https://developers.deriv.com/docs/oauth"
        },
        {
          "text": "Dashboard",
          "href": "https://api.deriv.com/dashboard/"
        },
        {
          "text": "https://deriv.com/signup?sidc=FB58247C-6B33-4677-A6AD-168C2D72323C&utm_campaign=dynamicworks&utm_medium=affiliate&utm_source=CU00001",
          "href": "https://deriv.com/signup?sidc=FB58247C-6B33-4677-A6AD-168C2D72323C&utm_campaign=dynamicworks&utm_medium=affiliate&utm_source=CU00001"
        },
        {
          "text": "https://oauth.deriv.com/oauth2/authorize?app_id=YOUR_APP_ID&affiliate_token=FB58247C-6B33-4677-A6AD-168C2D72323C&utm_campaign=dynamicworks",
          "href": "https://oauth.deriv.com/oauth2/authorize?app_id=YOUR_APP_ID&affiliate_token=FB58247C-6B33-4677-A6AD-168C2D72323C&utm_campaign=dynamicworks"
        },
        {
          "text": "https://track.deriv.com/_jqd7qq_iBB18zg8lBvFoLmNd7ZgqdRLk/1/",
          "href": "https://track.deriv.com/_jqd7qq_iBB18zg8lBvFoLmNd7ZgqdRLk/1/"
        },
        {
          "text": "https://oauth.deriv.com/oauth2/authorize?app_id=YOUR_APP_ID&affiliate_token=jqd7qq_iBB18zg8lBvFoLmNd7ZgqdRLk&utm_campaign=myaffiliates",
          "href": "https://oauth.deriv.com/oauth2/authorize?app_id=YOUR_APP_ID&affiliate_token=jqd7qq_iBB18zg8lBvFoLmNd7ZgqdRLk&utm_campaign=myaffiliates"
        },
        {
          "text": "authorize API",
          "href": "https://api.deriv.com/api-explorer#authorize"
        }
      ]
    },
    "Understanding APIs": {
      "title": "Understand API to discover the full potential | Deriv API",
      "url": "https://developers.deriv.com/docs/understanding-apis",
      "mainContent": "WebSockets\n\nDeriv APIs run on WebSockets, enabling fast development of efficient, interconnected systems.\n\nWebSockets excel in applications requiring ongoing data exchange, such as real-time trading systems.\n\nFor more insight into WebSockets, explore our additional resources.\n\nVarious functions of API calls\n\nEach API has a functionality associated with it. These functions are as follows:\n\nSend: The server responds with the requested data only once. All API calls support the send function of requesting and receiving responses.\nSubscribe: Subscribing to an API call initiates a continuous stream of data from that specific API call.\nForget: Stops the data stream initiated by the subscribe call using the Forget API call.\n\nRefer to API calls. for more information.\n\nFor ease of understanding, we have categorised all the APIs according to their use and functions:\n\nUpdated 4 months ago\n\nDid this page help you?\nYes\nNo",
      "headings": [
        {
          "level": "h2",
          "text": "WebSockets"
        },
        {
          "level": "h2",
          "text": "Various functions of API calls"
        }
      ],
      "codeBlocks": [],
      "tables": [],
      "links": [
        {
          "text": "additional resources",
          "href": "https://developers.deriv.com/docs/websockets"
        },
        {
          "text": "API calls",
          "href": "https://developers.deriv.com/docs/functions-of-api-calls"
        }
      ]
    },
    "MT5 APIs": {
      "title": "Manage your MT5 account with our MT5 API | Deriv API",
      "url": "https://developers.deriv.com/docs/mt5",
      "mainContent": "MT5 APIs facilitate the management and interaction with MetaTrader 5 trading accounts.\n\nThey provide functionalities for account creation, password management, retrieving account details, and managing financial transactions like deposits and withdrawals. These APIs are crucial for maintaining and operating MT5 accounts on our trading platforms.\n\nHere are the MT5 APIs we support:\n\n#\tAPI Name\tDescription\tSend\tSubscribe\tScope\n1\tMT5: Deposit\tAllows deposits from a Deriv account into an MT5 account.\t‚úî\t‚úò\tPayments\n2\tMT5: Get Setting\tRetrieves MT5 user account settings.\t‚úî\t‚úò\tRead\n3\tMT5: Accounts List\tRetrieves a list of all the MT5 accounts associated with the client.\t‚úî\t‚úò\tRead\n4\tMT5: New Account\tCreates a new MT5 user account, either a demo or real account.\t‚úî\t‚úò\tAdmin\n5\tMT5: Password Change\tChanges the password of the MT5 account.\t‚úî\t‚úò\tAdmin\n6\tMT5: Password Check\tValidates the main password for the MT5 user.\t‚úî\t‚úò\tAdmin\n7\tMT5: Password Reset\tResets the password for the MT5 account.\t‚úî\t‚úò\tAdmin\n8\tMT5: Withdrawal\tAllows withdrawals from an MT5 account to a Deriv account.\t‚úî\t‚úò\tPayments\n‚ùóÔ∏è\n\nDeriv MT5 APIs do not support copy trading or subscription features.\n\nTo use copy trading, you need to subscribe to MT5 signals directly through the platform. For more information on MT5 signals, visit: MT5 Trading Signals.\n\n‚ùóÔ∏è\n\nAdditionally, trading on MT5 is not supported via our APIs. For trading purposes, use the Deriv MT5 application only.\n\nFor more information on MT5 app, visit: Deriv MT5.\n\nUpdated 4 months ago\n\nDid this page help you?\nYes\nNo",
      "headings": [
        {
          "level": "h2",
          "text": "‚ùóÔ∏èDeriv MT5 APIs do not support copy trading or subscription features."
        },
        {
          "level": "h2",
          "text": "‚ùóÔ∏èAdditionally, trading on MT5 is not supported via our APIs. For trading purposes,  use the Deriv MT5 application only."
        }
      ],
      "codeBlocks": [],
      "tables": [
        "<table><thead><tr><th># </th><th>API Name</th><th>Description</th><th>Send</th><th>Subscribe</th><th>Scope</th></tr></thead><tbody><tr><td>1</td><td><a target=\"_blank\" href=\"https://api.deriv.com/api-explorer#mt5_deposit\" rel=\"noopener noreferrer\">MT5: <strong>Deposit</strong></a></td><td>Allows deposits from a Deriv account into an MT5 account.</td><td>‚úî</td><td>‚úò</td><td>Payments</td></tr><tr><td>2</td><td><a target=\"_blank\" href=\"https://api.deriv.com/api-explorer#mt5_get_settings\" rel=\"noopener noreferrer\">MT5: <strong>Get Setting</strong></a></td><td>Retrieves MT5 user account settings.</td><td>‚úî</td><td>‚úò</td><td>Read</td></tr><tr><td>3</td><td><a target=\"_blank\" href=\"https://api.deriv.com/api-explorer#mt5_login_list\" rel=\"noopener noreferrer\">MT5: <strong>Accounts List</strong></a></td><td>Retrieves a list of all the MT5 accounts associated with the client.</td><td>‚úî</td><td>‚úò</td><td>Read</td></tr><tr><td>4</td><td><a target=\"_blank\" href=\"https://api.deriv.com/api-explorer#mt5_new_account\" rel=\"noopener noreferrer\">MT5: <strong>New Account</strong></a></td><td>Creates a new MT5 user account, either a demo or real account.</td><td>‚úî</td><td>‚úò</td><td>Admin</td></tr><tr><td>5</td><td><a target=\"_blank\" href=\"https://api.deriv.com/api-explorer#mt5_password_change\" rel=\"noopener noreferrer\">MT5: <strong>Password Change</strong></a></td><td>Changes the password of the MT5 account.</td><td>‚úî</td><td>‚úò</td><td>Admin</td></tr><tr><td>6</td><td><a target=\"_blank\" href=\"https://api.deriv.com/api-explorer#mt5_password_check\" rel=\"noopener noreferrer\">MT5: <strong>Password Check</strong></a></td><td>Validates the main password for the MT5 user.</td><td>‚úî</td><td>‚úò</td><td>Admin</td></tr><tr><td>7</td><td><a target=\"_blank\" href=\"https://api.deriv.com/api-explorer#mt5_password_reset\" rel=\"noopener noreferrer\">MT5: <strong>Password Reset</strong></a></td><td>Resets the password for the MT5 account.</td><td>‚úî</td><td>‚úò</td><td>Admin</td></tr><tr><td>8</td><td><a target=\"_blank\" href=\"https://api.deriv.com/api-explorer#mt5_withdrawal\" rel=\"noopener noreferrer\">MT5: <strong>Withdrawal</strong></a></td><td>Allows withdrawals from an MT5 account to a Deriv account.</td><td>‚úî</td><td>‚úò</td><td>Payments</td></tr></tbody></table>"
      ],
      "links": [
        {
          "text": "MT5: Deposit",
          "href": "https://api.deriv.com/api-explorer#mt5_deposit"
        },
        {
          "text": "MT5: Get Setting",
          "href": "https://api.deriv.com/api-explorer#mt5_get_settings"
        },
        {
          "text": "MT5: Accounts List",
          "href": "https://api.deriv.com/api-explorer#mt5_login_list"
        },
        {
          "text": "MT5: New Account",
          "href": "https://api.deriv.com/api-explorer#mt5_new_account"
        },
        {
          "text": "MT5: Password Change",
          "href": "https://api.deriv.com/api-explorer#mt5_password_change"
        },
        {
          "text": "MT5: Password Check",
          "href": "https://api.deriv.com/api-explorer#mt5_password_check"
        },
        {
          "text": "MT5: Password Reset",
          "href": "https://api.deriv.com/api-explorer#mt5_password_reset"
        },
        {
          "text": "MT5: Withdrawal",
          "href": "https://api.deriv.com/api-explorer#mt5_withdrawal"
        },
        {
          "text": "MT5 Trading Signals",
          "href": "https://deriv.com/mt5-trading-signals#signal-subscriber"
        },
        {
          "text": "Deriv MT5 application",
          "href": "https://deriv.com/trading-platforms/deriv-mt5#download"
        },
        {
          "text": "Deriv MT5",
          "href": "https://deriv.com/trading-platforms/deriv-mt5"
        }
      ]
    },
    "P2P APIs": {
      "title": "Manage adverts, orders, and chats with our p2p API | Deriv API",
      "url": "https://developers.deriv.com/docs/p2p",
      "mainContent": "P2P APIs are designed to manage and facilitate peer-to-peer (P2P) transactions. They offer functionalities for creating and managing P2P advertisements, registering and updating advertisers, handling orders, and managing communication and disputes between participants.\n\nThese APIs are crucial for enabling and operating P2P transactions on the Deriv platform, allowing users to engage in seamless and secure trading.\n\nüöß\n\nP2P APIs are only available for real accounts. Ensure that you have a real account to access P2P services.\n\n#\tAPI Name\tDescription\tSend\tSubscribe\tScope\n1\tP2P: Advert Create\tCreates a P2P advertisement. This can only be used by a verified P2P advertiser.\t‚úî\t‚úò\tPayments\n2\tP2P: Advert Information\tRetrieves details about a specific P2P advertisement.\t‚úî\t‚úî\tPayments\n3\tP2P: Advert List\tReturns available P2P advertisements for use with the p2p_order_create function.\t‚úî\t‚úò\tPayments\n4\tP2P: Advert Update\tUpdates an existing P2P advertisement. This can only be used by the original advertiser.\t‚úî\t‚úò\tPayments\n5\tP2P: Advertiser Adverts\tReturns all P2P adverts created by the authorized client. Can only be used by a registered P2P advertiser.\t‚úî\t‚úò\tPayments\n6\tP2P: Advertiser Create\tRegisters the client as a P2P advertiser.\t‚úî\t‚úî\tPayments\n7\tP2P: Advertiser Information\tRetrieves information about a P2P advertiser.\t‚úî\t‚úî\tPayments\n8\tP2P: Advertiser Payment Methods\tManages or lists the payment methods for a P2P advertiser.\t‚úî\t‚úò\tPayments\n9\tP2P: Advertiser Relations\tUpdates and retrieves the favourite and blocked advertisers for the current user.\t‚úî\t‚úò\tPayments\n10\tP2P: Advertiser Update\tUpdates the information of the registered P2P advertiser for the current account. Only available to verified P2P advertisers.\t‚úî\t‚úò\tPayments\n11\tP2P: Chat Create\tCreates a P2P chat for the specified order.\t‚úî\t‚úò\tPayments\n12\tP2P: Order Cancel\tCancels a P2P order.\t‚úî\t‚úò\tPayments\n13\tP2P: Order Confirm\tConfirms a P2P order.\t‚úî\t‚úò\tPayments\n14\tP2P: Order Create\tCreates a P2P order for a specified advertisement.\t‚úî\t‚úî\tPayments\n15\tP2P: Order Dispute\tDisputes a P2P order.\t‚úî\t‚úò\tPayments\n16\tP2P: Order Information\tRetrieves the information about a P2P order.\t‚úî\t‚úî\tPayments\n17\tP2P: Order List\tLists active P2P orders.\t‚úî\t‚úî\tPayments\n18\tP2P: Order Review\tCreates a review for the specified P2P order.\t‚úî\t‚úò\tPayments\n19\tP2P: Payment Methods\tLists all P2P payment methods.\t‚úî\t‚úò\tPayments\n\nUpdated 4 months ago\n\nDid this page help you?\nYes\nNo",
      "headings": [
        {
          "level": "h2",
          "text": "üößP2P APIs are only available for real accounts. Ensure that you have a real account to access P2P services."
        }
      ],
      "codeBlocks": [
        {
          "language": "text",
          "content": "p2p_order_create"
        }
      ],
      "tables": [
        "<table><thead><tr><th># </th><th>API Name</th><th>Description</th><th>Send</th><th>Subscribe</th><th>Scope</th></tr></thead><tbody><tr><td>1</td><td><a target=\"_blank\" href=\"https://api.deriv.com/api-explorer#p2p_advert_create\" rel=\"noopener noreferrer\">P2P: Advert Create</a></td><td>Creates a P2P advertisement. This can only be used by a verified P2P advertiser.</td><td>‚úî</td><td>‚úò</td><td>Payments</td></tr><tr><td>2</td><td><a target=\"_blank\" href=\"https://api.deriv.com/api-explorer#p2p_advert_info\" rel=\"noopener noreferrer\">P2P: Advert Information</a></td><td>Retrieves details about a specific P2P advertisement.</td><td>‚úî</td><td>‚úî</td><td>Payments</td></tr><tr><td>3</td><td><a target=\"_blank\" href=\"https://api.deriv.com/api-explorer#p2p_advert_list\" rel=\"noopener noreferrer\">P2P: Advert List</a></td><td>Returns available P2P advertisements for use with the <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\"><span class=\"cm-s-neo\" data-testid=\"SyntaxHighlighter\">p2p_order_create</span></code> function.</td><td>‚úî</td><td>‚úò</td><td>Payments</td></tr><tr><td>4</td><td><a target=\"_blank\" href=\"https://api.deriv.com/api-explorer#p2p_advert_update\" rel=\"noopener noreferrer\">P2P: Advert Update</a></td><td>Updates an existing P2P advertisement. This can only be used by the original advertiser.</td><td>‚úî</td><td>‚úò</td><td>Payments</td></tr><tr><td>5</td><td><a target=\"_blank\" href=\"https://api.deriv.com/api-explorer#p2p_advertiser_adverts\" rel=\"noopener noreferrer\">P2P: Advertiser Adverts</a></td><td>Returns all P2P adverts created by the authorized client. Can only be used by a registered P2P advertiser.</td><td>‚úî</td><td>‚úò</td><td>Payments</td></tr><tr><td>6</td><td><a target=\"_blank\" href=\"https://api.deriv.com/api-explorer#p2p_advertiser_create\" rel=\"noopener noreferrer\">P2P: Advertiser Create</a></td><td>Registers the client as a P2P advertiser.</td><td>‚úî</td><td>‚úî</td><td>Payments</td></tr><tr><td>7</td><td><a target=\"_blank\" href=\"https://api.deriv.com/api-explorer#p2p_advert_info\" rel=\"noopener noreferrer\">P2P: Advertiser Information</a></td><td>Retrieves information about a P2P advertiser.</td><td>‚úî</td><td>‚úî</td><td>Payments</td></tr><tr><td>8</td><td><a target=\"_blank\" href=\"https://api.deriv.com/api-explorer#p2p_advertiser_payment_methods\" rel=\"noopener noreferrer\">P2P: Advertiser Payment Methods</a></td><td>Manages or lists the payment methods for a P2P advertiser.</td><td>‚úî</td><td>‚úò</td><td>Payments</td></tr><tr><td>9</td><td><a target=\"_blank\" href=\"https://api.deriv.com/api-explorer#p2p_advertiser_relations\" rel=\"noopener noreferrer\">P2P: Advertiser Relations</a></td><td>Updates and retrieves the favourite and blocked advertisers for the current user.</td><td>‚úî</td><td>‚úò</td><td>Payments</td></tr><tr><td>10</td><td><a target=\"_blank\" href=\"https://api.deriv.com/api-explorer#p2p_advertiser_update\" rel=\"noopener noreferrer\">P2P: Advertiser Update</a></td><td>Updates the information of the registered P2P advertiser for the current account. Only available to verified P2P advertisers.</td><td>‚úî</td><td>‚úò</td><td>Payments</td></tr><tr><td>11</td><td><a target=\"_blank\" href=\"https://api.deriv.com/api-explorer#p2p_chat_create\" rel=\"noopener noreferrer\">P2P: Chat Create</a></td><td>Creates a P2P chat for the specified order.</td><td>‚úî</td><td>‚úò</td><td>Payments</td></tr><tr><td>12</td><td><a target=\"_blank\" href=\"https://api.deriv.com/api-explorer#p2p_order_cancel\" rel=\"noopener noreferrer\">P2P: Order Cancel</a></td><td>Cancels a P2P order.</td><td>‚úî</td><td>‚úò</td><td>Payments</td></tr><tr><td>13</td><td><a target=\"_blank\" href=\"https://api.deriv.com/api-explorer#p2p_order_confirm\" rel=\"noopener noreferrer\">P2P: Order Confirm</a></td><td>Confirms a P2P order.</td><td>‚úî</td><td>‚úò</td><td>Payments</td></tr><tr><td>14</td><td><a target=\"_blank\" href=\"https://api.deriv.com/api-explorer#p2p_order_create\" rel=\"noopener noreferrer\">P2P: Order Create</a></td><td>Creates a P2P order for a specified advertisement.</td><td>‚úî</td><td>‚úî</td><td>Payments</td></tr><tr><td>15</td><td><a target=\"_blank\" href=\"https://api.deriv.com/api-explorer#p2p_order_dispute\" rel=\"noopener noreferrer\">P2P: Order Dispute</a></td><td>Disputes a P2P order.</td><td>‚úî</td><td>‚úò</td><td>Payments</td></tr><tr><td>16</td><td><a target=\"_blank\" href=\"https://api.deriv.com/api-explorer#p2p_order_info\" rel=\"noopener noreferrer\">P2P: Order Information</a></td><td>Retrieves the information about a P2P order.</td><td>‚úî</td><td>‚úî</td><td>Payments</td></tr><tr><td>17</td><td><a target=\"_blank\" href=\"https://api.deriv.com/api-explorer#p2p_order_list\" rel=\"noopener noreferrer\">P2P: Order List</a></td><td>Lists active P2P orders.</td><td>‚úî</td><td>‚úî</td><td>Payments</td></tr><tr><td>18</td><td><a target=\"_blank\" href=\"https://api.deriv.com/api-explorer#p2p_order_review\" rel=\"noopener noreferrer\">P2P: Order Review</a></td><td>Creates a review for the specified P2P order.</td><td>‚úî</td><td>‚úò</td><td>Payments</td></tr><tr><td>19</td><td><a target=\"_blank\" href=\"https://api.deriv.com/api-explorer#p2p_payment_methods\" rel=\"noopener noreferrer\">P2P: Payment Methods</a></td><td>Lists all P2P payment methods.</td><td>‚úî</td><td>‚úò</td><td>Payments</td></tr></tbody></table>"
      ],
      "links": [
        {
          "text": "P2P: Advert Create",
          "href": "https://api.deriv.com/api-explorer#p2p_advert_create"
        },
        {
          "text": "P2P: Advert Information",
          "href": "https://api.deriv.com/api-explorer#p2p_advert_info"
        },
        {
          "text": "P2P: Advert List",
          "href": "https://api.deriv.com/api-explorer#p2p_advert_list"
        },
        {
          "text": "P2P: Advert Update",
          "href": "https://api.deriv.com/api-explorer#p2p_advert_update"
        },
        {
          "text": "P2P: Advertiser Adverts",
          "href": "https://api.deriv.com/api-explorer#p2p_advertiser_adverts"
        },
        {
          "text": "P2P: Advertiser Create",
          "href": "https://api.deriv.com/api-explorer#p2p_advertiser_create"
        },
        {
          "text": "P2P: Advertiser Information",
          "href": "https://api.deriv.com/api-explorer#p2p_advert_info"
        },
        {
          "text": "P2P: Advertiser Payment Methods",
          "href": "https://api.deriv.com/api-explorer#p2p_advertiser_payment_methods"
        },
        {
          "text": "P2P: Advertiser Relations",
          "href": "https://api.deriv.com/api-explorer#p2p_advertiser_relations"
        },
        {
          "text": "P2P: Advertiser Update",
          "href": "https://api.deriv.com/api-explorer#p2p_advertiser_update"
        },
        {
          "text": "P2P: Chat Create",
          "href": "https://api.deriv.com/api-explorer#p2p_chat_create"
        },
        {
          "text": "P2P: Order Cancel",
          "href": "https://api.deriv.com/api-explorer#p2p_order_cancel"
        },
        {
          "text": "P2P: Order Confirm",
          "href": "https://api.deriv.com/api-explorer#p2p_order_confirm"
        },
        {
          "text": "P2P: Order Create",
          "href": "https://api.deriv.com/api-explorer#p2p_order_create"
        },
        {
          "text": "P2P: Order Dispute",
          "href": "https://api.deriv.com/api-explorer#p2p_order_dispute"
        },
        {
          "text": "P2P: Order Information",
          "href": "https://api.deriv.com/api-explorer#p2p_order_info"
        },
        {
          "text": "P2P: Order List",
          "href": "https://api.deriv.com/api-explorer#p2p_order_list"
        },
        {
          "text": "P2P: Order Review",
          "href": "https://api.deriv.com/api-explorer#p2p_order_review"
        },
        {
          "text": "P2P: Payment Methods",
          "href": "https://api.deriv.com/api-explorer#p2p_payment_methods"
        }
      ]
    },
    "Application APIs": {
      "title": "Manage your OAuth applications with our API application | Deriv API",
      "url": "https://developers.deriv.com/docs/application-apis",
      "mainContent": "Application APIs are designed to manage your applications on Deriv. They provide functionalities for registering, updating, and deleting applications, as well as retrieving detailed information and usage statistics.\n\nThese APIs are crucial for managing access and permissions for third-party applications, ensuring secure and controlled integration with external services on the Deriv trading platforms.\n\n#\tAPI Name\tDescription\tSend\tSubscribe\tScope\n1\tApplication: Delete\tSends a request to delete an application.\t‚úî\t‚úò\tAdmin\n2\tApplication: Get Details\tRetrieves the information of the OAuth application specified by app_id.\t‚úî\t‚úò\tRead\n3\tApplication: List\tList all of the account's OAuth applications.\t‚úî\t‚úò\tRead\n4\tApplication: Markup Details\tRetrieves details of app_markup according to specified criteria.\t‚úî\t‚úò\tRead\n5\tApplication: Markup Statistics\tRetrieves statistics of app_markup.\t‚úî\t‚úò\tRead\n6\tApplication: Register\tRegisters a new OAuth application.\t‚úî\t‚úò\tAdmin\n7\tApplication: Update\tUpdates an existing OAuth application.\t‚úî\t‚úò\tAdmin\n8\tRevoke OAuth Application\tRevokes access for a particular application.\t‚úî\t‚úò\tAdmin\n\nUpdated 4 months ago\n\nDid this page help you?\nYes\nNo",
      "headings": [],
      "codeBlocks": [
        {
          "language": "text",
          "content": "app_id"
        },
        {
          "language": "text",
          "content": "app_markup"
        },
        {
          "language": "text",
          "content": "app_markup"
        }
      ],
      "tables": [
        "<table><thead><tr><th># </th><th>API Name</th><th>Description</th><th>Send</th><th>Subscribe</th><th>Scope</th></tr></thead><tbody><tr><td>1</td><td><a target=\"_blank\" href=\"https://api.deriv.com/api-explorer#app_delete\" rel=\"noopener noreferrer\">Application: Delete</a></td><td>Sends a request to delete an application.</td><td>‚úî</td><td>‚úò</td><td>Admin</td></tr><tr><td>2</td><td><a target=\"_blank\" href=\"https://api.deriv.com/api-explorer#app_get\" rel=\"noopener noreferrer\">Application: Get Details</a></td><td>Retrieves the information of the OAuth application specified by <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\"><span class=\"cm-s-neo\" data-testid=\"SyntaxHighlighter\">app_id</span></code>.</td><td>‚úî</td><td>‚úò</td><td>Read</td></tr><tr><td>3</td><td><a target=\"_blank\" href=\"https://api.deriv.com/api-explorer#app_list\" rel=\"noopener noreferrer\">Application: List</a></td><td>List all of the account's OAuth applications.</td><td>‚úî</td><td>‚úò</td><td>Read</td></tr><tr><td>4</td><td><a target=\"_blank\" href=\"https://api.deriv.com/api-explorer#app_markup_details\" rel=\"noopener noreferrer\">Application: Markup Details</a></td><td>Retrieves details of <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\"><span class=\"cm-s-neo\" data-testid=\"SyntaxHighlighter\">app_markup</span></code> according to specified criteria.</td><td>‚úî</td><td>‚úò</td><td>Read</td></tr><tr><td>5</td><td><a target=\"_blank\" href=\"https://api.deriv.com/api-explorer#app_markup_statistics\" rel=\"noopener noreferrer\">Application: Markup Statistics</a></td><td>Retrieves statistics of <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\"><span class=\"cm-s-neo\" data-testid=\"SyntaxHighlighter\">app_markup</span></code>.</td><td>‚úî</td><td>‚úò</td><td>Read</td></tr><tr><td>6</td><td><a target=\"_blank\" href=\"https://api.deriv.com/api-explorer#app_register\" rel=\"noopener noreferrer\">Application: Register</a></td><td>Registers a new OAuth application.</td><td>‚úî</td><td>‚úò</td><td>Admin</td></tr><tr><td>7</td><td><a target=\"_blank\" href=\"https://api.deriv.com/api-explorer#app_update\" rel=\"noopener noreferrer\">Application: Update</a></td><td>Updates an existing OAuth application.</td><td>‚úî</td><td>‚úò</td><td>Admin</td></tr><tr><td>8</td><td><a target=\"_blank\" href=\"https://api.deriv.com/api-explorer#revoke_oauth_app\" rel=\"noopener noreferrer\">Revoke OAuth Application</a></td><td>Revokes access for a particular application.</td><td>‚úî</td><td>‚úò</td><td>Admin</td></tr></tbody></table>"
      ],
      "links": [
        {
          "text": "Application: Delete",
          "href": "https://api.deriv.com/api-explorer#app_delete"
        },
        {
          "text": "Application: Get Details",
          "href": "https://api.deriv.com/api-explorer#app_get"
        },
        {
          "text": "Application: List",
          "href": "https://api.deriv.com/api-explorer#app_list"
        },
        {
          "text": "Application: Markup Details",
          "href": "https://api.deriv.com/api-explorer#app_markup_details"
        },
        {
          "text": "Application: Markup Statistics",
          "href": "https://api.deriv.com/api-explorer#app_markup_statistics"
        },
        {
          "text": "Application: Register",
          "href": "https://api.deriv.com/api-explorer#app_register"
        },
        {
          "text": "Application: Update",
          "href": "https://api.deriv.com/api-explorer#app_update"
        },
        {
          "text": "Revoke OAuth Application",
          "href": "https://api.deriv.com/api-explorer#revoke_oauth_app"
        }
      ]
    },
    "Account APIs": {
      "title": "Manage your account using account management API tools | Deriv API",
      "url": "https://developers.deriv.com/docs/account-apis",
      "mainContent": "Account APIs are designed to manage user accounts, settings, and security. They provide functionalities for authorising sessions, managing API tokens, retrieving and updating account information, handling KYC (Know Your Customer) processes, and setting trading and self-exclusion limits.\n\nThese APIs ensure secure, compliant, and personalised interactions on the Deriv platforms, empowering users to manage their accounts and trading activities effectively.\n\n#\tAPI Name\tDescription\tSend\tSubscribe\tScope\n1\tAPI Token\tThis call manages API tokens.\t‚úî\t‚úò\tAdmin\n2\tAuthorize\tAuthorises the current WebSocket session using a token. This must precede requests that require access to the client account, such as purchasing or selling contracts.\t‚úî\t‚úò\tNA\n3\tBalance\tRetrieves the user account balance.\t‚úî\t‚úî\tRead\n4\tDocument Upload\tRequests and uploads KYC documents from the client.\t‚úî\t‚úò\tAdmin\n5\tAccount Status\tRetrieves the current status of the user account.\t‚úî\t‚úò\tRead\n6\tLogin History\tRetrieves a summary of the user‚Äôs login history.\t‚úî\t‚úò\tRead\n7\tLog Out\tLogs the user out of the current session.\t‚úî\t‚úò\tNA\n8\tAccount Limits\tRetrieves the user's trading and withdrawal limits.\t‚úî\t‚úò\tRead\n9\tGet Self-Exclusion\tAllows users to exclude themselves from the website or set limits on their trading activities.\t‚úî\t‚úò\tRead\n10\tGet Account Settings\tRetrieves the user‚Äôs account settings, such as email, date of birth, and address.\t‚úî\t‚úò\tRead\n11\tIdentity Verification Add Document\tAdds documents required for identity verification, including country of issuance and document type.\t‚úî\t‚úò\tAdmin\n12\tNew Real-Money Account: Deriv Investment (Europe) Ltd\tOpens a new real-money account with the Maltainvest Landing Company.\t‚úî\t‚úò\tAdmin\n13\tNew Real-Money Account: Default Landing Company\tOpens a new real-money account.\t‚úî\t‚úò\tAdmin\n14\tNew Virtual-Money Account\tCreates a demo account.\t‚úî\t‚úò\tNA\n15\tOAuth Applications\tLists all used OAuth applications.\t‚úî\t‚úò\tRead\n16\tVerify Email\tVerifies the user‚Äôs email address for various purposes.\t‚úî\t‚úò\tNA\n17\tGet Financial Assessment\tRetrieves the client‚Äôs financial assessment details, which are required for compliance with regulatory and KYC requirements.\t‚úî\t‚úò\tRead\n18\tTop Up Virtual-Money Account\tTops up the demo account when the balance is low.\t‚úî\t‚úò\tTrade\n19\tTerms and Conditions Approval\tApproves the latest version of Deriv's terms and conditions.\t‚úî\t‚úò\tAdmin\n20\tTrading Platform: Investor Password Reset\tResets the investor password of the trading platform account.\t‚úî\t‚úò\tAdmin\n21\tTrading Platform: Password Reset\tResets the password of the trading platform account.\t‚úî\t‚úò\tAdmin\n22\tSet Financial Assessment\tUpdates the financial assessment based on the client‚Äôs knowledge and experience with options trading.\t‚úî\t‚úò\tAdmin\n23\tSet Self-Exclusion\tSets self-exclusion limits (in conjunction with the get_self_exclusion function).\t‚úî\t‚úò\tAdmin\n24\tSet Account Settings\tUpdates the user‚Äôs account settings (in conjunction with get_account_settings).\t‚úî\t‚úò\tAdmin\n\nUpdated 4 months ago\n\nDid this page help you?\nYes\nNo",
      "headings": [],
      "codeBlocks": [
        {
          "language": "text",
          "content": "Maltainvest"
        },
        {
          "language": "text",
          "content": "get_self_exclusion"
        },
        {
          "language": "text",
          "content": "get_account_settings"
        }
      ],
      "tables": [
        "<table><thead><tr><th># </th><th>API Name</th><th>Description</th><th>Send</th><th>Subscribe</th><th>Scope</th></tr></thead><tbody><tr><td>1</td><td><a target=\"_blank\" href=\"https://api.deriv.com/api-explorer#api_token\" rel=\"noopener noreferrer\">API Token</a></td><td>This call manages API tokens.</td><td>‚úî</td><td>‚úò</td><td>Admin</td></tr><tr><td>2</td><td><a target=\"_blank\" href=\"https://api.deriv.com/api-explorer#authorize\" rel=\"noopener noreferrer\">Authorize</a></td><td>Authorises the current WebSocket session using a token. This must precede requests that require access to the client account, such as purchasing or selling contracts.</td><td>‚úî</td><td>‚úò</td><td>NA</td></tr><tr><td>3</td><td><a target=\"_blank\" href=\"https://api.deriv.com/api-explorer#balance\" rel=\"noopener noreferrer\">Balance</a></td><td>Retrieves the user account balance.</td><td>‚úî</td><td>‚úî</td><td>Read</td></tr><tr><td>4</td><td><a target=\"_blank\" href=\"https://api.deriv.com/api-explorer#document_upload\" rel=\"noopener noreferrer\">Document Upload</a></td><td>Requests and uploads KYC documents from the client.</td><td>‚úî</td><td>‚úò</td><td>Admin</td></tr><tr><td>5</td><td><a target=\"_blank\" href=\"https://api.deriv.com/api-explorer#get_account_status\" rel=\"noopener noreferrer\">Account Status</a></td><td>Retrieves the current status of the user account.</td><td>‚úî</td><td>‚úò</td><td>Read</td></tr><tr><td>6</td><td><a target=\"_blank\" href=\"https://api.deriv.com/api-explorer#login_history\" rel=\"noopener noreferrer\">Login History</a></td><td>Retrieves a summary of the user‚Äôs login history.</td><td>‚úî</td><td>‚úò</td><td>Read</td></tr><tr><td>7</td><td><a target=\"_blank\" href=\"https://api.deriv.com/api-explorer#logout\" rel=\"noopener noreferrer\">Log Out</a></td><td>Logs the user out of the current session.</td><td>‚úî</td><td>‚úò</td><td>NA</td></tr><tr><td>8</td><td><a target=\"_blank\" href=\"https://api.deriv.com/api-explorer#get_limits\" rel=\"noopener noreferrer\">Account Limits</a></td><td>Retrieves the user's trading and withdrawal limits.</td><td>‚úî</td><td>‚úò</td><td>Read</td></tr><tr><td>9</td><td><a target=\"_blank\" href=\"https://api.deriv.com/api-explorer#get_self_exclusion\" rel=\"noopener noreferrer\">Get Self-Exclusion</a></td><td>Allows users to exclude themselves from the website or set limits on their trading activities.</td><td>‚úî</td><td>‚úò</td><td>Read</td></tr><tr><td>10</td><td><a target=\"_blank\" href=\"https://api.deriv.com/api-explorer#get_settings\" rel=\"noopener noreferrer\">Get Account Settings</a></td><td>Retrieves the user‚Äôs account settings, such as email, date of birth, and address.</td><td>‚úî</td><td>‚úò</td><td>Read</td></tr><tr><td>11</td><td><a target=\"_blank\" href=\"https://api.deriv.com/api-explorer#identity_verification_document_add\" rel=\"noopener noreferrer\">Identity Verification Add Document</a></td><td>Adds documents required for identity verification, including country of issuance and document type.</td><td>‚úî</td><td>‚úò</td><td>Admin</td></tr><tr><td>12</td><td><a target=\"_blank\" href=\"https://api.deriv.com/api-explorer#new_account_maltainvest\" rel=\"noopener noreferrer\">New Real-Money Account: Deriv Investment (Europe) Ltd</a></td><td>Opens a new real-money account with the <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\"><span class=\"cm-s-neo\" data-testid=\"SyntaxHighlighter\">Maltainvest</span></code> Landing Company.</td><td>‚úî</td><td>‚úò</td><td>Admin</td></tr><tr><td>13</td><td><a target=\"_blank\" href=\"https://api.deriv.com/api-explorer#new_account_real\" rel=\"noopener noreferrer\">New Real-Money Account: Default Landing Company</a></td><td>Opens a new real-money account.</td><td>‚úî</td><td>‚úò</td><td>Admin</td></tr><tr><td>14</td><td><a target=\"_blank\" href=\"https://api.deriv.com/api-explorer#new_account_virtual\" rel=\"noopener noreferrer\">New Virtual-Money Account</a></td><td>Creates a demo account.</td><td>‚úî</td><td>‚úò</td><td>NA</td></tr><tr><td>15</td><td><a target=\"_blank\" href=\"https://api.deriv.com/api-explorer#oauth_apps\" rel=\"noopener noreferrer\">OAuth Applications</a></td><td>Lists all used OAuth applications.</td><td>‚úî</td><td>‚úò</td><td>Read</td></tr><tr><td>16</td><td><a target=\"_blank\" href=\"https://api.deriv.com/api-explorer#verify_email\" rel=\"noopener noreferrer\">Verify Email</a></td><td>Verifies the user‚Äôs email address for various purposes.</td><td>‚úî</td><td>‚úò</td><td>NA</td></tr><tr><td>17</td><td><a target=\"_blank\" href=\"https://api.deriv.com/api-explorer#get_financial_assessment\" rel=\"noopener noreferrer\">Get Financial Assessment</a></td><td>Retrieves the client‚Äôs financial assessment details, which are required for compliance with regulatory and KYC requirements.</td><td>‚úî</td><td>‚úò</td><td>Read</td></tr><tr><td>18</td><td><a target=\"_blank\" href=\"https://api.deriv.com/api-explorer#topup_virtual\" rel=\"noopener noreferrer\">Top Up Virtual-Money Account</a></td><td>Tops up the demo account when the balance is low.</td><td>‚úî</td><td>‚úò</td><td>Trade</td></tr><tr><td>19</td><td><a target=\"_blank\" href=\"https://api.deriv.com/api-explorer#tnc_approval\" rel=\"noopener noreferrer\">Terms and Conditions Approval</a></td><td>Approves the latest version of Deriv's terms and conditions.</td><td>‚úî</td><td>‚úò</td><td>Admin</td></tr><tr><td>20</td><td><a target=\"_blank\" href=\"https://api.deriv.com/api-explorer#trading_platform_investor_password_reset\" rel=\"noopener noreferrer\">Trading Platform: Investor Password Reset</a></td><td>Resets the investor password of the trading platform account.</td><td>‚úî</td><td>‚úò</td><td>Admin</td></tr><tr><td>21</td><td><a target=\"_blank\" href=\"https://api.deriv.com/api-explorer#trading_platform_password_reset\" rel=\"noopener noreferrer\">Trading Platform: Password Reset</a></td><td>Resets the password of the trading platform account.</td><td>‚úî</td><td>‚úò</td><td>Admin</td></tr><tr><td>22</td><td><a target=\"_blank\" href=\"https://api.deriv.com/api-explorer#set_financial_assessment\" rel=\"noopener noreferrer\">Set Financial Assessment</a></td><td>Updates the financial assessment based on the client‚Äôs knowledge and experience with options trading.</td><td>‚úî</td><td>‚úò</td><td>Admin</td></tr><tr><td>23</td><td><a target=\"_blank\" href=\"https://api.deriv.com/api-explorer#set_self_exclusion\" rel=\"noopener noreferrer\">Set Self-Exclusion</a></td><td>Sets self-exclusion limits (in conjunction with the <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\"><span class=\"cm-s-neo\" data-testid=\"SyntaxHighlighter\">get_self_exclusion</span></code> function).</td><td>‚úî</td><td>‚úò</td><td>Admin</td></tr><tr><td>24</td><td><a target=\"_blank\" href=\"https://api.deriv.com/api-explorer#set_settings\" rel=\"noopener noreferrer\">Set Account Settings</a></td><td>Updates the user‚Äôs account settings (in conjunction with <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\"><span class=\"cm-s-neo\" data-testid=\"SyntaxHighlighter\">get_account_settings</span></code>).</td><td>‚úî</td><td>‚úò</td><td>Admin</td></tr></tbody></table>"
      ],
      "links": [
        {
          "text": "API Token",
          "href": "https://api.deriv.com/api-explorer#api_token"
        },
        {
          "text": "Authorize",
          "href": "https://api.deriv.com/api-explorer#authorize"
        },
        {
          "text": "Balance",
          "href": "https://api.deriv.com/api-explorer#balance"
        },
        {
          "text": "Document Upload",
          "href": "https://api.deriv.com/api-explorer#document_upload"
        },
        {
          "text": "Account Status",
          "href": "https://api.deriv.com/api-explorer#get_account_status"
        },
        {
          "text": "Login History",
          "href": "https://api.deriv.com/api-explorer#login_history"
        },
        {
          "text": "Log Out",
          "href": "https://api.deriv.com/api-explorer#logout"
        },
        {
          "text": "Account Limits",
          "href": "https://api.deriv.com/api-explorer#get_limits"
        },
        {
          "text": "Get Self-Exclusion",
          "href": "https://api.deriv.com/api-explorer#get_self_exclusion"
        },
        {
          "text": "Get Account Settings",
          "href": "https://api.deriv.com/api-explorer#get_settings"
        },
        {
          "text": "Identity Verification Add Document",
          "href": "https://api.deriv.com/api-explorer#identity_verification_document_add"
        },
        {
          "text": "New Real-Money Account: Deriv Investment (Europe) Ltd",
          "href": "https://api.deriv.com/api-explorer#new_account_maltainvest"
        },
        {
          "text": "New Real-Money Account: Default Landing Company",
          "href": "https://api.deriv.com/api-explorer#new_account_real"
        },
        {
          "text": "New Virtual-Money Account",
          "href": "https://api.deriv.com/api-explorer#new_account_virtual"
        },
        {
          "text": "OAuth Applications",
          "href": "https://api.deriv.com/api-explorer#oauth_apps"
        },
        {
          "text": "Verify Email",
          "href": "https://api.deriv.com/api-explorer#verify_email"
        },
        {
          "text": "Get Financial Assessment",
          "href": "https://api.deriv.com/api-explorer#get_financial_assessment"
        },
        {
          "text": "Top Up Virtual-Money Account",
          "href": "https://api.deriv.com/api-explorer#topup_virtual"
        },
        {
          "text": "Terms and Conditions Approval",
          "href": "https://api.deriv.com/api-explorer#tnc_approval"
        },
        {
          "text": "Trading Platform: Investor Password Reset",
          "href": "https://api.deriv.com/api-explorer#trading_platform_investor_password_reset"
        },
        {
          "text": "Trading Platform: Password Reset",
          "href": "https://api.deriv.com/api-explorer#trading_platform_password_reset"
        },
        {
          "text": "Set Financial Assessment",
          "href": "https://api.deriv.com/api-explorer#set_financial_assessment"
        },
        {
          "text": "Set Self-Exclusion",
          "href": "https://api.deriv.com/api-explorer#set_self_exclusion"
        },
        {
          "text": "Set Account Settings",
          "href": "https://api.deriv.com/api-explorer#set_settings"
        }
      ]
    },
    "Market Data APIs": {
      "title": "Market data APIs for real-time trading data | Deriv API",
      "url": "https://developers.deriv.com/docs/market-data-apis",
      "mainContent": "Market Data APIs provide access to real-time market data and pricing information on Deriv.\n\nThey offer functionalities for retrieving active trading symbols, exchange rates, contract details, and price proposals. Additionally, these APIs enable real-time streaming of spot prices and access to historical tick data, helping users make informed trading decisions.\n\nThese APIs are crucial for accessing accurate and up-to-date market data, ensuring users can trade efficiently on the Deriv trading platforms.\n\n#\tAPI Name\tDescription\tSend\tSubscribe\tScope\n1\tActive Symbols\tRetrieves a list of all currently active symbols (underlying markets available for trading).\t‚úî\t‚úò\tNA\n2\tAsset Index\tRetrieves a list of available underlyings along with their corresponding contract types and duration limits. For logged-in users, only assets available under their landing company will be returned.\t‚úî\t‚úò\tNA\n3\tExchange Rates\tRetrieves the exchange rate between a base currency and a target currency supported by the system.\t‚úî\t‚úî\tNA\n4\tContracts For Symbol\tRetrieves the list of available contracts for a given symbol, including the latest barrier and duration limits.\t‚úî\t‚úò\tNA\n5\tPrice Proposal\tRetrieves the latest price for a specific contract.\t‚úî\t‚úî\tNA\n6\tPrice Proposal: Open Contracts\tRetrieves the latest price and relevant information for a contract within the user's portfolio.\t‚úî\t‚úî\tRead\n7\tTicks Stream\tInitiates a continuous stream of spot price updates for a given symbol.\t‚úî\t‚úî\tNA\n8\tTicks History\tRetrieves historical tick data for a given symbol.\t‚úî\t‚úî\tNA\n\nUpdated 4 months ago\n\nDid this page help you?\nYes\nNo",
      "headings": [],
      "codeBlocks": [],
      "tables": [
        "<table><thead><tr><th># </th><th>API Name</th><th>Description</th><th>Send</th><th>Subscribe</th><th>Scope</th></tr></thead><tbody><tr><td>1</td><td><a target=\"_blank\" href=\"https://api.deriv.com/api-explorer#active_symbols\" rel=\"noopener noreferrer\">Active Symbols</a></td><td>Retrieves a list of all currently active symbols (underlying markets available for trading).</td><td>‚úî</td><td>‚úò</td><td>NA</td></tr><tr><td>2</td><td><a target=\"_blank\" href=\"https://api.deriv.com/api-explorer#asset_index\" rel=\"noopener noreferrer\">Asset Index</a></td><td>Retrieves a list of available underlyings along with their corresponding contract types and duration limits. For logged-in users, only assets available under their landing company will be returned.</td><td>‚úî</td><td>‚úò</td><td>NA</td></tr><tr><td>3</td><td><a target=\"_blank\" href=\"https://api.deriv.com/api-explorer#exchange_rates\" rel=\"noopener noreferrer\">Exchange Rates</a></td><td>Retrieves the exchange rate between a base currency and a target currency supported by the system.</td><td>‚úî</td><td>‚úî</td><td>NA</td></tr><tr><td>4</td><td><a target=\"_blank\" href=\"https://api.deriv.com/api-explorer#contracts_for\" rel=\"noopener noreferrer\">Contracts For Symbol</a></td><td>Retrieves the list of available contracts for a given symbol, including the latest barrier and duration limits.</td><td>‚úî</td><td>‚úò</td><td>NA</td></tr><tr><td>5</td><td><a target=\"_blank\" href=\"https://api.deriv.com/api-explorer#proposal\" rel=\"noopener noreferrer\">Price Proposal</a></td><td>Retrieves the latest price for a specific contract.</td><td>‚úî</td><td>‚úî</td><td>NA</td></tr><tr><td>6</td><td><a target=\"_blank\" href=\"https://api.deriv.com/api-explorer#proposal_open_contract\" rel=\"noopener noreferrer\">Price Proposal: Open Contracts</a></td><td>Retrieves the latest price and relevant information for a contract within the user's portfolio.</td><td>‚úî</td><td>‚úî</td><td>Read</td></tr><tr><td>7</td><td><a target=\"_blank\" href=\"https://api.deriv.com/api-explorer#ticks\" rel=\"noopener noreferrer\">Ticks Stream</a></td><td>Initiates a continuous stream of spot price updates for a given symbol.</td><td>‚úî</td><td>‚úî</td><td>NA</td></tr><tr><td>8</td><td><a target=\"_blank\" href=\"https://api.deriv.com/api-explorer#ticks_history\" rel=\"noopener noreferrer\">Ticks History</a></td><td>Retrieves historical tick data for a given symbol.</td><td>‚úî</td><td>‚úî</td><td>NA</td></tr></tbody></table>"
      ],
      "links": [
        {
          "text": "Active Symbols",
          "href": "https://api.deriv.com/api-explorer#active_symbols"
        },
        {
          "text": "Asset Index",
          "href": "https://api.deriv.com/api-explorer#asset_index"
        },
        {
          "text": "Exchange Rates",
          "href": "https://api.deriv.com/api-explorer#exchange_rates"
        },
        {
          "text": "Contracts For Symbol",
          "href": "https://api.deriv.com/api-explorer#contracts_for"
        },
        {
          "text": "Price Proposal",
          "href": "https://api.deriv.com/api-explorer#proposal"
        },
        {
          "text": "Price Proposal: Open Contracts",
          "href": "https://api.deriv.com/api-explorer#proposal_open_contract"
        },
        {
          "text": "Ticks Stream",
          "href": "https://api.deriv.com/api-explorer#ticks"
        },
        {
          "text": "Ticks History",
          "href": "https://api.deriv.com/api-explorer#ticks_history"
        }
      ]
    },
    "Cashier APIs": {
      "title": "Make payments with cashier API and payment API integration| Deriv API",
      "url": "https://developers.deriv.com/docs/cashier-apis",
      "mainContent": "Cashier APIs are designed to handle payments and account management. They provide functionalities for retrieving cashier information, transferring funds between accounts (both fiat and cryptocurrency), and obtaining a list of available payout currencies.\n\nThese APIs are essential for managing financial transactions, allowing users to control their funds within the platform efficiently.\n\n#\tAPI Name\tDescription\tSend\tSubscribe\tScope\n1\tCashier Information\tRequests the cashier information for the specified type.\t‚úî\t‚úò\tPayments\n2\tTransfer Between Accounts\tAllows transfers between a user‚Äôs fiat and cryptocurrency accounts (fees may apply). The account_from parameter must match the currently authorised account.\t‚úî\t‚úò\tPayments\n3\tPayout Currencies\tRetrieves a list of available payout currencies. If a user is logged in, only the currencies available for their account will be returned.\t‚úî\t‚úò\tNA\n\nUpdated 4 months ago\n\nDid this page help you?\nYes\nNo",
      "headings": [],
      "codeBlocks": [
        {
          "language": "text",
          "content": "account_from"
        }
      ],
      "tables": [
        "<table><thead><tr><th># </th><th>API Name</th><th>Description</th><th>Send</th><th>Subscribe</th><th>Scope</th></tr></thead><tbody><tr><td>1</td><td><a target=\"_blank\" href=\"https://api.deriv.com/api-explorer#cashier\" rel=\"noopener noreferrer\">Cashier Information</a></td><td>Requests the cashier information for the specified type.</td><td>‚úî</td><td>‚úò</td><td>Payments</td></tr><tr><td>2</td><td><a target=\"_blank\" href=\"https://api.deriv.com/api-explorer#transfer_between_accounts\" rel=\"noopener noreferrer\">Transfer Between Accounts</a></td><td>Allows transfers between a user‚Äôs fiat and cryptocurrency accounts (fees may apply). The <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\"><span class=\"cm-s-neo\" data-testid=\"SyntaxHighlighter\">account_from</span></code> parameter must match the currently authorised account.</td><td>‚úî</td><td>‚úò</td><td>Payments</td></tr><tr><td>3</td><td><a target=\"_blank\" href=\"https://api.deriv.com/api-explorer#payout_currencies\" rel=\"noopener noreferrer\">Payout Currencies</a></td><td>Retrieves a list of available payout currencies. If a user is logged in, only the currencies available for their account will be returned.</td><td>‚úî</td><td>‚úò</td><td>NA</td></tr></tbody></table>"
      ],
      "links": [
        {
          "text": "Cashier Information",
          "href": "https://api.deriv.com/api-explorer#cashier"
        },
        {
          "text": "Transfer Between Accounts",
          "href": "https://api.deriv.com/api-explorer#transfer_between_accounts"
        },
        {
          "text": "Payout Currencies",
          "href": "https://api.deriv.com/api-explorer#payout_currencies"
        }
      ]
    },
    "Reports APIs": {
      "title": "Keep track of your API account with report APIs | Deriv API",
      "url": "https://developers.deriv.com/docs/reports-apis",
      "mainContent": "Reports APIs are designed to monitor and report user account activity. They provide functionalities for retrieving reality check summaries, generating account statements, and subscribing to real-time transaction notifications.\n\nThese APIs are essential for ensuring regulatory compliance and giving clients up-to-date insights into their trading activities and account status.\n\n#\tAPI Name\tDescription\tSend\tSubscribe\tScope\n1\tReality Check\tRetrieves a summary of the client‚Äôs trades and account status for the Reality Check feature.\n\nThis includes the time elapsed since the session began and the associated profit/loss.\t‚úî\t‚úò\tRead, Trading Information\n2\tStatement\tRetrieves a summary of account transactions according to the specified search criteria.\t‚úî\t‚úò\tRead, Trading Information\n3\tTransactions Stream\tSubscribes to real-time transaction notifications.\t‚úî\t‚úî\tRead, Trading Information\n\nUpdated 4 months ago\n\nDid this page help you?\nYes\nNo",
      "headings": [],
      "codeBlocks": [],
      "tables": [
        "<table><thead><tr><th># </th><th>API Name</th><th>Description</th><th>Send</th><th>Subscribe</th><th>Scope</th></tr></thead><tbody><tr><td>1</td><td><a target=\"_blank\" href=\"https://api.deriv.com/api-explorer#reality_check\" rel=\"noopener noreferrer\">Reality Check</a></td><td>Retrieves a summary of the client‚Äôs trades and account status for the Reality Check feature. <br><br>This includes the time elapsed since the session began and the associated profit/loss.</td><td>‚úî</td><td>‚úò</td><td>Read, Trading Information</td></tr><tr><td>2</td><td><a target=\"_blank\" href=\"https://api.deriv.com/api-explorer#statement\" rel=\"noopener noreferrer\">Statement</a></td><td>Retrieves a summary of account transactions according to the specified search criteria.</td><td>‚úî</td><td>‚úò</td><td>Read, Trading Information</td></tr><tr><td>3</td><td><a target=\"_blank\" href=\"https://api.deriv.com/api-explorer#transaction\" rel=\"noopener noreferrer\">Transactions Stream</a></td><td>Subscribes to real-time transaction notifications.</td><td>‚úî</td><td>‚úî</td><td>Read, Trading Information</td></tr></tbody></table>"
      ],
      "links": [
        {
          "text": "Reality Check",
          "href": "https://api.deriv.com/api-explorer#reality_check"
        },
        {
          "text": "Statement",
          "href": "https://api.deriv.com/api-explorer#statement"
        },
        {
          "text": "Transactions Stream",
          "href": "https://api.deriv.com/api-explorer#transaction"
        }
      ]
    },
    "Trading APIs": {
      "title": "Manage contracts and copy trading with trading APIs | Deriv API",
      "url": "https://developers.deriv.com/docs/trading-apis",
      "mainContent": "Trading APIs focus on trading and managing contracts.\n\nThey include functionalities for buying, selling, and updating contracts, as well as managing copy trading activities. The APIs also allow users to retrieve important trading information such as profit tables, portfolio details, and contract durations.\n\nThese APIs are essential for users who actively trade on the platform and need to manage their trading accounts effectively.\n\n#\tAPI Name\tDescription\tSend\tSubscribe\tScope\n1\tBuy Contract: Trade\tBuys a contract.\t‚úî\t‚úò\tTrade\n2\tBuy Contract for Multiple Accounts\tBuys a contract for multiple accounts specified by the tokens parameter. Note that although this is an authorized call, the contract is not purchased for the authorized account.\t‚úî\t‚úò\tTrade\n3\tCancel a Contract\tCancels a contract using its contract ID.\t‚úî\t‚úò\tTrade\n4\tUpdate Contract\tUpdates the conditions of a contract.\t‚úî\t‚úò\tTrade\n5\tUpdate Contract History\tRetrieves the update history of a contract.\t‚úî\t‚úò\tRead\n6\tCopy Trading: Start\tStarts copy trader bets.\t‚úî\t‚úò\tTrade\n7\tCopy Trading: Stop\tStops copy trader bets.\t‚úî\t‚úò\tTrade\n8\tCopy Trading: List\tRetrieves a list of active copiers and/or traders involved in copy trading.\t‚úî\t‚úò\tAdmin\n9\tCopy Trading: Statistics\tRetrieves performance, trading, risk, and copiers statistics for a trader.\t‚úî\t‚úò\tNA\n10\tSell Contract\tSells a contract as identified from a previous portfolio call.\t‚úî\t‚úò\tTrade\n11\tSell Contracts: Multiple Accounts\tSells contracts for multiple accounts simultaneously. Uses the shortcode response from buy_contract_for_multiple_accounts to identify the contract and authorization tokens to select which accounts to sell.\t‚úî\t‚úò\tTrade\n12\tSell Expired Contracts\tAttempts to sell any expired contracts and returns the number of sold contracts.\t‚úî\t‚úò\tTrade\n13\tSet Account Currency\tSets the account's default currency for trading and deposits. The account currency can only be set once and cannot be changed.\t‚úî\t‚úò\tAdmin\n14\tTrading Durations\tRetrieves a list of available underlying contract types and trading duration boundaries. If the user is logged in, assets available only for their landing company will be returned.\t‚úî\t‚úò\tNA\n15\tProfit Table\tRetrieves a summary of the account's profit table based on the specified search criteria.\t‚úî\t‚úò\tRead, Trading Information\n16\tPortfolio\tProvides information about your current portfolio of outstanding options.\t‚úî\t‚úò\tRead, Trading Information\n\nUpdated 4 months ago\n\nDid this page help you?\nYes\nNo",
      "headings": [],
      "codeBlocks": [
        {
          "language": "text",
          "content": "tokens"
        },
        {
          "language": "text",
          "content": "portfolio"
        },
        {
          "language": "text",
          "content": "buy_contract_for_multiple_accounts"
        }
      ],
      "tables": [
        "<table><thead><tr><th># </th><th>API Name</th><th>Description</th><th>Send</th><th>Subscribe</th><th>Scope</th></tr></thead><tbody><tr><td>1</td><td><a target=\"_blank\" href=\"https://api.deriv.com/api-explorer#buy\" rel=\"noopener noreferrer\">Buy Contract: Trade</a></td><td>Buys a contract.</td><td>‚úî</td><td>‚úò</td><td>Trade</td></tr><tr><td>2</td><td><a target=\"_blank\" href=\"https://api.deriv.com/api-explorer#buy_contract_for_multiple_accounts\" rel=\"noopener noreferrer\">Buy Contract for Multiple Accounts</a></td><td>Buys a contract for multiple accounts specified by the <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\"><span class=\"cm-s-neo\" data-testid=\"SyntaxHighlighter\">tokens</span></code> parameter. Note that although this is an authorized call, the contract is not purchased for the authorized account.</td><td>‚úî</td><td>‚úò</td><td>Trade</td></tr><tr><td>3</td><td><a target=\"_blank\" href=\"https://api.deriv.com/api-explorer#cancel\" rel=\"noopener noreferrer\">Cancel a Contract</a></td><td>Cancels a contract using its contract ID.</td><td>‚úî</td><td>‚úò</td><td>Trade</td></tr><tr><td>4</td><td><a target=\"_blank\" href=\"https://api.deriv.com/api-explorer#contract_update\" rel=\"noopener noreferrer\">Update Contract</a></td><td>Updates the conditions of a contract.</td><td>‚úî</td><td>‚úò</td><td>Trade</td></tr><tr><td>5</td><td><a target=\"_blank\" href=\"https://api.deriv.com/api-explorer#contract_update_history\" rel=\"noopener noreferrer\">Update Contract History</a></td><td>Retrieves the update history of a contract.</td><td>‚úî</td><td>‚úò</td><td>Read</td></tr><tr><td>6</td><td><a target=\"_blank\" href=\"https://api.deriv.com/api-explorer#copy_start\" rel=\"noopener noreferrer\">Copy Trading: Start</a></td><td>Starts copy trader bets.</td><td>‚úî</td><td>‚úò</td><td>Trade</td></tr><tr><td>7</td><td><a target=\"_blank\" href=\"https://api.deriv.com/api-explorer#copy_stop\" rel=\"noopener noreferrer\">Copy Trading: Stop</a></td><td>Stops copy trader bets.</td><td>‚úî</td><td>‚úò</td><td>Trade</td></tr><tr><td>8</td><td><a target=\"_blank\" href=\"https://api.deriv.com/api-explorer#copytrading_list\" rel=\"noopener noreferrer\">Copy Trading: List</a></td><td>Retrieves a list of active copiers and/or traders involved in copy trading.</td><td>‚úî</td><td>‚úò</td><td>Admin</td></tr><tr><td>9</td><td><a target=\"_blank\" href=\"https://api.deriv.com/api-explorer#copytrading_statistics\" rel=\"noopener noreferrer\">Copy Trading: Statistics</a></td><td>Retrieves performance, trading, risk, and copiers statistics for a trader.</td><td>‚úî</td><td>‚úò</td><td>NA</td></tr><tr><td>10</td><td><a target=\"_blank\" href=\"https://api.deriv.com/api-explorer#sell\" rel=\"noopener noreferrer\">Sell Contract</a></td><td>Sells a contract as identified from a previous <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\"><span class=\"cm-s-neo\" data-testid=\"SyntaxHighlighter\">portfolio</span></code> call.</td><td>‚úî</td><td>‚úò</td><td>Trade</td></tr><tr><td>11</td><td><a target=\"_blank\" href=\"https://api.deriv.com/api-explorer#sell_contract_for_multiple_accounts\" rel=\"noopener noreferrer\">Sell Contracts: Multiple Accounts</a></td><td>Sells contracts for multiple accounts simultaneously. Uses the shortcode response from <button aria-label=\"Copy Code\" class=\"rdmd-code-copy fa\"></button><code class=\"rdmd-code lang- theme-light\" data-lang=\"\" name=\"\" tabindex=\"0\"><span class=\"cm-s-neo\" data-testid=\"SyntaxHighlighter\">buy_contract_for_multiple_accounts</span></code> to identify the contract and authorization tokens to select which accounts to sell.</td><td>‚úî</td><td>‚úò</td><td>Trade</td></tr><tr><td>12</td><td><a target=\"_blank\" href=\"https://api.deriv.com/api-explorer#sell_expired\" rel=\"noopener noreferrer\">Sell Expired Contracts</a></td><td>Attempts to sell any expired contracts and returns the number of sold contracts.</td><td>‚úî</td><td>‚úò</td><td>Trade</td></tr><tr><td>13</td><td><a target=\"_blank\" href=\"https://api.deriv.com/api-explorer#set_account_currency\" rel=\"noopener noreferrer\">Set Account Currency</a></td><td>Sets the account's default currency for trading and deposits. The account currency can only be set once and cannot be changed.</td><td>‚úî</td><td>‚úò</td><td>Admin</td></tr><tr><td>14</td><td><a target=\"_blank\" href=\"https://api.deriv.com/api-explorer#trading_durations\" rel=\"noopener noreferrer\">Trading Durations</a></td><td>Retrieves a list of available underlying contract types and trading duration boundaries. If the user is logged in, assets available only for their landing company will be returned.</td><td>‚úî</td><td>‚úò</td><td>NA</td></tr><tr><td>15</td><td><a target=\"_blank\" href=\"https://api.deriv.com/api-explorer#profit_table\" rel=\"noopener noreferrer\">Profit Table</a></td><td>Retrieves a summary of the account's profit table based on the specified search criteria.</td><td>‚úî</td><td>‚úò</td><td>Read, Trading Information</td></tr><tr><td>16</td><td><a target=\"_blank\" href=\"https://api.deriv.com/api-explorer#portfolio\" rel=\"noopener noreferrer\">Portfolio</a></td><td>Provides information about your current portfolio of outstanding options.</td><td>‚úî</td><td>‚úò</td><td>Read, Trading Information</td></tr></tbody></table>"
      ],
      "links": [
        {
          "text": "Buy Contract: Trade",
          "href": "https://api.deriv.com/api-explorer#buy"
        },
        {
          "text": "Buy Contract for Multiple Accounts",
          "href": "https://api.deriv.com/api-explorer#buy_contract_for_multiple_accounts"
        },
        {
          "text": "Cancel a Contract",
          "href": "https://api.deriv.com/api-explorer#cancel"
        },
        {
          "text": "Update Contract",
          "href": "https://api.deriv.com/api-explorer#contract_update"
        },
        {
          "text": "Update Contract History",
          "href": "https://api.deriv.com/api-explorer#contract_update_history"
        },
        {
          "text": "Copy Trading: Start",
          "href": "https://api.deriv.com/api-explorer#copy_start"
        },
        {
          "text": "Copy Trading: Stop",
          "href": "https://api.deriv.com/api-explorer#copy_stop"
        },
        {
          "text": "Copy Trading: List",
          "href": "https://api.deriv.com/api-explorer#copytrading_list"
        },
        {
          "text": "Copy Trading: Statistics",
          "href": "https://api.deriv.com/api-explorer#copytrading_statistics"
        },
        {
          "text": "Sell Contract",
          "href": "https://api.deriv.com/api-explorer#sell"
        },
        {
          "text": "Sell Contracts: Multiple Accounts",
          "href": "https://api.deriv.com/api-explorer#sell_contract_for_multiple_accounts"
        },
        {
          "text": "Sell Expired Contracts",
          "href": "https://api.deriv.com/api-explorer#sell_expired"
        },
        {
          "text": "Set Account Currency",
          "href": "https://api.deriv.com/api-explorer#set_account_currency"
        },
        {
          "text": "Trading Durations",
          "href": "https://api.deriv.com/api-explorer#trading_durations"
        },
        {
          "text": "Profit Table",
          "href": "https://api.deriv.com/api-explorer#profit_table"
        },
        {
          "text": "Portfolio",
          "href": "https://api.deriv.com/api-explorer#portfolio"
        }
      ]
    },
    "Utilities APIs": {
      "title": "Ensure seamless Operations with Utilities API | Deriv API",
      "url": "https://developers.deriv.com/docs/utilities-apis",
      "mainContent": "Utilities APIs provide essential information and utility functions for the platform‚Äôs operations. They offer functionalities for retrieving economic calendar events, managing real-time message streams, and accessing details about landing companies and server statuses.\n\nAdditionally, these APIs include utility features like server time, ping requests, and country/state lists for account management.\n\nThese APIs ensure smooth platform operations and deliver up-to-date trading and account management information.\n\n#\tAPI Name\tDescription\tSend\tSubscribe\tScope\n1\tEconomic Calendar\tRetrieve a list of economic events for a specific currency. If no currency is specified, the list includes all currencies.\t‚úî\t‚úò\tNA\n2\tForget\tImmediately cancels the real-time stream of messages with a specific ID.\t‚úî\t‚úò\tNA\n3\tForget All\tImmediately cancels all real-time streams of messages of a given type.\t‚úî\t‚úò\tNA\n4\tLanding Company\tRetrieve the appropriate landing company based on the client‚Äôs country. Different landing companies may be returned for derived contracts (e.g., Synthetic Indices) and financial contracts (e.g., Forex, Stock Indices, Commodities).\t‚úî\t‚úò\tNA\n5\tLanding Company Details\tProvides information about each landing company, which are licensed subsidiaries of the Deriv Group.\t‚úî\t‚úò\tNA\n6\tPing\tSends a ping request to the server, mainly used to test the connection or to keep it alive.\t‚úî\t‚úò\tNA\n7\tCountries List\tRetrieve a list of countries and their two-letter codes, suitable for populating the account opening form.\t‚úî\t‚úò\tNA\n8\tStates List\tRetrieve the list of servers available for the trading platform.\t‚úî\t‚úò\tNA\n9\tServer Time\tRequests the back-end server epoch time.\t‚úî\t‚úò\tNA\n10\tServer List\tRetrieves a list of servers for a trading platform.\t‚úî\t‚úò\tRead\n11\tTrading Times\tRetrieve market opening times for a specified date.\t‚úî\t‚úò\tNA\n12\tServer Status\tRequests the server status.\t‚úî\t‚úò\tNA\n\nUpdated 4 months ago\n\nDid this page help you?\nYes\nNo",
      "headings": [],
      "codeBlocks": [],
      "tables": [
        "<table><thead><tr><th># </th><th>API Name</th><th>Description</th><th>Send</th><th>Subscribe</th><th>Scope</th></tr></thead><tbody><tr><td>1</td><td><a target=\"_blank\" href=\"https://api.deriv.com/api-explorer#economic_calendar\" rel=\"noopener noreferrer\">Economic Calendar</a></td><td>Retrieve a list of economic events for a specific currency. If no currency is specified, the list includes all currencies.</td><td>‚úî</td><td>‚úò</td><td>NA</td></tr><tr><td>2</td><td><a target=\"_blank\" href=\"https://api.deriv.com/api-explorer#forget\" rel=\"noopener noreferrer\">Forget</a></td><td>Immediately cancels the real-time stream of messages with a specific ID.</td><td>‚úî</td><td>‚úò</td><td>NA</td></tr><tr><td>3</td><td><a target=\"_blank\" href=\"https://api.deriv.com/api-explorer#forget_all\" rel=\"noopener noreferrer\">Forget All</a></td><td>Immediately cancels all real-time streams of messages of a given type.</td><td>‚úî</td><td>‚úò</td><td>NA</td></tr><tr><td>4</td><td><a target=\"_blank\" href=\"https://api.deriv.com/api-explorer#landing_company\" rel=\"noopener noreferrer\">Landing Company</a></td><td>Retrieve the appropriate landing company based on the client‚Äôs country. Different landing companies may be returned for derived contracts (e.g., Synthetic Indices) and financial contracts (e.g., Forex, Stock Indices, Commodities).</td><td>‚úî</td><td>‚úò</td><td>NA</td></tr><tr><td>5</td><td><a target=\"_blank\" href=\"https://api.deriv.com/api-explorer#landing_company_details\" rel=\"noopener noreferrer\">Landing Company Details</a></td><td>Provides information about each landing company, which are licensed subsidiaries of the Deriv Group.</td><td>‚úî</td><td>‚úò</td><td>NA</td></tr><tr><td>6</td><td><a target=\"_blank\" href=\"https://api.deriv.com/api-explorer#ping\" rel=\"noopener noreferrer\">Ping</a></td><td>Sends a ping request to the server, mainly used to test the connection or to keep it alive.</td><td>‚úî</td><td>‚úò</td><td>NA</td></tr><tr><td>7</td><td><a target=\"_blank\" href=\"https://api.deriv.com/api-explorer#residence_list\" rel=\"noopener noreferrer\">Countries List</a></td><td>Retrieve a list of countries and their two-letter codes, suitable for populating the account opening form.</td><td>‚úî</td><td>‚úò</td><td>NA</td></tr><tr><td>8</td><td><a target=\"_blank\" href=\"https://api.deriv.com/api-explorer#states_list\" rel=\"noopener noreferrer\">States List</a></td><td>Retrieve the list of servers available for the trading platform.</td><td>‚úî</td><td>‚úò</td><td>NA</td></tr><tr><td>9</td><td><a target=\"_blank\" href=\"https://api.deriv.com/api-explorer#time\" rel=\"noopener noreferrer\">Server Time</a></td><td>Requests the back-end server epoch time.</td><td>‚úî</td><td>‚úò</td><td>NA</td></tr><tr><td>10</td><td><a target=\"_blank\" href=\"https://api.deriv.com/api-explorer#trading_servers\" rel=\"noopener noreferrer\">Server List</a></td><td>Retrieves a list of servers for a trading platform.</td><td>‚úî</td><td>‚úò</td><td>Read</td></tr><tr><td>11</td><td><a target=\"_blank\" href=\"https://api.deriv.com/api-explorer#trading_times\" rel=\"noopener noreferrer\">Trading Times</a></td><td>Retrieve market opening times for a specified date.</td><td>‚úî</td><td>‚úò</td><td>NA</td></tr><tr><td>12</td><td><a target=\"_blank\" href=\"https://api.deriv.com/api-explorer#website_status\" rel=\"noopener noreferrer\">Server Status</a></td><td>Requests the server status.</td><td>‚úî</td><td>‚úò</td><td>NA</td></tr></tbody></table>"
      ],
      "links": [
        {
          "text": "Economic Calendar",
          "href": "https://api.deriv.com/api-explorer#economic_calendar"
        },
        {
          "text": "Forget",
          "href": "https://api.deriv.com/api-explorer#forget"
        },
        {
          "text": "Forget All",
          "href": "https://api.deriv.com/api-explorer#forget_all"
        },
        {
          "text": "Landing Company",
          "href": "https://api.deriv.com/api-explorer#landing_company"
        },
        {
          "text": "Landing Company Details",
          "href": "https://api.deriv.com/api-explorer#landing_company_details"
        },
        {
          "text": "Ping",
          "href": "https://api.deriv.com/api-explorer#ping"
        },
        {
          "text": "Countries List",
          "href": "https://api.deriv.com/api-explorer#residence_list"
        },
        {
          "text": "States List",
          "href": "https://api.deriv.com/api-explorer#states_list"
        },
        {
          "text": "Server Time",
          "href": "https://api.deriv.com/api-explorer#time"
        },
        {
          "text": "Server List",
          "href": "https://api.deriv.com/api-explorer#trading_servers"
        },
        {
          "text": "Trading Times",
          "href": "https://api.deriv.com/api-explorer#trading_times"
        },
        {
          "text": "Server Status",
          "href": "https://api.deriv.com/api-explorer#website_status"
        }
      ]
    },
    "Payment Agent": {
      "title": "Payment Agent",
      "url": "https://developers.deriv.com/docs/payment-agent",
      "mainContent": "Payment Agent APIs are designed to manage and facilitate Payment Agent(PA) transactions. Payment agents allow users to deposit and withdraw funds using local payment methods that might not be available via the main website's cashier system.\n\nThese APIs are crucial for enabling and operating PA transactions on the Deriv platform, allowing users to engage in seamless and secure transactions.\n\n#\tAPI Name\tDescription\tSend\tSubscribe\tScope\n1\tPayment Agent: Withdraw justification\tProvide justification to perform withdrawal using a Payment Agent.\t‚úî\t‚úò\tPayments\n2\tPayment Agent Create\tSaves client's payment agent details.\t‚úî\t‚úò\tPayments\n3\tPayment Agent: List\tWill return a list of Payment Agents for a given country for a given currency.\t‚úî\t‚úò\tPayments\n4\tPayment Agent: Transfer\tThis call is available only to accounts that are approved Payment Agents.\t‚úî\t‚úò\tPayments\n5\tPayment Agent: Withdraw\tInitiate a withdrawal to an approved Payment Agent.\t‚úî\t‚úò\tPayments\n\nUpdated 4 months ago\n\nDid this page help you?\nYes\nNo",
      "headings": [],
      "codeBlocks": [],
      "tables": [
        "<table><thead><tr><th># </th><th>API Name</th><th>Description</th><th>Send</th><th>Subscribe</th><th>Scope</th></tr></thead><tbody><tr><td>1</td><td><a target=\"_blank\" href=\"https://api.deriv.com/api-explorer#paymentagent_withdraw_justification\" rel=\"noopener noreferrer\">Payment Agent: <strong>Withdraw justification</strong></a></td><td>Provide justification to perform withdrawal using a Payment Agent.</td><td>‚úî</td><td>‚úò</td><td>Payments</td></tr><tr><td>2</td><td><a target=\"_blank\" href=\"https://api.deriv.com/api-explorer#paymentagent_create\" rel=\"noopener noreferrer\">Payment Agent <strong>Create</strong></a></td><td>Saves client's payment agent details.</td><td>‚úî</td><td>‚úò</td><td>Payments</td></tr><tr><td>3</td><td><a target=\"_blank\" href=\"https://api.deriv.com/api-explorer#paymentagent_list\" rel=\"noopener noreferrer\">Payment Agent: <strong>List</strong></a></td><td>Will return a list of Payment Agents for a given country for a given currency.</td><td>‚úî</td><td>‚úò</td><td>Payments</td></tr><tr><td>4</td><td><a target=\"_blank\" href=\"https://api.deriv.com/api-explorer#paymentagent_transfer\" rel=\"noopener noreferrer\">Payment Agent: <strong>Transfer</strong></a></td><td>This call is available only to accounts that are approved Payment Agents.</td><td>‚úî</td><td>‚úò</td><td>Payments</td></tr><tr><td>5</td><td><a target=\"_blank\" href=\"https://api.deriv.com/api-explorer#paymentagent_withdraw\" rel=\"noopener noreferrer\">Payment Agent: <strong>Withdraw</strong></a></td><td>Initiate a withdrawal to an approved Payment Agent.</td><td>‚úî</td><td>‚úò</td><td>Payments</td></tr></tbody></table>"
      ],
      "links": [
        {
          "text": "Payment Agent: Withdraw justification",
          "href": "https://api.deriv.com/api-explorer#paymentagent_withdraw_justification"
        },
        {
          "text": "Payment Agent Create",
          "href": "https://api.deriv.com/api-explorer#paymentagent_create"
        },
        {
          "text": "Payment Agent: List",
          "href": "https://api.deriv.com/api-explorer#paymentagent_list"
        },
        {
          "text": "Payment Agent: Transfer",
          "href": "https://api.deriv.com/api-explorer#paymentagent_transfer"
        },
        {
          "text": "Payment Agent: Withdraw",
          "href": "https://api.deriv.com/api-explorer#paymentagent_withdraw"
        }
      ]
    },
    "WebSockets": {
      "title": "Leverage our websocket API for real-time communication | Deriv API",
      "url": "https://developers.deriv.com/docs/websockets",
      "mainContent": "General information\nBase endpoint\n\nTo connect to Deriv's WebSocket APIs, you'll need to use the following base endpoint:\n\nwss://ws.derivws.com/websockets/v3?app_id={app_id}\n\nMake sure to replace {app_id} with the unique ID of the application you registered.\n\nRate limits\n\nThe rate limits for API requests can change over time. To find out the current limit, you can make a server status call and check the api_call_limits field. This ensures you always have the most up-to-date information.\n\nSession validity\n\nYour WebSocket session will time out after 2 minutes of inactivity. If there are no requests or responses during this time, the server will close the connection. To prevent this, send requests periodically to keep the connection alive.\n\nFor example, you can send a ping request or another simple call like time at regular intervals.\n\nCreate WebSocket\n\nTo get started with WebSockets, you must first create a new WebSocket instance. Here‚Äôs how you can do it:\n\nCreate a WebSocket instance\n\nUse the WebSocket constructor to create a new instance:\n\nüöß\n\nWarning:\n\nMake sure to replace {app_id} with the unique ID of the application you have registered. You can find it in the Applications tab.\n\nJavaScript\nlet socket = new WebSocket('wss://ws.derivws.com/websockets/v3?app_id={app_id}');\n\nüìò\n\nImportant: Secure vs. Unsecured Connections\n\nwss:// establishes a secure WebSocket connection (encrypted and protected).\nws:// establishes an unsecured WebSocket connection (not encrypted).\n\nEvents\n\nWebSocket communication revolves around 4 key events. Understanding these key events will help you manage the connection effectively.\n\nOnOpen\n\nWhat it does: This event is triggered when the connection to the server is successfully established.\nWhat to know: Once this event fires, the WebSocket‚Äôs readyState property becomes 1 indicating the connection is open and ready for communication. The readyState can have several values. For more information, check out the MDN WebSocket readyState documentation.\n\nJavaScript\nsocket.onopen = function (e) {\n  console.log('[open] Connection established');\n  console.log('Sending to server');\n  const sendMessage = JSON.stringify({ ping: 1 });\n  socket.send(sendMessage);\n};\n\nOnMessage\n\nWhat it does: Fires whenever a message is received from the server.\nUsage: Use this event to capture and handle incoming data from the server.\n\nJavaScript\nsocket.onmessage = function (event) {\n  console.log(`[message] Data received from server: ${event.data}`);\n};\n\nOnClose\n\nWhat it does: Triggers when the WebSocket connection is closed by the client, server, or due to a connection failure.\nAdditional details: If you close the connection using the Close() method, you can provide a code and message to explain the reason. The server will typically send back the same code and message.\n\nJavaScript\nsocket.onclose = function (event) {\n  if (event.wasClean) {\n    console.log(`[close] Connection closed cleanly, code=${event.code} reason=${event.reason}`);\n  } else {\n    // e.g. server process killed or network down\n    // event.code is usually 1006 in this case\n    console.log('[close] Connection died');\n  }\n};\n\nOnError\n\nWhat It does: Triggers when an error occurs with the WebSocket connection.\nHandling errors: Use this event to detect and handle errors, ensuring your application can respond or retry as needed.\n\nJavaScript\nsocket.onerror = function (error) {\n  console.log(`[error] ${error.message}`);\n};\n\nMethods\n\nHere‚Äôs a quick rundown of the essential methods you'll use with WebSockets:\n\nOpen\n\nHow it works: Call Open() to start the connection process with the server.\nNon-blocking call: After OnOpen is triggered, you can begin sending messages. The call doesn‚Äôt block your script, and you can continue executing other code while waiting for the connection.\n\nSend\n\nPurpose: The Send method transmits data to the server. It supports several data formats, including strings and byte arrays (byte[]).\nHandling large messages: For messages larger than 32,767 bytes, the WebSocket automatically splits them into fragments, managing the transmission of each part sequentially.\n\nClose\n\nWhen to use: Once you‚Äôve finished all communication, call Close() to terminate the connection.\nGraceful shutdown: This ensures the connection closes properly, freeing up resources and signalling to the server that communication has ended. Once a WebSocket is closed, it cannot be reused; you‚Äôll need to create a new instance for future connections.\n\nüöß\n\nYou cannot reuse a closed WebSocket instance, you have to create and set up a new one.\n\nJavaScript\nPython\nJava\nPerl\nPHP\nRust\nSwift\nC\nC#\nGo\nconst app_id = 'app_id'; // Replace with your app_id.\nconst socket = new WebSocket(`wss://ws.derivws.com/websockets/v3?app_id=${app_id}`); // Create a new WebSocket connection using the app_id\n\n// Event handler for when the WebSocket connection is opened\nsocket.onopen = function (e) {\n  console.log('[open] Connection established'); // Log connection establishment\n  console.log('Sending to server');\n\n  const sendMessage = JSON.stringify({ ping: 1 }); // Create a ping message in JSON format\n  socket.send(sendMessage); // Send the ping message to the server\n};\n\n// Event handler for when a message is received from the server\nsocket.onmessage = function (event) {\n  console.log(`[message] Data received from server: ${event.data}`); // Log the message received from the server\n};\n\n// Event handler for when the WebSocket connection is closed\nsocket.onclose = function (event) {\n  if (event.wasClean) {\n    console.log(`[close] Connection closed cleanly, code=${event.code} reason=${event.reason}`); // Log clean close with code and reason\n  } else {\n    console.log('[close] Connection died'); // Log an abrupt close\n  }\n};\n\n// Event handler for when an error occurs with the WebSocket connection\nsocket.onerror = function (error) {\n  console.log(`[error] ${error.message}`); // Log the error that occurred\n};\n\n/*\nInstructions to run this code:\n\n1. Ensure Node.js is installed on your machine. You can download it from https://nodejs.org/.\n2. Install the `ws` WebSocket library by running:\n   npm install ws\n3. Save this code to a file, e.g., `websocket_client.js`.\n4. Open a terminal and navigate to the directory where you saved the file.\n5. Run the code using the following command:\n   node websocket_client.js\n\nEnsure that the `app_id` in the URL is replaced with your own if needed.\n*/\n\n\nBy understanding these events and methods, you can efficiently handle WebSocket connections in your application.\n\nWebSockets provide a robust solution for real-time communication, allowing you to maintain smooth, responsive and dynamic applications.\n\n‚ÑπÔ∏è\n\nReferences\n\nWebSocket APIs - MDN\n\nUpdated 4 months ago\n\nDid this page help you?\nYes\nNo",
      "headings": [
        {
          "level": "h1",
          "text": "General information"
        },
        {
          "level": "h2",
          "text": "Base endpoint"
        },
        {
          "level": "h2",
          "text": "Rate limits"
        },
        {
          "level": "h2",
          "text": "Session validity"
        },
        {
          "level": "h1",
          "text": "Create WebSocket"
        },
        {
          "level": "h2",
          "text": "Create a WebSocket instance"
        },
        {
          "level": "h2",
          "text": "üößWarning:"
        },
        {
          "level": "h2",
          "text": "üìòImportant: Secure vs. Unsecured Connections"
        },
        {
          "level": "h3",
          "text": "Events"
        },
        {
          "level": "h4",
          "text": "OnOpen"
        },
        {
          "level": "h4",
          "text": "OnMessage"
        },
        {
          "level": "h4",
          "text": "OnClose"
        },
        {
          "level": "h4",
          "text": "OnError"
        },
        {
          "level": "h3",
          "text": "Methods"
        },
        {
          "level": "h4",
          "text": "Open"
        },
        {
          "level": "h4",
          "text": "Send"
        },
        {
          "level": "h4",
          "text": "Close"
        },
        {
          "level": "h2",
          "text": "üößYou cannot reuse a closed WebSocket instance, you have to create and set up a new one."
        },
        {
          "level": "h2",
          "text": "‚ÑπÔ∏èReferences"
        }
      ],
      "codeBlocks": [
        {
          "language": "text",
          "content": "wss://ws.derivws.com/websockets/v3?app_id={app_id}"
        },
        {
          "language": "text",
          "content": "{app_id}"
        },
        {
          "language": "text",
          "content": "api_call_limits"
        },
        {
          "language": "text",
          "content": "{app_id}"
        },
        {
          "language": "text",
          "content": "let socket = new WebSocket('wss://ws.derivws.com/websockets/v3?app_id={app_id}');"
        },
        {
          "language": "text",
          "content": "let socket = new WebSocket('wss://ws.derivws.com/websockets/v3?app_id={app_id}');"
        },
        {
          "language": "text",
          "content": "readyState"
        },
        {
          "language": "text",
          "content": "1"
        },
        {
          "language": "text",
          "content": "readyState"
        },
        {
          "language": "text",
          "content": "socket.onopen = function (e) {\n  console.log('[open] Connection established');\n  console.log('Sending to server');\n  const sendMessage = JSON.stringify({ ping: 1 });\n  socket.send(sendMessage);\n};"
        },
        {
          "language": "text",
          "content": "socket.onopen = function (e) {\n  console.log('[open] Connection established');\n  console.log('Sending to server');\n  const sendMessage = JSON.stringify({ ping: 1 });\n  socket.send(sendMessage);\n};"
        },
        {
          "language": "text",
          "content": "socket.onmessage = function (event) {\n  console.log(`[message] Data received from server: ${event.data}`);\n};"
        },
        {
          "language": "text",
          "content": "socket.onmessage = function (event) {\n  console.log(`[message] Data received from server: ${event.data}`);\n};"
        },
        {
          "language": "text",
          "content": "Close()"
        },
        {
          "language": "text",
          "content": "socket.onclose = function (event) {\n  if (event.wasClean) {\n    console.log(`[close] Connection closed cleanly, code=${event.code} reason=${event.reason}`);\n  } else {\n    // e.g. server process killed or network down\n    // event.code is usually 1006 in this case\n    console.log('[close] Connection died');\n  }\n};"
        },
        {
          "language": "text",
          "content": "socket.onclose = function (event) {\n  if (event.wasClean) {\n    console.log(`[close] Connection closed cleanly, code=${event.code} reason=${event.reason}`);\n  } else {\n    // e.g. server process killed or network down\n    // event.code is usually 1006 in this case\n    console.log('[close] Connection died');\n  }\n};"
        },
        {
          "language": "text",
          "content": "socket.onerror = function (error) {\n  console.log(`[error] ${error.message}`);\n};"
        },
        {
          "language": "text",
          "content": "socket.onerror = function (error) {\n  console.log(`[error] ${error.message}`);\n};"
        },
        {
          "language": "text",
          "content": "Open()"
        },
        {
          "language": "text",
          "content": "OnOpen"
        },
        {
          "language": "text",
          "content": "Send"
        },
        {
          "language": "text",
          "content": "byte[]"
        },
        {
          "language": "text",
          "content": "Close()"
        },
        {
          "language": "text",
          "content": "const app_id = 'app_id'; // Replace with your app_id.\nconst socket = new WebSocket(`wss://ws.derivws.com/websockets/v3?app_id=${app_id}`); // Create a new WebSocket connection using the app_id\n\n// Event handler for when the WebSocket connection is opened\nsocket.onopen = function (e) {\n  console.log('[open] Connection established'); // Log connection establishment\n  console.log('Sending to server');\n\n  const sendMessage = JSON.stringify({ ping: 1 }); // Create a ping message in JSON format\n  socket.send(sendMessage); // Send the ping message to the server\n};\n\n// Event handler for when a message is received from the server\nsocket.onmessage = function (event) {\n  console.log(`[message] Data received from server: ${event.data}`); // Log the message received from the server\n};\n\n// Event handler for when the WebSocket connection is closed\nsocket.onclose = function (event) {\n  if (event.wasClean) {\n    console.log(`[close] Connection closed cleanly, code=${event.code} reason=${event.reason}`); // Log clean close with code and reason\n  } else {\n    console.log('[close] Connection died'); // Log an abrupt close\n  }\n};\n\n// Event handler for when an error occurs with the WebSocket connection\nsocket.onerror = function (error) {\n  console.log(`[error] ${error.message}`); // Log the error that occurred\n};\n\n/*\nInstructions to run this code:\n\n1. Ensure Node.js is installed on your machine. You can download it from https://nodejs.org/.\n2. Install the `ws` WebSocket library by running:\n   npm install ws\n3. Save this code to a file, e.g., `websocket_client.js`.\n4. Open a terminal and navigate to the directory where you saved the file.\n5. Run the code using the following command:\n   node websocket_client.js\n\nEnsure that the `app_id` in the URL is replaced with your own if needed.\n*/"
        },
        {
          "language": "text",
          "content": "const app_id = 'app_id'; // Replace with your app_id.\nconst socket = new WebSocket(`wss://ws.derivws.com/websockets/v3?app_id=${app_id}`); // Create a new WebSocket connection using the app_id\n\n// Event handler for when the WebSocket connection is opened\nsocket.onopen = function (e) {\n  console.log('[open] Connection established'); // Log connection establishment\n  console.log('Sending to server');\n\n  const sendMessage = JSON.stringify({ ping: 1 }); // Create a ping message in JSON format\n  socket.send(sendMessage); // Send the ping message to the server\n};\n\n// Event handler for when a message is received from the server\nsocket.onmessage = function (event) {\n  console.log(`[message] Data received from server: ${event.data}`); // Log the message received from the server\n};\n\n// Event handler for when the WebSocket connection is closed\nsocket.onclose = function (event) {\n  if (event.wasClean) {\n    console.log(`[close] Connection closed cleanly, code=${event.code} reason=${event.reason}`); // Log clean close with code and reason\n  } else {\n    console.log('[close] Connection died'); // Log an abrupt close\n  }\n};\n\n// Event handler for when an error occurs with the WebSocket connection\nsocket.onerror = function (error) {\n  console.log(`[error] ${error.message}`); // Log the error that occurred\n};\n\n/*\nInstructions to run this code:\n\n1. Ensure Node.js is installed on your machine. You can download it from https://nodejs.org/.\n2. Install the `ws` WebSocket library by running:\n   npm install ws\n3. Save this code to a file, e.g., `websocket_client.js`.\n4. Open a terminal and navigate to the directory where you saved the file.\n5. Run the code using the following command:\n   node websocket_client.js\n\nEnsure that the `app_id` in the URL is replaced with your own if needed.\n*/"
        },
        {
          "language": "text",
          "content": "import asyncio\nimport websockets\nimport json\n\nasync def connect_to_websocket():\n    app_id = app_id  # Replace with your app_id\n    uri = f\"wss://ws.derivws.com/websockets/v3?app_id={app_id}\"  # WebSocket URI with the app_id\n\n    try:\n        # Establish a connection to the WebSocket server\n        async with websockets.connect(uri) as websocket:\n            print(\"[open] Connection established\")  # Connection opened\n            print(\"Sending to server\")\n\n            # Prepare the message to send (ping message in JSON format)\n            send_message = json.dumps({\"ping\": 1})\n            await websocket.send(send_message)  # Send the ping message to the server\n\n            # Wait for a response from the server\n            response = await websocket.recv()\n            print(f\"[message] Data received from server: {response}\")  # Log the server's response\n\n    except websockets.ConnectionClosedError as e:\n        # Handle the scenario where the connection is closed\n        if e.code == 1000:\n            print(f\"[close] Connection closed cleanly, code={e.code} reason={e.reason}\")  # Clean close\n        else:\n            print(\"[close] Connection died\")  # Abrupt close, likely due to network or server issues\n\n    except Exception as e:\n        # Handle any other exceptions that may occur\n        print(f\"[error] {str(e)}\")  # Log any errors that occur\n\n# Run the WebSocket client\n# asyncio.get_event_loop().run_until_complete() starts the coroutine connect_to_websocket()\nasyncio.get_event_loop().run_until_complete(connect_to_websocket())\n\n'''\nInstructions to run this code:\n\n1. Ensure Python 3 is installed on your machine. You can download it from https://www.python.org/.\n2. Install the `websockets` library by running:\n   pip install websockets\n3. Save this code to a file, e.g., `websocket_client.py`.\n4. Open a terminal and navigate to the directory where you saved the file.\n5. Run the code using the following command:\n   python websocket_client.py\n\nReplace `app_id` with your own application ID if needed.\n'''"
        },
        {
          "language": "text",
          "content": "import asyncio\nimport websockets\nimport json\n\nasync def connect_to_websocket():\n    app_id = app_id  # Replace with your app_id\n    uri = f\"wss://ws.derivws.com/websockets/v3?app_id={app_id}\"  # WebSocket URI with the app_id\n\n    try:\n        # Establish a connection to the WebSocket server\n        async with websockets.connect(uri) as websocket:\n            print(\"[open] Connection established\")  # Connection opened\n            print(\"Sending to server\")\n\n            # Prepare the message to send (ping message in JSON format)\n            send_message = json.dumps({\"ping\": 1})\n            await websocket.send(send_message)  # Send the ping message to the server\n\n            # Wait for a response from the server\n            response = await websocket.recv()\n            print(f\"[message] Data received from server: {response}\")  # Log the server's response\n\n    except websockets.ConnectionClosedError as e:\n        # Handle the scenario where the connection is closed\n        if e.code == 1000:\n            print(f\"[close] Connection closed cleanly, code={e.code} reason={e.reason}\")  # Clean close\n        else:\n            print(\"[close] Connection died\")  # Abrupt close, likely due to network or server issues\n\n    except Exception as e:\n        # Handle any other exceptions that may occur\n        print(f\"[error] {str(e)}\")  # Log any errors that occur\n\n# Run the WebSocket client\n# asyncio.get_event_loop().run_until_complete() starts the coroutine connect_to_websocket()\nasyncio.get_event_loop().run_until_complete(connect_to_websocket())\n\n'''\nInstructions to run this code:\n\n1. Ensure Python 3 is installed on your machine. You can download it from https://www.python.org/.\n2. Install the `websockets` library by running:\n   pip install websockets\n3. Save this code to a file, e.g., `websocket_client.py`.\n4. Open a terminal and navigate to the directory where you saved the file.\n5. Run the code using the following command:\n   python websocket_client.py\n\nReplace `app_id` with your own application ID if needed.\n'''"
        },
        {
          "language": "text",
          "content": "import org.java_websocket.client.WebSocketClient;\nimport org.java_websocket.handshake.ServerHandshake;\nimport java.net.URI;\nimport java.net.URISyntaxException;\nimport java.nio.ByteBuffer;\n\npublic class WebSocketExample {\n\n    public static void main(String[] args) {\n        try {\n            // Replace with your app_id.\n            int app_id = app_id;\n            String serverUri = \"wss://ws.derivws.com/websockets/v3?app_id=\" + app_id;\n\n            // Initialize the WebSocket client\n            WebSocketClient client = new WebSocketClient(new URI(serverUri)) {\n                @Override\n                public void onOpen(ServerHandshake handshakedata) {\n                    System.out.println(\"[open] Connection established\");\n                    System.out.println(\"Sending to server\");\n\n                    // Create a ping message in JSON format\n                    String sendMessage = \"{\\\"ping\\\": 1}\";\n                    this.send(sendMessage); // Send the ping message to the server\n                }\n\n                @Override\n                public void onMessage(String message) {\n                    System.out.println(\"[message] Data received from server: \" + message); // Log the received message\n                }\n\n                @Override\n                public void onClose(int code, String reason, boolean remote) {\n                    if (remote) {\n                        System.out.println(\"[close] Connection closed by server, code=\" + code + \" reason=\" + reason); // Remote close\n                    } else {\n                        System.out.println(\"[close] Connection closed by client, code=\" + code + \" reason=\" + reason); // Client close\n                    }\n                }\n\n                @Override\n                public void onError(Exception ex) {\n                    System.out.println(\"[error] \" + ex.getMessage()); // Log any errors\n                }\n                \n                @Override\n                public void onMessage(ByteBuffer bytes) {\n                    System.out.println(\"[message] ByteBuffer received from server\"); // Handle binary message if necessary\n                }\n            };\n\n            client.connect(); // Connect to the WebSocket server\n\n        } catch (URISyntaxException e) {\n            System.out.println(\"[error] Invalid URI: \" + e.getMessage());\n        }\n    }\n}\n\n/*\nInstructions to run this code:\n\n1. Add the Java-WebSocket library to your project. You can do this by:\n   - Using Maven: Add the following dependency to your `pom.xml`:\n     <dependency>\n         <groupId>org.java-websocket</groupId>\n         <artifactId>Java-WebSocket</artifactId>\n         <version>1.5.2</version>\n     </dependency>\n   - Using Gradle: Add the following to your `build.gradle`:\n     implementation 'org.java-websocket:Java-WebSocket:1.5.2'\n\n2. Save this code to a file, e.g., `WebSocketExample.java`.\n\n3. Compile the program:\n   javac WebSocketExample.java\n\n4. Run the program:\n   java WebSocketExample\n\nMake sure to replace `app_id` with your actual application ID if needed.\n*/"
        },
        {
          "language": "text",
          "content": "import org.java_websocket.client.WebSocketClient;\nimport org.java_websocket.handshake.ServerHandshake;\nimport java.net.URI;\nimport java.net.URISyntaxException;\nimport java.nio.ByteBuffer;\n\npublic class WebSocketExample {\n\n    public static void main(String[] args) {\n        try {\n            // Replace with your app_id.\n            int app_id = app_id;\n            String serverUri = \"wss://ws.derivws.com/websockets/v3?app_id=\" + app_id;\n\n            // Initialize the WebSocket client\n            WebSocketClient client = new WebSocketClient(new URI(serverUri)) {\n                @Override\n                public void onOpen(ServerHandshake handshakedata) {\n                    System.out.println(\"[open] Connection established\");\n                    System.out.println(\"Sending to server\");\n\n                    // Create a ping message in JSON format\n                    String sendMessage = \"{\\\"ping\\\": 1}\";\n                    this.send(sendMessage); // Send the ping message to the server\n                }\n\n                @Override\n                public void onMessage(String message) {\n                    System.out.println(\"[message] Data received from server: \" + message); // Log the received message\n                }\n\n                @Override\n                public void onClose(int code, String reason, boolean remote) {\n                    if (remote) {\n                        System.out.println(\"[close] Connection closed by server, code=\" + code + \" reason=\" + reason); // Remote close\n                    } else {\n                        System.out.println(\"[close] Connection closed by client, code=\" + code + \" reason=\" + reason); // Client close\n                    }\n                }\n\n                @Override\n                public void onError(Exception ex) {\n                    System.out.println(\"[error] \" + ex.getMessage()); // Log any errors\n                }\n                \n                @Override\n                public void onMessage(ByteBuffer bytes) {\n                    System.out.println(\"[message] ByteBuffer received from server\"); // Handle binary message if necessary\n                }\n            };\n\n            client.connect(); // Connect to the WebSocket server\n\n        } catch (URISyntaxException e) {\n            System.out.println(\"[error] Invalid URI: \" + e.getMessage());\n        }\n    }\n}\n\n/*\nInstructions to run this code:\n\n1. Add the Java-WebSocket library to your project. You can do this by:\n   - Using Maven: Add the following dependency to your `pom.xml`:\n     <dependency>\n         <groupId>org.java-websocket</groupId>\n         <artifactId>Java-WebSocket</artifactId>\n         <version>1.5.2</version>\n     </dependency>\n   - Using Gradle: Add the following to your `build.gradle`:\n     implementation 'org.java-websocket:Java-WebSocket:1.5.2'\n\n2. Save this code to a file, e.g., `WebSocketExample.java`.\n\n3. Compile the program:\n   javac WebSocketExample.java\n\n4. Run the program:\n   java WebSocketExample\n\nMake sure to replace `app_id` with your actual application ID if needed.\n*/"
        },
        {
          "language": "text",
          "content": "#!/usr/bin/env perl\nuse strict;\nuse warnings;\nuse AnyEvent;\nuse AnyEvent::WebSocket::Client 0.12;\nuse JSON;\nuse feature 'say';\n\n# WebSocket URL and app_id\nmy $app_id = app_id; //Replace with your app_id\nmy $url = \"wss://ws.derivws.com/websockets/v3?app_id=$app_id\";\n\n# Create WebSocket client and connection\nmy $client = AnyEvent::WebSocket::Client->new;\n$| = 1;  # Flush output immediately for real-time logging\n\n\n\n# Establish WebSocket connection\n$client->connect($url)->cb(sub {\n    my $connection = eval { shift->recv };\n    if (!$connection) {\n        # handle error...\n        warn $@;\n        return;\n\n    }\n    say \"WebSocket connection established.\";\n\n\n    $connection->send('{ ping => 1 }');\n    say \"Ping sent to keep connection alive.\";\n    # $connection->send(encode_json({ ping => 1 }));\n    # say \"Ping sent to keep connection alive.\";\n    # $connection->send(encode_json({ ping => 1 }));\n    # say \"Ping sent to keep connection alive.\";\n\n\n    # Handle incoming messages\n    $connection->on(each_message => sub {\n        my($connection, $message) = @_;\n\n        say \"message received\";\n    });\n\n    # Handle connection close\n    $connection->on(finish => sub {\n        say \"WebSocket connection closed.\";\n    });\n});\n\n# Start the AnyEvent event loop\nAnyEvent->condvar->recv;\n\n# Instructions to run the code on a local machine:\n# 1. Ensure you have Perl installed on your machine.\n# 2. Install the necessary Perl modules using the following commands:\n#      cpanm AnyEvent AnyEvent::WebSocket::Client JSON\n#    If `cpanm` is not installed, install it using `cpan App::cpanminus`.\n# 3. Save this script to a file, e.g., `connect.pl`.\n# 4. Run the script using the command:\n#      perl connect.pl\n# This script will connect to the Deriv WebSocket API, subscribe to a proposal, and send a ping every 30 seconds to keep the connection alive."
        },
        {
          "language": "text",
          "content": "#!/usr/bin/env perl\nuse strict;\nuse warnings;\nuse AnyEvent;\nuse AnyEvent::WebSocket::Client 0.12;\nuse JSON;\nuse feature 'say';\n\n# WebSocket URL and app_id\nmy $app_id = app_id; //Replace with your app_id\nmy $url = \"wss://ws.derivws.com/websockets/v3?app_id=$app_id\";\n\n# Create WebSocket client and connection\nmy $client = AnyEvent::WebSocket::Client->new;\n$| = 1;  # Flush output immediately for real-time logging\n\n\n\n# Establish WebSocket connection\n$client->connect($url)->cb(sub {\n    my $connection = eval { shift->recv };\n    if (!$connection) {\n        # handle error...\n        warn $@;\n        return;\n\n    }\n    say \"WebSocket connection established.\";\n\n\n    $connection->send('{ ping => 1 }');\n    say \"Ping sent to keep connection alive.\";\n    # $connection->send(encode_json({ ping => 1 }));\n    # say \"Ping sent to keep connection alive.\";\n    # $connection->send(encode_json({ ping => 1 }));\n    # say \"Ping sent to keep connection alive.\";\n\n\n    # Handle incoming messages\n    $connection->on(each_message => sub {\n        my($connection, $message) = @_;\n\n        say \"message received\";\n    });\n\n    # Handle connection close\n    $connection->on(finish => sub {\n        say \"WebSocket connection closed.\";\n    });\n});\n\n# Start the AnyEvent event loop\nAnyEvent->condvar->recv;\n\n# Instructions to run the code on a local machine:\n# 1. Ensure you have Perl installed on your machine.\n# 2. Install the necessary Perl modules using the following commands:\n#      cpanm AnyEvent AnyEvent::WebSocket::Client JSON\n#    If `cpanm` is not installed, install it using `cpan App::cpanminus`.\n# 3. Save this script to a file, e.g., `connect.pl`.\n# 4. Run the script using the command:\n#      perl connect.pl\n# This script will connect to the Deriv WebSocket API, subscribe to a proposal, and send a ping every 30 seconds to keep the connection alive."
        },
        {
          "language": "text",
          "content": "<?php\n\n// Include Composer's autoload file\nrequire 'vendor/autoload.php';\n\nuse WebSocket\\Client;\n\n// Replace with your specific app ID\n$app_id = app_id;\n$uri = \"wss://ws.derivws.com/websockets/v3?app_id=$app_id\";\n\n// Create a new WebSocket client\n$client = new Client($uri);\n\ntry {\n    echo \"[open] Connection established\\n\";\n    echo \"Sending to server\\n\";\n\n    // Send a ping message\n    $client->send(json_encode([\"ping\" => 1]));\n    echo \"[debug] Message sent: {\\\"ping\\\":1}\\n\";\n\n    // Receive a response from the server\n    $response = $client->receive();\n    echo \"[message] Received from WebSocket: '$response'\\n\";\n\n    // Close the connection\n    $client->close();\n    echo \"[close] Connection closed\\n\";\n\n} catch (\\WebSocket\\ConnectionException $e) {\n    echo \"[error] Connection error: \" . $e->getMessage() . \"\\n\";\n} catch (Exception $e) {\n    echo \"[error] General error: \" . $e->getMessage() . \"\\n\";\n}\n\n/*\nInstructions to run this code:\n\n1. Ensure PHP is installed on your machine. You can check by running `php -v` in your terminal.\n2. Install Composer, the dependency manager for PHP, from https://getcomposer.org/.\n3. Initialize a Composer project in the directory where this file is saved:\ncomposer init\n4. Install the `textalk/websocket` package by adding it to your `composer.json` file or by running:\ncomposer require textalk/websocket\n5. Save the PHP code above to a file, e.g., `websocket_client.php`.\n6. Run the code in the terminal:\nphp websocket_client.php\nNote: Replace the `app_id` in the URL with your own application ID if needed.\n*/"
        },
        {
          "language": "text",
          "content": "<?php\n\n// Include Composer's autoload file\nrequire 'vendor/autoload.php';\n\nuse WebSocket\\Client;\n\n// Replace with your specific app ID\n$app_id = app_id;\n$uri = \"wss://ws.derivws.com/websockets/v3?app_id=$app_id\";\n\n// Create a new WebSocket client\n$client = new Client($uri);\n\ntry {\n    echo \"[open] Connection established\\n\";\n    echo \"Sending to server\\n\";\n\n    // Send a ping message\n    $client->send(json_encode([\"ping\" => 1]));\n    echo \"[debug] Message sent: {\\\"ping\\\":1}\\n\";\n\n    // Receive a response from the server\n    $response = $client->receive();\n    echo \"[message] Received from WebSocket: '$response'\\n\";\n\n    // Close the connection\n    $client->close();\n    echo \"[close] Connection closed\\n\";\n\n} catch (\\WebSocket\\ConnectionException $e) {\n    echo \"[error] Connection error: \" . $e->getMessage() . \"\\n\";\n} catch (Exception $e) {\n    echo \"[error] General error: \" . $e->getMessage() . \"\\n\";\n}\n\n/*\nInstructions to run this code:\n\n1. Ensure PHP is installed on your machine. You can check by running `php -v` in your terminal.\n2. Install Composer, the dependency manager for PHP, from https://getcomposer.org/.\n3. Initialize a Composer project in the directory where this file is saved:\ncomposer init\n4. Install the `textalk/websocket` package by adding it to your `composer.json` file or by running:\ncomposer require textalk/websocket\n5. Save the PHP code above to a file, e.g., `websocket_client.php`.\n6. Run the code in the terminal:\nphp websocket_client.php\nNote: Replace the `app_id` in the URL with your own application ID if needed.\n*/"
        },
        {
          "language": "text",
          "content": "use tokio_tungstenite::connect_async;\nuse tokio_tungstenite::tungstenite::protocol::Message;\nuse futures_util::{SinkExt, StreamExt};\nuse tokio;\nuse url::Url;\n\n#[tokio::main]\nasync fn main() {\n    let app_id = app_id;//Replace with your app_id\n    let url = format!(\"wss://ws.derivws.com/websockets/v3?app_id={}\", app_id);\n    let url = Url::parse(&url).expect(\"Invalid URL\");\n\n    // Connect to the WebSocket server\n    let (mut socket, _response) = connect_async(url).await.expect(\"Failed to connect\");\n\n    println!(\"[open] Connection established\");\n\n    // Prepare the ping message\n    let send_message = r#\"{\"ping\": 1}\"#;\n    socket.send(Message::Text(send_message.into())).await.expect(\"Failed to send message\");\n\n    println!(\"Message sent to server\");\n\n    // Receive a message from the server\n    if let Some(Ok(msg)) = socket.next().await {\n        println!(\"[message] Data received from server: {:?}\", msg);\n    }\n\n    // Close the connection\n    socket.close(None).await.expect(\"Failed to close connection\");\n    println!(\"[close] Connection closed cleanly\");\n}\n\n/*\nInstructions to run this code:\n\n1. Ensure that Rust and Cargo (Rust's package manager) are installed. You can install them from https://rustup.rs/.\n2. Initialize a new Rust project if you haven‚Äôt already:\ncargo new websocket_client\ncd websocket_client\n3. Add the following dependencies to your `Cargo.toml` file under `[dependencies]`:\ntokio = { version = ‚Äú1‚Äù, features = [‚Äúfull‚Äù] }\ntokio-tungstenite = ‚Äú0.15‚Äù\nfutures-util = ‚Äú0.3‚Äù\nurl = ‚Äú2.2‚Äù\n4. Replace the contents of `src/main.rs` with the code above.\n5. Compile and run the code using:\ncargo run\nNote: Replace `app_id` in the URL with your own application ID if needed.\n*/"
        },
        {
          "language": "text",
          "content": "use tokio_tungstenite::connect_async;\nuse tokio_tungstenite::tungstenite::protocol::Message;\nuse futures_util::{SinkExt, StreamExt};\nuse tokio;\nuse url::Url;\n\n#[tokio::main]\nasync fn main() {\n    let app_id = app_id;//Replace with your app_id\n    let url = format!(\"wss://ws.derivws.com/websockets/v3?app_id={}\", app_id);\n    let url = Url::parse(&url).expect(\"Invalid URL\");\n\n    // Connect to the WebSocket server\n    let (mut socket, _response) = connect_async(url).await.expect(\"Failed to connect\");\n\n    println!(\"[open] Connection established\");\n\n    // Prepare the ping message\n    let send_message = r#\"{\"ping\": 1}\"#;\n    socket.send(Message::Text(send_message.into())).await.expect(\"Failed to send message\");\n\n    println!(\"Message sent to server\");\n\n    // Receive a message from the server\n    if let Some(Ok(msg)) = socket.next().await {\n        println!(\"[message] Data received from server: {:?}\", msg);\n    }\n\n    // Close the connection\n    socket.close(None).await.expect(\"Failed to close connection\");\n    println!(\"[close] Connection closed cleanly\");\n}\n\n/*\nInstructions to run this code:\n\n1. Ensure that Rust and Cargo (Rust's package manager) are installed. You can install them from https://rustup.rs/.\n2. Initialize a new Rust project if you haven‚Äôt already:\ncargo new websocket_client\ncd websocket_client\n3. Add the following dependencies to your `Cargo.toml` file under `[dependencies]`:\ntokio = { version = ‚Äú1‚Äù, features = [‚Äúfull‚Äù] }\ntokio-tungstenite = ‚Äú0.15‚Äù\nfutures-util = ‚Äú0.3‚Äù\nurl = ‚Äú2.2‚Äù\n4. Replace the contents of `src/main.rs` with the code above.\n5. Compile and run the code using:\ncargo run\nNote: Replace `app_id` in the URL with your own application ID if needed.\n*/"
        },
        {
          "language": "text",
          "content": "import Foundation\n\n// Make webSocketTask a global variable to keep the connection open\nvar webSocketTask: URLSessionWebSocketTask?\n\n// Function to create and handle WebSocket connection\nfunc connectWebSocket() {\n    let appID = app_id // Replace with your app_id.\n    let url = URL(string: \"wss://ws.derivws.com/websockets/v3?app_id=\\(appID)\")! // WebSocket URL with the app_id\n    let request = URLRequest(url: url)\n    \n    // Initialize webSocketTask with URLSession\n    webSocketTask = URLSession.shared.webSocketTask(with: request)\n    \n    // Start the WebSocket connection\n    webSocketTask?.resume()\n    print(\"[open] Connection established\")\n    \n    // Function to send a ping message to the server\n    func sendPingMessage() {\n        let message = URLSessionWebSocketTask.Message.string(\"{\\\"ping\\\": 1}\") // Prepare the ping message in JSON format\n        webSocketTask?.send(message) { error in\n            if let error = error {\n                print(\"[error] Failed to send message: \\(error.localizedDescription)\")\n            } else {\n                print(\"Sending to server\")\n            }\n        }\n    }\n    \n    // Send the ping message initially\n    sendPingMessage()\n\n    // Function to receive messages from the server\n    func receiveMessage() {\n        webSocketTask?.receive { result in\n            switch result {\n            case .success(let message):\n                switch message {\n                case .string(let text):\n                    print(\"[message] Data received from server: \\(text)\")\n                case .data(let data):\n                    print(\"[message] Data received from server: \\(data)\")\n                @unknown default:\n                    print(\"[message] Received unknown message type\")\n                }\n\n                // Continue to receive messages\n                receiveMessage()\n\n            case .failure(let error):\n                print(\"[error] Failed to receive message: \\(error.localizedDescription)\")\n            }\n        }\n    }\n\n    // Start receiving messages\n    receiveMessage()\n}\n\n// Function to close the WebSocket connection\nfunc closeWebSocketConnection() {\n    // Use this function when you need to close the connection\n    webSocketTask?.cancel(with: .normalClosure, reason: nil)\n    print(\"[close] Connection closed cleanly\")\n}\n\n// Call the function to connect to the WebSocket\nconnectWebSocket()\n\n// Example usage: Call closeWebSocketConnection() to close the connection when needed\n// The following line will close the connection after 10 seconds for demonstration purposes\nDispatchQueue.main.asyncAfter(deadline: .now() + 10) { closeWebSocketConnection() }\n\n// Keep the program running to wait for messages\nRunLoop.main.run()\n\n/*\nInstructions to run this code:\n\n1. Ensure that Xcode is installed on your macOS system, or if you're using another platform, ensure Swift is set up correctly.\n2. Create a new Swift file in Xcode or any text editor, and paste the above code into it.\n3. In Xcode:\n   - Go to `File` -> `New` -> `Project`, and select a macOS Command Line Tool.\n   - In the project, create a new Swift file and paste this code.\n4. Run the project in Xcode to execute the WebSocket client.\n5. Alternatively, save the code to a file named `websocket_client.swift` and run it from the terminal using:\nswift websocket_client.swift\nNote: Replace `app_id` in the WebSocket URL with your own application ID if needed.\n*/"
        },
        {
          "language": "text",
          "content": "import Foundation\n\n// Make webSocketTask a global variable to keep the connection open\nvar webSocketTask: URLSessionWebSocketTask?\n\n// Function to create and handle WebSocket connection\nfunc connectWebSocket() {\n    let appID = app_id // Replace with your app_id.\n    let url = URL(string: \"wss://ws.derivws.com/websockets/v3?app_id=\\(appID)\")! // WebSocket URL with the app_id\n    let request = URLRequest(url: url)\n    \n    // Initialize webSocketTask with URLSession\n    webSocketTask = URLSession.shared.webSocketTask(with: request)\n    \n    // Start the WebSocket connection\n    webSocketTask?.resume()\n    print(\"[open] Connection established\")\n    \n    // Function to send a ping message to the server\n    func sendPingMessage() {\n        let message = URLSessionWebSocketTask.Message.string(\"{\\\"ping\\\": 1}\") // Prepare the ping message in JSON format\n        webSocketTask?.send(message) { error in\n            if let error = error {\n                print(\"[error] Failed to send message: \\(error.localizedDescription)\")\n            } else {\n                print(\"Sending to server\")\n            }\n        }\n    }\n    \n    // Send the ping message initially\n    sendPingMessage()\n\n    // Function to receive messages from the server\n    func receiveMessage() {\n        webSocketTask?.receive { result in\n            switch result {\n            case .success(let message):\n                switch message {\n                case .string(let text):\n                    print(\"[message] Data received from server: \\(text)\")\n                case .data(let data):\n                    print(\"[message] Data received from server: \\(data)\")\n                @unknown default:\n                    print(\"[message] Received unknown message type\")\n                }\n\n                // Continue to receive messages\n                receiveMessage()\n\n            case .failure(let error):\n                print(\"[error] Failed to receive message: \\(error.localizedDescription)\")\n            }\n        }\n    }\n\n    // Start receiving messages\n    receiveMessage()\n}\n\n// Function to close the WebSocket connection\nfunc closeWebSocketConnection() {\n    // Use this function when you need to close the connection\n    webSocketTask?.cancel(with: .normalClosure, reason: nil)\n    print(\"[close] Connection closed cleanly\")\n}\n\n// Call the function to connect to the WebSocket\nconnectWebSocket()\n\n// Example usage: Call closeWebSocketConnection() to close the connection when needed\n// The following line will close the connection after 10 seconds for demonstration purposes\nDispatchQueue.main.asyncAfter(deadline: .now() + 10) { closeWebSocketConnection() }\n\n// Keep the program running to wait for messages\nRunLoop.main.run()\n\n/*\nInstructions to run this code:\n\n1. Ensure that Xcode is installed on your macOS system, or if you're using another platform, ensure Swift is set up correctly.\n2. Create a new Swift file in Xcode or any text editor, and paste the above code into it.\n3. In Xcode:\n   - Go to `File` -> `New` -> `Project`, and select a macOS Command Line Tool.\n   - In the project, create a new Swift file and paste this code.\n4. Run the project in Xcode to execute the WebSocket client.\n5. Alternatively, save the code to a file named `websocket_client.swift` and run it from the terminal using:\nswift websocket_client.swift\nNote: Replace `app_id` in the WebSocket URL with your own application ID if needed.\n*/"
        },
        {
          "language": "text",
          "content": "#include <libwebsockets.h>\n#include <string.h>\n#include <signal.h>\n\n// Set up WebSocket context and connection details\nstatic struct lws_context *context;\nstatic int interrupted = 0, port = 443, ssl_connection = LCCSCF_USE_SSL;\nstatic const char *server_address = \"ws.derivws.com\";\nstatic const char *path = \"/websockets/v3?app_id=app_id\";//replace with your app_id\nstatic const char *pro = \"lws-minimal-client\";\n\n// Signal handler for graceful shutdown\nstatic void sigint_handler(int sig) {\n    interrupted = 1;\n}\n\n// Callback function for WebSocket events\nstatic int callback_minimal(struct lws *wsi, enum lws_callback_reasons reason,\n                            void *user, void *in, size_t len) {\n    switch (reason) {\n    case LWS_CALLBACK_CLIENT_CONNECTION_ERROR:\n        lwsl_err(\"CLIENT_CONNECTION_ERROR: %s\\n\", in ? (char *)in : \"(null)\");\n        interrupted = 1;\n        break;\n\n    case LWS_CALLBACK_CLIENT_ESTABLISHED:\n        lwsl_user(\"Connection established\\n\");\n        lws_callback_on_writable(wsi); // Request writable callback\n        break;\n\n    case LWS_CALLBACK_CLIENT_WRITEABLE: {\n        const char *ping_msg = \"{\\\"ping\\\": 1}\";\n        unsigned char buf[LWS_PRE + 20];\n        memcpy(&buf[LWS_PRE], ping_msg, strlen(ping_msg));\n        lws_write(wsi, &buf[LWS_PRE], strlen(ping_msg), LWS_WRITE_TEXT);\n        break;\n    }\n\n    case LWS_CALLBACK_CLIENT_RECEIVE:\n        lwsl_hexdump_notice(in, len); // Log received message\n        break;\n\n    case LWS_CALLBACK_CLIENT_CLOSED:\n        lwsl_user(\"Connection closed\\n\");\n        interrupted = 1;\n        break;\n\n    default:\n        break;\n    }\n\n    return 0;\n}\n\n// Define supported protocols for the WebSocket\nstatic const struct lws_protocols protocols[] = {\n    { \"lws-minimal-client\", callback_minimal, 0, 0, 0, NULL, 0 },\n    LWS_PROTOCOL_LIST_TERM\n};\n\n// Main function to set up and manage the WebSocket client\nint main(int argc, const char **argv) {\n    struct lws_context_creation_info info;\n    struct lws_client_connect_info i;\n\n    // Handle Ctrl+C interrupt for graceful shutdown\n    signal(SIGINT, sigint_handler);\n    memset(&info, 0, sizeof info);\n    memset(&i, 0, sizeof(i));\n\n    lwsl_user(\"LWS Deriv ws client\\n\");\n\n    info.options = LWS_SERVER_OPTION_DO_SSL_GLOBAL_INIT;\n    info.port = CONTEXT_PORT_NO_LISTEN;\n    info.protocols = protocols;\n    info.fd_limit_per_thread = 1 + 1 + 1;\n\n    context = lws_create_context(&info);\n    if (!context) {\n        lwsl_err(\"lws init failed\\n\");\n        return 1;\n    }\n\n    i.context = context;\n    i.port = port;\n    i.address = server_address;\n    i.path = path;\n    i.host = i.address;\n    i.origin = i.address;\n    i.ssl_connection = ssl_connection;\n    i.protocol = pro;\n    i.local_protocol_name = \"lws-minimal-client\";\n\n    if (!lws_client_connect_via_info(&i)) {\n        lwsl_err(\"Failed to initiate connection\\n\");\n        return 1;\n    }\n\n    // Run the WebSocket client event loop\n    while (!interrupted)\n        lws_service(context, 0);\n\n    lws_context_destroy(context);\n    lwsl_user(\"Completed\\n\");\n\n    return 0;\n}\n\n/*\n * Instructions:\n * 1. Install the libwebsockets library on your system if it's not already installed.\n *    - On Ubuntu, you can install it by running:\n *        sudo apt-get install libwebsockets-dev\n *    - On macOS, you can use Homebrew:\n *        brew install libwebsockets\n *    - For other operating systems, refer to the libwebsockets documentation for installation details.\n * 2. Compile the code using the following command:\n *      gcc -o connect connect.c -lwebsockets -lssl -lcrypto -lm\n *    - This command links the required libraries: `libwebsockets`, `ssl`, `crypto`, and `m`.\n * 3. Run the compiled executable:\n *      ./connect\n * 4. Ensure you have internet connectivity as the WebSocket will attempt to connect to `ws.derivws.com`.\n * 5. Replace \"app_id=1089\" in the `path` variable with your actual app_id if required.\n */"
        },
        {
          "language": "text",
          "content": "#include <libwebsockets.h>\n#include <string.h>\n#include <signal.h>\n\n// Set up WebSocket context and connection details\nstatic struct lws_context *context;\nstatic int interrupted = 0, port = 443, ssl_connection = LCCSCF_USE_SSL;\nstatic const char *server_address = \"ws.derivws.com\";\nstatic const char *path = \"/websockets/v3?app_id=app_id\";//replace with your app_id\nstatic const char *pro = \"lws-minimal-client\";\n\n// Signal handler for graceful shutdown\nstatic void sigint_handler(int sig) {\n    interrupted = 1;\n}\n\n// Callback function for WebSocket events\nstatic int callback_minimal(struct lws *wsi, enum lws_callback_reasons reason,\n                            void *user, void *in, size_t len) {\n    switch (reason) {\n    case LWS_CALLBACK_CLIENT_CONNECTION_ERROR:\n        lwsl_err(\"CLIENT_CONNECTION_ERROR: %s\\n\", in ? (char *)in : \"(null)\");\n        interrupted = 1;\n        break;\n\n    case LWS_CALLBACK_CLIENT_ESTABLISHED:\n        lwsl_user(\"Connection established\\n\");\n        lws_callback_on_writable(wsi); // Request writable callback\n        break;\n\n    case LWS_CALLBACK_CLIENT_WRITEABLE: {\n        const char *ping_msg = \"{\\\"ping\\\": 1}\";\n        unsigned char buf[LWS_PRE + 20];\n        memcpy(&buf[LWS_PRE], ping_msg, strlen(ping_msg));\n        lws_write(wsi, &buf[LWS_PRE], strlen(ping_msg), LWS_WRITE_TEXT);\n        break;\n    }\n\n    case LWS_CALLBACK_CLIENT_RECEIVE:\n        lwsl_hexdump_notice(in, len); // Log received message\n        break;\n\n    case LWS_CALLBACK_CLIENT_CLOSED:\n        lwsl_user(\"Connection closed\\n\");\n        interrupted = 1;\n        break;\n\n    default:\n        break;\n    }\n\n    return 0;\n}\n\n// Define supported protocols for the WebSocket\nstatic const struct lws_protocols protocols[] = {\n    { \"lws-minimal-client\", callback_minimal, 0, 0, 0, NULL, 0 },\n    LWS_PROTOCOL_LIST_TERM\n};\n\n// Main function to set up and manage the WebSocket client\nint main(int argc, const char **argv) {\n    struct lws_context_creation_info info;\n    struct lws_client_connect_info i;\n\n    // Handle Ctrl+C interrupt for graceful shutdown\n    signal(SIGINT, sigint_handler);\n    memset(&info, 0, sizeof info);\n    memset(&i, 0, sizeof(i));\n\n    lwsl_user(\"LWS Deriv ws client\\n\");\n\n    info.options = LWS_SERVER_OPTION_DO_SSL_GLOBAL_INIT;\n    info.port = CONTEXT_PORT_NO_LISTEN;\n    info.protocols = protocols;\n    info.fd_limit_per_thread = 1 + 1 + 1;\n\n    context = lws_create_context(&info);\n    if (!context) {\n        lwsl_err(\"lws init failed\\n\");\n        return 1;\n    }\n\n    i.context = context;\n    i.port = port;\n    i.address = server_address;\n    i.path = path;\n    i.host = i.address;\n    i.origin = i.address;\n    i.ssl_connection = ssl_connection;\n    i.protocol = pro;\n    i.local_protocol_name = \"lws-minimal-client\";\n\n    if (!lws_client_connect_via_info(&i)) {\n        lwsl_err(\"Failed to initiate connection\\n\");\n        return 1;\n    }\n\n    // Run the WebSocket client event loop\n    while (!interrupted)\n        lws_service(context, 0);\n\n    lws_context_destroy(context);\n    lwsl_user(\"Completed\\n\");\n\n    return 0;\n}\n\n/*\n * Instructions:\n * 1. Install the libwebsockets library on your system if it's not already installed.\n *    - On Ubuntu, you can install it by running:\n *        sudo apt-get install libwebsockets-dev\n *    - On macOS, you can use Homebrew:\n *        brew install libwebsockets\n *    - For other operating systems, refer to the libwebsockets documentation for installation details.\n * 2. Compile the code using the following command:\n *      gcc -o connect connect.c -lwebsockets -lssl -lcrypto -lm\n *    - This command links the required libraries: `libwebsockets`, `ssl`, `crypto`, and `m`.\n * 3. Run the compiled executable:\n *      ./connect\n * 4. Ensure you have internet connectivity as the WebSocket will attempt to connect to `ws.derivws.com`.\n * 5. Replace \"app_id=1089\" in the `path` variable with your actual app_id if required.\n */"
        },
        {
          "language": "text",
          "content": "using System;\nusing System.Net.WebSockets;\nusing System.Text;\nusing System.Threading;\nusing System.Threading.Tasks;\n\nclass WebSocketExample\n{\n    public static async Task Main(string[] args)\n    {\n        string app_id = \"app_id\"; // Replace with your app_id.\n        string uri = $\"wss://ws.derivws.com/websockets/v3?app_id={app_id}\"; // WebSocket URI with the app_id\n\n        using (ClientWebSocket webSocket = new ClientWebSocket())\n        {\n            try\n            {\n                // Connect to the WebSocket server\n                await webSocket.ConnectAsync(new Uri(uri), CancellationToken.None);\n                Console.WriteLine(\"[open] Connection established\");\n\n                // Send a ping message to the server\n                string sendMessage = \"{\\\"ping\\\": 1}\"; // Prepare the ping message in JSON format\n                ArraySegment<byte> bytesToSend = new ArraySegment<byte>(Encoding.UTF8.GetBytes(sendMessage));\n                await webSocket.SendAsync(bytesToSend, WebSocketMessageType.Text, true, CancellationToken.None);\n                Console.WriteLine(\"Sending to server\");\n\n                // Receive message from the server\n                var buffer = new byte[1024];\n                WebSocketReceiveResult result = await webSocket.ReceiveAsync(new ArraySegment<byte>(buffer), CancellationToken.None);\n                string response = Encoding.UTF8.GetString(buffer, 0, result.Count);\n                Console.WriteLine(\"[message] Data received from server: \" + response);\n\n                // Close the WebSocket connection cleanly\n                await webSocket.CloseAsync(WebSocketCloseStatus.NormalClosure, \"Close connection\", CancellationToken.None);\n                Console.WriteLine(\"[close] Connection closed cleanly\");\n            }\n            catch (WebSocketException e)\n            {\n                Console.WriteLine(\"[error] WebSocket error: \" + e.Message);\n            }\n            catch (Exception e)\n            {\n                Console.WriteLine(\"[error] \" + e.Message);\n            }\n        }\n    }\n}\n\n/*\n * Instructions:\n * 1. Ensure you have the .NET SDK installed on your machine. You can download it from https://dotnet.microsoft.com/download.\n * 2. Save this code in a file, e.g., WebSocketExample.cs.\n * 3. Open a terminal and navigate to the directory where you saved the file.\n * 4. Create a new .NET console project and add the required WebSocket package:\n *      dotnet new console -o WebSocketExampleApp\n *      mv WebSocketExample.cs WebSocketExampleApp/WebSocketExample.cs\n *      cd WebSocketExampleApp\n *      dotnet add package System.Net.WebSockets.Client --version 4.5.3\n * 5. Run the application with:\n *      dotnet run\n *\n * Note: Replace \"app_id=1089\" in the URL with your actual app_id if necessary.\n */"
        },
        {
          "language": "text",
          "content": "using System;\nusing System.Net.WebSockets;\nusing System.Text;\nusing System.Threading;\nusing System.Threading.Tasks;\n\nclass WebSocketExample\n{\n    public static async Task Main(string[] args)\n    {\n        string app_id = \"app_id\"; // Replace with your app_id.\n        string uri = $\"wss://ws.derivws.com/websockets/v3?app_id={app_id}\"; // WebSocket URI with the app_id\n\n        using (ClientWebSocket webSocket = new ClientWebSocket())\n        {\n            try\n            {\n                // Connect to the WebSocket server\n                await webSocket.ConnectAsync(new Uri(uri), CancellationToken.None);\n                Console.WriteLine(\"[open] Connection established\");\n\n                // Send a ping message to the server\n                string sendMessage = \"{\\\"ping\\\": 1}\"; // Prepare the ping message in JSON format\n                ArraySegment<byte> bytesToSend = new ArraySegment<byte>(Encoding.UTF8.GetBytes(sendMessage));\n                await webSocket.SendAsync(bytesToSend, WebSocketMessageType.Text, true, CancellationToken.None);\n                Console.WriteLine(\"Sending to server\");\n\n                // Receive message from the server\n                var buffer = new byte[1024];\n                WebSocketReceiveResult result = await webSocket.ReceiveAsync(new ArraySegment<byte>(buffer), CancellationToken.None);\n                string response = Encoding.UTF8.GetString(buffer, 0, result.Count);\n                Console.WriteLine(\"[message] Data received from server: \" + response);\n\n                // Close the WebSocket connection cleanly\n                await webSocket.CloseAsync(WebSocketCloseStatus.NormalClosure, \"Close connection\", CancellationToken.None);\n                Console.WriteLine(\"[close] Connection closed cleanly\");\n            }\n            catch (WebSocketException e)\n            {\n                Console.WriteLine(\"[error] WebSocket error: \" + e.Message);\n            }\n            catch (Exception e)\n            {\n                Console.WriteLine(\"[error] \" + e.Message);\n            }\n        }\n    }\n}\n\n/*\n * Instructions:\n * 1. Ensure you have the .NET SDK installed on your machine. You can download it from https://dotnet.microsoft.com/download.\n * 2. Save this code in a file, e.g., WebSocketExample.cs.\n * 3. Open a terminal and navigate to the directory where you saved the file.\n * 4. Create a new .NET console project and add the required WebSocket package:\n *      dotnet new console -o WebSocketExampleApp\n *      mv WebSocketExample.cs WebSocketExampleApp/WebSocketExample.cs\n *      cd WebSocketExampleApp\n *      dotnet add package System.Net.WebSockets.Client --version 4.5.3\n * 5. Run the application with:\n *      dotnet run\n *\n * Note: Replace \"app_id=1089\" in the URL with your actual app_id if necessary.\n */"
        },
        {
          "language": "text",
          "content": "package main\n\nimport (\n    \"fmt\"\n    \"log\"\n    \"net/url\"\n    \"os\"\n    \"os/signal\"\n    \"time\"\n\n    \"github.com/gorilla/websocket\"\n)\n\nfunc main() {\n    // Define the WebSocket server URL\n    appID := \"app_id\" // Replace with your app_id.\n    serverURL := url.URL{Scheme: \"wss\", Host: \"ws.derivws.com\", Path: \"/websockets/v3\", RawQuery: \"app_id=\" + appID}\n    fmt.Printf(\"Connecting to %s\\n\", serverURL.String())\n\n    // Connect to the WebSocket server\n    c, _, err := websocket.DefaultDialer.Dial(serverURL.String(), nil)\n    if err != nil {\n        log.Fatal(\"Dial error:\", err)\n    }\n    defer c.Close()\n\n    done := make(chan struct{})\n\n    // Goroutine to handle receiving messages from the server\n    go func() {\n        defer close(done)\n        for {\n            _, message, err := c.ReadMessage()\n            if err != nil {\n                log.Println(\"Read error:\", err)\n                return\n            }\n            fmt.Printf(\"[message] Data received from server: %s\\n\", message)\n        }\n    }()\n\n    // Send a ping message to the server\n    pingMessage := `{\"ping\": 1}` // Prepare the ping message in JSON format\n    err = c.WriteMessage(websocket.TextMessage, []byte(pingMessage))\n    if err != nil {\n        log.Println(\"Write error:\", err)\n        return\n    }\n    fmt.Println(\"Sending to server\")\n\n    // Set up signal handling to gracefully close the connection\n    interrupt := make(chan os.Signal, 1)\n    signal.Notify(interrupt, os.Interrupt)\n\n    // Loop to handle connection closure or interruptions\n    for {\n        select {\n        case <-done:\n            return\n        case <-interrupt:\n            fmt.Println(\"[close] Interrupt signal received. Closing connection.\")\n            // Close the WebSocket connection gracefully\n            err := c.WriteMessage(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseNormalClosure, \"\"))\n            if err != nil {\n                log.Println(\"Write close error:\", err)\n                return\n            }\n            select {\n            case <-done:\n            case <-time.After(time.Second):\n            }\n            return\n        }\n    }\n}\n\n/*\nInstructions:\n1. Ensure you have Go installed on your machine. You can download it from https://golang.org/dl/.\n2. Install the Gorilla WebSocket package by running:\n       go get github.com/gorilla/websocket\n3. Save this code to a file, e.g., websocket_client.go.\n4. Open a terminal, navigate to the directory where you saved the file, and run:\n       go run websocket_client.go\n\nNote: Replace \"app_id=1089\" in the URL with your actual app_id if necessary.\n*/"
        },
        {
          "language": "text",
          "content": "package main\n\nimport (\n    \"fmt\"\n    \"log\"\n    \"net/url\"\n    \"os\"\n    \"os/signal\"\n    \"time\"\n\n    \"github.com/gorilla/websocket\"\n)\n\nfunc main() {\n    // Define the WebSocket server URL\n    appID := \"app_id\" // Replace with your app_id.\n    serverURL := url.URL{Scheme: \"wss\", Host: \"ws.derivws.com\", Path: \"/websockets/v3\", RawQuery: \"app_id=\" + appID}\n    fmt.Printf(\"Connecting to %s\\n\", serverURL.String())\n\n    // Connect to the WebSocket server\n    c, _, err := websocket.DefaultDialer.Dial(serverURL.String(), nil)\n    if err != nil {\n        log.Fatal(\"Dial error:\", err)\n    }\n    defer c.Close()\n\n    done := make(chan struct{})\n\n    // Goroutine to handle receiving messages from the server\n    go func() {\n        defer close(done)\n        for {\n            _, message, err := c.ReadMessage()\n            if err != nil {\n                log.Println(\"Read error:\", err)\n                return\n            }\n            fmt.Printf(\"[message] Data received from server: %s\\n\", message)\n        }\n    }()\n\n    // Send a ping message to the server\n    pingMessage := `{\"ping\": 1}` // Prepare the ping message in JSON format\n    err = c.WriteMessage(websocket.TextMessage, []byte(pingMessage))\n    if err != nil {\n        log.Println(\"Write error:\", err)\n        return\n    }\n    fmt.Println(\"Sending to server\")\n\n    // Set up signal handling to gracefully close the connection\n    interrupt := make(chan os.Signal, 1)\n    signal.Notify(interrupt, os.Interrupt)\n\n    // Loop to handle connection closure or interruptions\n    for {\n        select {\n        case <-done:\n            return\n        case <-interrupt:\n            fmt.Println(\"[close] Interrupt signal received. Closing connection.\")\n            // Close the WebSocket connection gracefully\n            err := c.WriteMessage(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseNormalClosure, \"\"))\n            if err != nil {\n                log.Println(\"Write close error:\", err)\n                return\n            }\n            select {\n            case <-done:\n            case <-time.After(time.Second):\n            }\n            return\n        }\n    }\n}\n\n/*\nInstructions:\n1. Ensure you have Go installed on your machine. You can download it from https://golang.org/dl/.\n2. Install the Gorilla WebSocket package by running:\n       go get github.com/gorilla/websocket\n3. Save this code to a file, e.g., websocket_client.go.\n4. Open a terminal, navigate to the directory where you saved the file, and run:\n       go run websocket_client.go\n\nNote: Replace \"app_id=1089\" in the URL with your actual app_id if necessary.\n*/"
        }
      ],
      "tables": [],
      "links": [
        {
          "text": "server status",
          "href": "https://api.deriv.com/api-explorer#website_status"
        },
        {
          "text": "ping",
          "href": "https://api.deriv.com/api-explorer#ping"
        },
        {
          "text": "time",
          "href": "https://api.deriv.com/api-explorer#time"
        },
        {
          "text": "Applications",
          "href": "https://api.deriv.com/dashboard/"
        },
        {
          "text": "MDN WebSocket readyState",
          "href": "https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/readyState"
        },
        {
          "text": "WebSocket APIs - MDN",
          "href": "https://developer.mozilla.org/en-US/docs/Web/API/WebSocket"
        }
      ]
    },
    "Functions of API Calls": {
      "title": "Functions and structure of API calls | Deriv API",
      "url": "https://developers.deriv.com/docs/functions-of-api-calls",
      "mainContent": "Request format\n\nWhen interacting with Deriv‚Äôs WebSocket API, all requests must be sent as JSON in text frames, with one request per frame.\n\nTo help you manage the flow of requests and responses, each API call follows a standardized structure. This structure aids in caching, validation, and synchronizing requests and responses, making your WebSocket connection smoother and more efficient.\n\nAPI call method name\n\nEvery request must include a method name field, which serves as a unique identifier. Typically, this is set to 1, but it can sometimes be a string.\n\nüöß\n\nThe method name is always required, as it defines the specific data you‚Äôll receive from the WebSocket server.\n\nRequired fields\n\nEach request contains required fields and may also have optional fields. For example, a residence_list call returns a list of countries and their two-letter codes, suitable for populating an account opening form.\n\nExample request data for residence list:\n\nJSON\n{\n  \"residence_list\": 1, // Method Name\n  \"passthrough\": {},   // Optional\n  \"req_id\": 2          // Optional\n}\n\n\nThe residence_list field is the method name and is mandatory. Other fields like passthrough and req_id are optional and depend on your specific needs.\n\nOptional fields\n\nAPI calls often include optional fields that you can choose to use or ignore:\n\npassthrough: This field returns any data you provide within the response object. It‚Äôs useful for maintaining state across requests and responses.\nreq_id: This field allows you to tag requests, making it easier to map them to responses.\nüöß\n\nFor more details on optional fields for each API call, visit the API Explorer.\n\nResponse data\n\nResponses from the API will include a field named after the method name you used in your request. This field contains the actual data.\n\nExample response for residence list:\n\nJSON\n{\n  \"echo_req\": {\n    \"req_id\": 1,\n    \"residence_list\": 1\n  },\n  \"msg_type\": \"residence_list\",\n  \"req_id\": 1,\n  \"residence_list\": [\n    {\n      \"identity\": {\n        \"services\": {\n          \"idv\": {\n            \"documents_supported\": {},\n            \"has_visual_sample\": 0,\n            \"is_country_supported\": 0\n          },\n          \"onfido\": {\n            \"documents_supported\": {\n              \"driving_licence\": {\n                \"display_name\": \"Driving Licence\"\n              }\n            },\n            \"is_country_supported\": 0\n          }\n        }\n      },\n      \"phone_idd\": \"35818\",\n      \"text\": \"Aland Islands\",\n      \"value\": \"ax\"\n    },\n    {\n      \"identity\": {\n        \"services\": {\n          \"idv\": {\n            \"documents_supported\": {},\n            \"has_visual_sample\": 0,\n            \"is_country_supported\": 0\n          },\n          \"onfido\": {\n            \"documents_supported\": {\n              \"driving_licence\": {\n                \"display_name\": \"Driving Licence\"\n              },\n              \"national_identity_card\": {\n                \"display_name\": \"National Identity Card\"\n              },\n              \"passport\": {\n                \"display_name\": \"Passport\"\n              }\n            },\n            \"is_country_supported\": 1\n          }\n        }\n      },\n      \"phone_idd\": \"355\",\n      \"text\": \"Albania\",\n      \"tin_format\": [\n        \"^[A-Ta-t0-9]\\\\d{8}[A-Wa-w]$\"\n      ],\n      \"value\": \"al\"\n    }\n  ]\n}\n\n\nThe residence_list field in this response contains the requested data. For the complete response, check the API Explorer.\n\nResponse fields\necho_req: This field returns the exact request data that was sent to the server, useful for verification and debugging.\nmsg_type: Identifies the type of message received from the server, which is helpful for managing responses in your WebSocket onmessage event handler.\nreq_id: An optional field used for validation, synchronization, or caching.\n\nJavaScript example for handling responses:\n\nJavaScript\nsocket.onmessage = (event) => {\n  const receivedMessage = JSON.parse(event.data);\n\n  switch (receivedMessage.msg_type) {\n    case \"residence_list\":\n      console.log(\"The residence list is:\", receivedMessage.residence_list);\n      break;\n    case \"other_request_identifier\":\n      console.log(\"The response:\", receivedMessage.some_other_request_identifier);\n      break;\n    default:\n      console.log(\"Received message:\", receivedMessage);\n      break;\n  }\n};\n\nüìò\n\nThe msg_type field is always present in the response data, helping you manage the incoming messages efficiently.\n\nUpdated 4 months ago\n\nDid this page help you?\nYes\nNo",
      "headings": [
        {
          "level": "h1",
          "text": "Request format"
        },
        {
          "level": "h2",
          "text": "API call method name"
        },
        {
          "level": "h2",
          "text": "üößThe method name is always required, as it defines the specific data you‚Äôll receive from the WebSocket server."
        },
        {
          "level": "h2",
          "text": "Required fields"
        },
        {
          "level": "h3",
          "text": "Optional fields"
        },
        {
          "level": "h2",
          "text": "üößFor more details on optional fields for each API call, visit the API Explorer."
        },
        {
          "level": "h2",
          "text": "Response data"
        },
        {
          "level": "h3",
          "text": "Response fields"
        },
        {
          "level": "h2",
          "text": "üìòThe msg_type field is always present in the response data, helping you manage the incoming messages efficiently."
        }
      ],
      "codeBlocks": [
        {
          "language": "text",
          "content": "method name"
        },
        {
          "language": "text",
          "content": "1"
        },
        {
          "language": "text",
          "content": "method name"
        },
        {
          "language": "text",
          "content": "{\n  \"residence_list\": 1, // Method Name\n  \"passthrough\": {},   // Optional\n  \"req_id\": 2          // Optional\n}"
        },
        {
          "language": "text",
          "content": "{\n  \"residence_list\": 1, // Method Name\n  \"passthrough\": {},   // Optional\n  \"req_id\": 2          // Optional\n}"
        },
        {
          "language": "text",
          "content": "residence_list"
        },
        {
          "language": "text",
          "content": "passthrough"
        },
        {
          "language": "text",
          "content": "req_id"
        },
        {
          "language": "text",
          "content": "passthrough"
        },
        {
          "language": "text",
          "content": "req_id"
        },
        {
          "language": "text",
          "content": "method name"
        },
        {
          "language": "text",
          "content": "{\n  \"echo_req\": {\n    \"req_id\": 1,\n    \"residence_list\": 1\n  },\n  \"msg_type\": \"residence_list\",\n  \"req_id\": 1,\n  \"residence_list\": [\n    {\n      \"identity\": {\n        \"services\": {\n          \"idv\": {\n            \"documents_supported\": {},\n            \"has_visual_sample\": 0,\n            \"is_country_supported\": 0\n          },\n          \"onfido\": {\n            \"documents_supported\": {\n              \"driving_licence\": {\n                \"display_name\": \"Driving Licence\"\n              }\n            },\n            \"is_country_supported\": 0\n          }\n        }\n      },\n      \"phone_idd\": \"35818\",\n      \"text\": \"Aland Islands\",\n      \"value\": \"ax\"\n    },\n    {\n      \"identity\": {\n        \"services\": {\n          \"idv\": {\n            \"documents_supported\": {},\n            \"has_visual_sample\": 0,\n            \"is_country_supported\": 0\n          },\n          \"onfido\": {\n            \"documents_supported\": {\n              \"driving_licence\": {\n                \"display_name\": \"Driving Licence\"\n              },\n              \"national_identity_card\": {\n                \"display_name\": \"National Identity Card\"\n              },\n              \"passport\": {\n                \"display_name\": \"Passport\"\n              }\n            },\n            \"is_country_supported\": 1\n          }\n        }\n      },\n      \"phone_idd\": \"355\",\n      \"text\": \"Albania\",\n      \"tin_format\": [\n        \"^[A-Ta-t0-9]\\\\d{8}[A-Wa-w]$\"\n      ],\n      \"value\": \"al\"\n    }\n  ]\n}"
        },
        {
          "language": "text",
          "content": "{\n  \"echo_req\": {\n    \"req_id\": 1,\n    \"residence_list\": 1\n  },\n  \"msg_type\": \"residence_list\",\n  \"req_id\": 1,\n  \"residence_list\": [\n    {\n      \"identity\": {\n        \"services\": {\n          \"idv\": {\n            \"documents_supported\": {},\n            \"has_visual_sample\": 0,\n            \"is_country_supported\": 0\n          },\n          \"onfido\": {\n            \"documents_supported\": {\n              \"driving_licence\": {\n                \"display_name\": \"Driving Licence\"\n              }\n            },\n            \"is_country_supported\": 0\n          }\n        }\n      },\n      \"phone_idd\": \"35818\",\n      \"text\": \"Aland Islands\",\n      \"value\": \"ax\"\n    },\n    {\n      \"identity\": {\n        \"services\": {\n          \"idv\": {\n            \"documents_supported\": {},\n            \"has_visual_sample\": 0,\n            \"is_country_supported\": 0\n          },\n          \"onfido\": {\n            \"documents_supported\": {\n              \"driving_licence\": {\n                \"display_name\": \"Driving Licence\"\n              },\n              \"national_identity_card\": {\n                \"display_name\": \"National Identity Card\"\n              },\n              \"passport\": {\n                \"display_name\": \"Passport\"\n              }\n            },\n            \"is_country_supported\": 1\n          }\n        }\n      },\n      \"phone_idd\": \"355\",\n      \"text\": \"Albania\",\n      \"tin_format\": [\n        \"^[A-Ta-t0-9]\\\\d{8}[A-Wa-w]$\"\n      ],\n      \"value\": \"al\"\n    }\n  ]\n}"
        },
        {
          "language": "text",
          "content": "residence_list"
        },
        {
          "language": "text",
          "content": "echo_req"
        },
        {
          "language": "text",
          "content": "msg_type"
        },
        {
          "language": "text",
          "content": "onmessage"
        },
        {
          "language": "text",
          "content": "req_id"
        },
        {
          "language": "text",
          "content": "socket.onmessage = (event) => {\n  const receivedMessage = JSON.parse(event.data);\n\n  switch (receivedMessage.msg_type) {\n    case \"residence_list\":\n      console.log(\"The residence list is:\", receivedMessage.residence_list);\n      break;\n    case \"other_request_identifier\":\n      console.log(\"The response:\", receivedMessage.some_other_request_identifier);\n      break;\n    default:\n      console.log(\"Received message:\", receivedMessage);\n      break;\n  }\n};"
        },
        {
          "language": "text",
          "content": "socket.onmessage = (event) => {\n  const receivedMessage = JSON.parse(event.data);\n\n  switch (receivedMessage.msg_type) {\n    case \"residence_list\":\n      console.log(\"The residence list is:\", receivedMessage.residence_list);\n      break;\n    case \"other_request_identifier\":\n      console.log(\"The response:\", receivedMessage.some_other_request_identifier);\n      break;\n    default:\n      console.log(\"Received message:\", receivedMessage);\n      break;\n  }\n};"
        },
        {
          "language": "text",
          "content": "msg_type"
        }
      ],
      "tables": [],
      "links": [
        {
          "text": "residence_list",
          "href": "https://developers.deriv.com/api-explorer#residence_list"
        },
        {
          "text": "API Explorer",
          "href": "https://api.deriv.com/api-explorer"
        },
        {
          "text": "API Explorer",
          "href": "https://api.deriv.com/api-explorer#residence_list"
        }
      ]
    },
    "OAuth": {
      "title": "Secure third-party logins with OAuth API | Deriv API",
      "url": "https://developers.deriv.com/docs/oauth",
      "mainContent": "OAuth (Open Authorization) is a protocol that allows a client to access a user‚Äôs resources on a server without requiring the user‚Äôs login credentials. With OAuth, users can log into third-party apps using their Deriv accounts without sharing passwords or API tokens, providing a secure and convenient option.\n\nOAuth2 is a secure method for developers to grant app access to users, although it requires a few more setup steps. It is the best way to ensure security while enabling third-party access.\n\nHow to use OAuth authorization\n\nTo set up OAuth authorization for your app, follow these steps:\n\nSpecify the OAuth redirect URL: Go to the app registration page and enter the URL you want to use as the OAuth Redirect URL in the \"Website URL\" field.\n\nAdd a login button:\n\nAdd a login button to your website or app that directs users to:\n\nhttps://oauth.deriv.com/oauth2/authorize?app_id=your_app_id\n\nReplace your_app_id with your actual app ID.\n\nHandle user redirection: After a user logs in, they will be redirected to the URL you specified as the Redirect URL. This URL will include parameters with the user's session tokens, which will look something like this:\n\nhttps://[YOUR_WEBSITE_URL]/redirect/?acct1=cr799393&token1=a1-f7pnteezo4jzhpxclctizt27hyeot&cur1=usd&acct2=vrtc1859315&token2=a1clwe3vfuuus5kraceykdsoqm4snfq&cur2=usd&state=\n\nExtract tokens from the URL: In the URL parameters, you'll see all the accounts and their corresponding session tokens. Use these tokens in the Authorize API call to perform actions on behalf of the user.\n\nBy following these steps, you can securely integrate OAuth into your app, providing a seamless and safe login experience for your users.\n\nUpdated 11 months ago\n\nDid this page help you?\nYes\nNo",
      "headings": [
        {
          "level": "h2",
          "text": "How to use OAuth authorization"
        }
      ],
      "codeBlocks": [
        {
          "language": "text",
          "content": "Website URL"
        },
        {
          "language": "text",
          "content": "https://oauth.deriv.com/oauth2/authorize?app_id=your_app_id"
        },
        {
          "language": "text",
          "content": "your_app_id"
        },
        {
          "language": "text",
          "content": "https://[YOUR_WEBSITE_URL]/redirect/?acct1=cr799393&token1=a1-f7pnteezo4jzhpxclctizt27hyeot&cur1=usd&acct2=vrtc1859315&token2=a1clwe3vfuuus5kraceykdsoqm4snfq&cur2=usd&state="
        }
      ],
      "tables": [],
      "links": []
    },
    "Mark-up": {
      "title": "Monetize with API markup and commissions | Deriv API",
      "url": "https://developers.deriv.com/docs/mark-up",
      "mainContent": "If you build a platform or app that allows users to trade manually or via automation using Deriv APIs, you can earn up to 3% markup commission on every contract your users execute.\n\nExample:\n\nLet‚Äôs say a user places a $10 stake, and the potential payout without any markup is $17.20 if the trade wins.\n\nIf you set a 2% markup, your commission will be calculated on the potential payout: 2% of $17.20 = $0.34\n\nWith this adjusted stake, the user‚Äôs new potential payout becomes: $16.63\n\nüöß\n\n‚ö†Ô∏è Markup impacts the user‚Äôs profit. The higher the markup, the lower their payout.\n\nAnother Example:\n\nStake: USD 25.50\n\nPayout: USD 50\n\nMarkup: 2% of USD 50 = USD 1\n\nClient Balance Debited: USD 26.50\n\nOther ways to monetize the Deriv API\n\nYou can make money with your Deriv API application in several ways:\n\nCharge for Access\nOffer your trading app for a subscription or one-time fee if it provides value to users.\n\nOffer Premium Features\nCharge extra for advanced features like real-time market data or advanced charting tools.\n\nAffiliate Marketing\nJoin Deriv partnership programmes to earn commissions by referring new users to the platform.\n\nReferral Fees\nEncourage your users to refer others by offering them a referral fee, helping you grow your user base.\n\nSell Advertising Space\nIf your app has a large user base, sell ad space to relevant advertisers to generate extra revenue.\n\nEarning Partner Commissions\n\nEarn commissions on trades and payments made through your apps. Learn more about the commission plans.\n\nBy following these strategies, you can effectively monetize your Deriv API applications!\n\nUpdated 3 months ago\n\nDid this page help you?\nYes\nNo",
      "headings": [
        {
          "level": "h2",
          "text": "üöß‚ö†Ô∏è Markup impacts the user‚Äôs profit. The higher the markup, the lower their payout."
        },
        {
          "level": "h1",
          "text": "Other ways to monetize the Deriv API"
        },
        {
          "level": "h2",
          "text": "Earning Partner Commissions"
        }
      ],
      "codeBlocks": [],
      "tables": [],
      "links": [
        {
          "text": "commission plans",
          "href": "https://deriv.com/partners"
        }
      ]
    },
    "Error codes": {
      "title": "Discover common API errors and what it means | Deriv API",
      "url": "https://developers.deriv.com/docs/error-codes",
      "mainContent": "General\nError Code\tMessage\nAccountShouldBeReal\tOnly real accounts are allowed to open [_1] real accounts. Demo account cannot open real dxtrader.\nAccountTypesMismatch\tTransfer between real and virtual accounts is not allowed.\nAccountWithDeposit\tChange of currency is not allowed for an existing account with previous deposits.\nAffiliateNotFound\tN/A\nAllowCopiersError\tCopier can't be a trader.\nAlreadyAgeVerified\tYour age has already been verified.\nAlreadyVerified\tThis account is already phone number verified.\nAmountNotAllowed\tThe minimum amount for transfers is [_1] [_2] after conversion fees are deducted. Please adjust the amount.\nAppGet\tNot Found\nAppRegister\tNot Found\nAppUpdate\tN/A\nAppropriatenessTestFailed\tFailed to reach an acceptable trading experience score.\nAuthenticateAccount\tPlease authenticate your [_1] account to proceed with the fund transfer.\nAuthenticateAccountCreate\tPlease verify your [_1] account to proceed with account creation.\nAuthorizationRequired\tPlease log in.\nBadSession\tThe token you used is invalid in this session. Please get a new token and try again.\nBalanceExceeded\tThis deposit will cause your account balance to exceed your account limit of 300000 USD.\nBarrierValidationError\tBarrier can only be up to [_1] decimal places.\nBelowMinimumAge\tValue of date of birth is below the minimum age required.\nCannotChangeAccountDetails\tYou may not change these account details. Correct error code.\nCannotChangeWallet\tSorry, your trading account is already linked to a wallet.\nCannotGetOpenPositions\tA connection error happened while we were completing your request. Please try again later.\nCannotLinkVirtualAndReal\tPlease ensure your trading account type is the same as your wallet account type.\nCannotLinkWallet\tSorry, we couldn't link your trading account to this wallet.\nCashierLocked\tYour account cashier is locked. Please contact us for more information. Correct error code for cashier locked.\nCashierNotAllowed\tCashier deposits and withdrawals are not allowed on this account.\nCashierRequirementsMissing\tYour profile appears to be incomplete. Please update your personal details to continue.\nClaimedDocument\tThis document number was already submitted for a different account. Please contact us via live chat if you need help.\nClientCashierLocked\tYou cannot transfer to account [_1], as their cashier is locked.\nClientCurrencyMismatch\tYou cannot perform this action, as [_1] is not the default account currency for client [_2].\nClientCurrencyMismatchWithdraw\tYou cannot perform this action, as [_1] is not the default currency for your account [_2].\nClientDisabledAccount\tYou cannot transfer to account [_1], as their account is disabled.\nClientDocumentsExpired\tYou cannot transfer to account [_1], as their verification documents have expired.\nClientFrozen\tWe are completing your request. Please give us a few more seconds.\nClientInsufficientBalance\tSorry, you cannot withdraw. Your account balance is [_3] [_2].\nClientMissing\tThe client is missing, please provide a valid client.\nClientRequirementsMissing\tYou cannot transfer to account [_1], as their profile is incomplete.\nClientsAreTheSame\tPayment agent transfers are not allowed within the same account.\nClosedMarket\tTransfers are unavailable on weekends. Please try again anytime from Monday to Friday.\nConnectionError\tCannot create an order for [_1].\nContractCreationFailure\tContract's stake amount is more than the maximum purchase price.\nContractIDRequestFailure\tFailed to retrieve broker code from client login ID.\nContractUpdateError\tN/A\nContractUpdateFailure\tContract ID is required to update contract.\nContractUpdateHistoryError\tSorry, an error occurred while processing your request.\nCopyTradingNotAllowed\tTrader does not allow copy trading.\nCryptoAccount\tAccount currency is set to cryptocurrency. Any change is not allowed.\nCryptoLimitAgeVerified\tWithdrawal request of [_1] [_2] exceeds cumulative limit for transactions. Please verify your identity.\nCryptoWithdrawalBalanceExceeded\tWithdrawal amount of [_1] [_2] exceeds your account balance of [_3] [_2].\nCryptoWithdrawalError\tError validating your transaction, please try again in a few minutes.\nCryptoWithdrawalLimitExceeded\tWithdrawal amount of [_1] [_2] exceeds your account withdrawal limit of [_3] [_2].\nCryptoWithdrawalMaxReached\tYou have reached the maximum withdrawal limit of [_1] [_2]. Please authenticate your account to make unlimited withdrawals.\nCryptoWithdrawalNotAuthenticated\tPlease authenticate your account to proceed with withdrawals.\nCurrencyChangeIsNotPossible\tChange of currency is not allowed for a trading account.\nCurrencyConflict\tCurrency provided is different from account currency.\nCurrencyMismatch\tPlease ensure your trading account currency is the same as your wallet account currency.\nCurrencyNotAllowed\tThe provided currency [_1] is not selectable at the moment. Currency GBP is disabled for signup for maltainvest.\nCurrencyNotApplicable\tThe provided currency [_1] is not applicable for this account.\nCurrencyNotLegalLandingCompany\tCurrency provided is not valid for your account.\nCurrencyShouldMatch\tCurrency provided is different from account currency.\nCurrencySuspended\tTransfers between [_1] and [_2] are currently unavailable. Please try again later.\nDECEASED\tThe document's owner is deceased.\nDOB_MISMATCH\tThe date of birth retrieved from your document doesn't match your profile.\nDOCUMENT_REJECTED\tDocument was rejected by the provider.\nDemoTopupBalance\tWe cannot complete your request. You can only ask for additional virtual funds if your demo account balance falls below [_1] [_2].\nDemoTopupThrottle\tWe are processing your top-up request. Please wait for your virtual funds to be credited.\nDepositAttempted\tChange of currency is not allowed after the first deposit attempt.\nDepositLimitExceeded\tDeposit exceeds [_1] limit [_2]. Aggregated deposit over period [_3]. Current amount [_4].\nDeprecated\tThis API is deprecated.\nDifferentFiatCurrencies\tAccount transfers are not available for accounts with different currencies. Fiat->fiat not allowed - correct error code.\nDisabledAccount\tYou cannot perform this action, as your account [_1] is currently disabled.\nDisabledClient\tPlease log in.\nDocumentMissing\tThe document is missing.\nDocumentNumberMissing\tThe field document number is required. Document number is missing.\nDocumentTypeMissing\tThe field document type is required. Document type is missing.\nDocumentsExpired\tYour identity documents have expired. Visit your account profile to submit your valid documents and unlock your cashier.\nDuplicateAccount\tSorry, an account already exists with those details. Only one real money account is allowed per client.\nDuplicateCurrency\tPlease note that you are limited to only one [_1] account.\nDuplicateVirtualWallet\tSorry, a virtual wallet account already exists.\nDuplicateWallet\tSorry, a wallet already exists with those details.\nEMPTY_RESPONSE\tThe verification status is not available. There is no response from provider.\nEMPTY_STATUS\tThe verification status was empty, rejected for lack of information.\nEXPIRED\tThe document's validity has been expired.\nEmptySourceCurrency\tPlease deposit to your account.\nExchangeRatesNotAvailable\tExchange rates are not currently available.\nExchangeRatesUnavailable\tSorry, transfers are currently unavailable. Please try again later.\nExperimental\tThis currency is temporarily suspended. Please select another currency to proceed.\nExpiredDocument\tThe document you used appears to be expired. Please use a valid document.\nFailedToGenerateOTP\tCould not generate OTP. Please try again in a few minutes. No attempts left.\nFinancialAccountExists\tYou already have a financial money account. Please switch accounts to trade financial products.\nFinancialAccountMissing\tYour existing account does not allow MT5 trading. To open an MT5 account, please upgrade to a financial account.\nFinancialAssessmentRequired\tPlease complete your financial assessment. MF client has to complete financial assessment irrespective of risk classification.\nFinancialRiskNotApproved\tFinancial Risk approval is required.\nGamingAccountMissing\tYour existing account does not allow MT5 trading. To open an MT5 account, please upgrade to a gaming account.\nGeneral\tA connection error happened while we were completing your request. Please try again later.\nGetContractDetails\tCannot create contract\nGetProposalFailure\tCannot create contract\nHaveOpenPositions\tPlease withdraw your account balance and close all your open positions before revoking MT5 account manager permissions.\nHighRiskNotAuthenticated\tPlease authenticate your account.\nIDVResultMissing\tThe IDV result is missing.\nINFORMATION_LACK\tThe verification is passed but the personal info is not available to compare.\nINVALID_WEBHOOK_REQUEST\tThe verification status is not available, provider says: Invalid webhook request.\nIdentityVerificationDisabled\tThis verification method is currently unavailable. IDV is currently disabled.\nIdentityVerificationDisallowed\tThis method of verification is not allowed. Please try another method. Client not allowed to upload data.\nIncompatibleClientLoginidClientFrom\tYou can only transfer from the current authorized client's account. VRTC token cannot perform transfer for VRW account.\nIncompatibleCurrencyType\tPlease provide valid currency.\nIncompatibleLandingCompanies\tTransfers between accounts are not available for your account.\nIncompleteFinancialAssessment\tThe financial assessment is not complete. Financial assessment should be complete.\nInsufficientAccountDetails\tPlease provide complete details for your account. It should return error if client does not accept risk.\nInternalCashierError\tSorry, cashier is temporarily unavailable. Please try again later.\nInternalClient\tThis feature is not allowed for internal clients.\nInternalServerError\tSorry, an error occurred while processing your request.\nInvalidAccount\tSorry, account opening is unavailable. InvalidAccount (used to be Invalid Jersey postcode).\nInvalidAccountRegion\tSorry, account opening is unavailable in your region. It should return error code if wallet is unavailable in country of residence.\nInvalidAccountType\tWe can't find this account. Please check the details and try again. Invalid account_type entered on dry run.\nInvalidAmount\tInvalid amount. Amount provided cannot have more than [_1] decimal places.\nInvalidAppID\tYour [_1] is invalid. 'app_id'.\nInvalidArrayValue\tValid array was expected.\nInvalidBrand\tBrand is invalid.\nInvalidCitizenship\tSorry, our service is not available for your country of citizenship. Correct error code for invalid citizenship for maltainvest.\nInvalidCompanyInput\tInput parameter 'company' is not supported for the account type.\nInvalidCryptoCurrency\tThe provided currency [_1] is not a valid cryptocurrency.\nInvalidDateFirstContact\tDate first contact is invalid.\nInvalidDateOfBirth\tDate of birth is invalid.\nInvalidDocumentAdditional\tIt looks like the document details you entered are invalid. Please check and try again. Invalid document number.\nInvalidDocumentNumber\tIt looks like the document number you entered is invalid. Please check and try again. Invalid document number.\nInvalidDocumentType\tThe document type you entered isn't supported for the country you selected. Document type does not exist.\nInvalidLandingCompany\tInvalid landing company - [_1].\nInvalidLoginid\tWe can't find this login ID in our database. Please check the details and try again. Error code for mt5_get_settings wrong login.\nInvalidLoginidFrom\tYou are not allowed to transfer from this account.\nInvalidLoginidTo\tYou are not allowed to transfer to this account.\nInvalidMarketType\tWe can't find this account market type. Please check the details and try again.\nInvalidMaxAmount\tThe maximum amount for deposits is [_1] [_2]. Please adjust your amount. Invalid max amount hit.\nInvalidMinAmount\tThe minimum amount for transfers is [_1] [_2]. Please adjust your amount. Invalid min amount hit.\nInvalidNumericValue\tThe numeric value is invalid.\nInvalidOTP\tThe OTP is not valid.\nInvalidOfferings\tCorrect error code.\nInvalidParameters\tPA parameters are valid from paymentagent_withdraw only.\nInvalidPassword\tForgot your password? Please reset your password. Error code for mt5_password_check wrong password.\nInvalidPhone\tPlease enter a valid phone number, including the country code (e.g. +15417541234). Phone number could not contain alphabetic characters.\nInvalidPlaceOfBirth\tPlease enter a valid place of birth.\nInvalidPlatform\tWe can't find this account platform. Please check the details and try again.\nInvalidPrice\tInvalid price. Price provided cannot have more than [_1] decimal places.\nInvalidProductOffering\tWe can't find this product offering. Please check the details and try again.\nInvalidResidence\tSorry, our service is not available for your country of residence. Returns correct response when CPA selected in non-DIEL Country.\nInvalidSellContractProposal\tUnknown contract sell proposal.\nInvalidServerInput\tInput parameter 'server' is not supported for the account type.\nInvalidStartEnd\tStart time [_1] must be before end time [_2].\nInvalidState\tSorry, the provided state is not valid for your country of residence. Correct error code if address state doesn't match the country of residence.\nInvalidStringValue\tThis field must contain at least one alphabetic character.\nInvalidStyle\tStyle [_1] invalid.\nInvalidSubAccountType\tWe can't find this account. Please check the details and try again. Invalid mt5_account_type entered on dry run.\nInvalidSymbol\tSymbol [_1] invalid.\nInvalidTradingAccount\tSorry, we couldn't find your trading account.\nInvalidTradingPlatformPasswordFormat\tPlease use [_1] to reset your password. Your password must be 8 to 16 characters long. It must include lowercase, uppercase letters, numbers, and special characters.\nInvalidUser\tYour User ID appears to be invalid. If user not found, it should return error.\nInvalidWalletAccount\tSorry, we couldn't find your wallet account.\nInvalidtoBuy\tInvalid to Buy.\nIssuingCountryMissing\tThe field issuing country is required. Issuing country is missing.\nLimitOrderAmountTooHigh\tN/A.\nMALFORMED_JSON\tThe verification status is not available, provider says: Malformed JSON.\nMYAFFRuntimeError\tError in response structure.\nMarketIsClosed\tThis market is presently closed.\nMaxWithdrawalIsLessThanMin\tThe requested maximum amount must be greater than the minimum amount.\nMigrationAlreadyFinished\tWallet migration is already finished.\nMigrationAlreadyInProgress\tWallet migration is already in progress.\nMigrationNotFailed\tMigration is not in failed state.\nMigrationSuspended\tWallet migration is not available.\nMinWithdrawalIsNegative\tThe requested minimum amount must be greater than zero.\nMissingAmount\tPlease enter the amount you want to transfer.\nMissingContractId\tContract ID is required to cancel contract.\nMissingID\tYour login ID is missing. Please check the details and try again.\nMissingRequiredParams\tTarget currency is required.\nMissingSignupDetails\tYour profile appears to be incomplete. Please update your personal details to continue.\nMockResponseNotFound\tCannot find mock RPC response for method.\nMultiplierNotAllowed\tUp to 100 tokens are allowed.\nNAME_MISMATCH\tThe name retrieved from your document doesn't match your profile.\nNEEDS_TECHNICAL_INVESTIGATION\tThe verification status is not available, provider says: Needs Technical Investigation.\nNeedBothSecret\tNeed both secret question and secret answer.\nNewAccountLimitReached\tYou have created all accounts available to you. Correct error code.\nNewAccountPOAFailed\tFailed to create account due to failed Proof of Address with status: [_1].\nNoAccountCurrency\tPlease set the currency for your existing account. Correct error code when currency not set.\nNoAccountDetails\tWe are retrieving your MT5 details. Please give us a few more seconds.\nNoAttemptsLeft\tPlease wait for some time before requesting another link.\nNoAuthNeeded\tYou don't need to authenticate your account at this time.\nNoBalanceVerifyMail\tWithdrawal isn't possible because you have no funds in your [_1] account.\nNoConnection\tN/A.\nNoCurrencySet\tPlease set the currency of your account.\nNoExchangeRates\tSorry, transfers are currently unavailable. Please try again later. Transfer from suspended currency not allowed - correct error code.\nNoManagerAccountWithdraw\tWithdrawals from MT5 manager accounts are not possible. Please choose another payment method.\nNoMaxTurnoverLimit\tPlease set your 30-day turnover limit in our self-exclusion facilities to access the cashier.\nNoMoney\tYour withdrawal is unsuccessful. Please make sure you have enough funds in your account.\nNoRealtimeQuotes\tRealtime quotes not available for [_1].\nNoResidence\tPlease set your country of residence.\nNoSubmissionLeft\tYou've reached the maximum number of attempts for verifying your proof of identity with this method. No submission left occurred.\nNoSymbolProvided\tPlease provide an underlying symbol.\nNoTaxInformation\tTax-related information is mandatory for legal and regulatory requirements. Please provide your latest tax information.\nNoTransferFee\tTransfers are currently unavailable between [_1] and [_2]. Please use a different currency or try again later.\nNoWithdrawalOrTradingStatus\tYou cannot perform this action, as your account is withdrawal locked.\nNotAgeVerified\tPlease verify your identity. CR client with no POI and no POA gets error code NotAuthenticated from paymentagent_create.\nNotAuthenticated\tPlease authenticate your account. CR client with no POA gets error code NotAuthenticated from paymentagent_create.\nNotAuthorized\tYour account needs to be authenticated to perform payment agent transfers.\nNotFound\tN/A.\nNotSupportedCountry\tThe country you selected isn't supported. Not supported country.\nOfferingsValidationError\tcorrect error code\nOfferingsValidationFailure\tcorrect error code\nOpenP2POrders\tYou cannot change account currency while you have open P2P orders.\nOrderCreationError\tThis feature is only available for accounts with crypto as currency.\nOutdatedDocuments\tYour proof of address document is outdated. Visit your account profile to submit your valid documents and unlock your cashier.\nPACashierLockedWithdraw\tYou cannot perform the withdrawal to account [_1], as the payment agent's cashier is locked.\nPACommisionWithdrawalLimit\tThe amount you entered exceeds your commission balance. You may withdraw up to [_1] [_2].\nPACurrencyMismatch\tYou cannot perform this action, as [_1] is not the default account currency for payment agent [_2].\nPACurrencyMismatchWithdraw\tYou cannot perform this action, as [_1] is not default currency for payment agent account [_2].\nPADepositsWithdrawalLimit\tAs some of your previous deposits were made via a payment agent, the maximum you can withdraw is [_1] [_2].\nPADepositsWithdrawalZero\tAs your previous deposits were made via a payment agent, you can only withdraw via a payment agent.\nPADisabledAccountWithdraw\tYou cannot perform the withdrawal to account [_1], as the payment agent's account is disabled.\nPADocumentsExpiredWithdraw\tYou cannot perform withdrawal to account [_1], as payment agent's verification documents have expired.\nPAP2PDepositsWithdrawalLimit\tAs some of your previous deposits were made via P2P and payment agents, the maximum you can withdraw is [_1] [_2].\nPAP2PDepositsWithdrawalZero\tAs your previous deposits were made via P2P and a payment agent, you can only withdraw via those methods.\nPASameAccountWithdrawal\tYou cannot withdraw funds to the same account.\nPATransferClientFailure\tYou cannot transfer to account [_1].\nPAUnwelcomeStatusWithdraw\tWe cannot transfer to account [_1]. Please select another payment agent.\nPAWithdrawalDifferentBrokers\tPayment agent withdrawals are not allowed for specified accounts.\nPOAVerificationFailed\tProof of Address verification failed. Withdrawal operation suspended.\nPROMO8\tN/A\nPROVIDER_UNAVAILABLE\tThe verification status is not available, provider says: Provider Unavailable.\nPasswordError\tThat password is incorrect. Please try again.\nPasswordReset\tPlease reset your password to continue. error code for 6th bad password\nPaymentValidationError\tAn error occurred while processing your request. Please try again later.\nPaymentsSuspended\tPayments are currently unavailable. Please try again later.\nPermission Denied\tYou can not perform the phone number verification while impersonating an account\nPhoneNumberTaken\tThe phone number is not available. the phone number is not available.\nPhoneNumberVerificationSuspended\tPhone Number Verification is temporarily suspended suspended!\nPoBoxInAddress\tP.O. Box is not accepted in address.\nPotentialFraud\tPlease authenticate your account.\nPriceMoved\tprice moved error\nProfessionalAlreadySubmitted\tYou already requested professional status.\nProfessionalNotAllowed\tProfessional status is not applicable to your account.\nProofRequirementError\tProof of Identity or Address requirements not met. Operation rejected.\nREJECTED_BY_PROVIDER\tThe document was rejected by the Provider.\nRETRY_MECHANISM\tThe document's verification is waiting for the provider.\nRateLimitExceeded\tPermission denied.\nRealAccountMissing\tYou are on a virtual account. To open an MT5 account, please upgrade to a real account. Real account missing\nRequiredFieldMissing\tThis field is required.\nResidentSelfDeclarationRequired\tResident Self Declaration required for country. It should return error: ResidentSelfDeclarationRequired\nSameAccountNotAllowed\tAccount transfers are not available within same account.\nSameAsInvestorPassword\tThe new password is the same as your investor password. Please take a different password.\nSameAsMainPassword\tThe new password is the same as your main password. Please take a different password.\nSelfExclusion\tYou have chosen to exclude yourself from trading on our website until [_1]. If you are unable to place a trade or deposit after your self-exclusion period, please contact us via live chat. If password is weak it should return error\nSelfExclusionLimitExceeded\tThis deposit will cause your account balance to exceed your limit of 1000 USD. To proceed with this deposit, please adjust your self exclusion settings.\nSellExpiredError\tThere was an error processing the request.\nSetExistingAccountCurrency\tPlease set your account currency. correct error code.\nStreamingNotAllowed\tStreaming for this symbol is not available due to license restrictions.\nSuccessRegister\tError in response structure\nSuspendedlogin\tThis email address is invalid.\nSwitchAccount\tThis account does not allow MT5 trading. Please log in to the correct account.\nSystemMaintenance\tSorry, cashier is temporarily unavailable due to system maintenance.\nSystemMaintenanceCrypto\tSorry, crypto cashier is temporarily unavailable due to system maintenance.\nSystemMaintenanceDepositOutage\tDeposits are temporarily unavailable for [_1]. Please try later.\nSystemMaintenanceWithdrawalOutage\tWithdrawals are temporarily unavailable for [_1]. Please try later.\nTIMEOUT\tThe verification status is not available, provider says: Timeout.\nTINDetailInvalid\tThe provided Tax Identification Number is invalid. Please try again.\nTINDetailsMandatory\tWe require your tax information for regulatory purposes. Please fill in your tax information. should complete tax details\nTaxInformationCleared\tTax information cannot be removed once it has been set.\nTesting\tN/A\nThrottle\tIt looks like you have already made the request. Please try again later.\nTimeout\tN/A\nTooManyDecimalPlaces\tOnly [_1] decimal places are allowed.\nTooManyTokens\tUp to 100 tokens are allowed.\nTradingPlatformError\tSorry, an error occurred. Please try again later. bad params\nTradingPlatformInvalidAccount\tThis [_1] account is not available for your account. Has correct error code for duplicate account\nTransferBetweenAccountsError\tTransfers between accounts are not available for your account. error code is TransferBetweenAccountsError\nTransferBetweenDifferentCurrencies\tYour account currencies need to be the same. Please choose accounts with matching currencies and try again.\nTransferBlocked\tTransfers are not allowed for these accounts.\nTransferBlockedClientIsVirtual\tThe authorized account cannot be used to perform transfers. virtual account -> MT5 demo transfer error code\nTransferBlockedLegacy\tTransfers are not allowed for these accounts.\nTransferBlockedTradingAccounts\tTransfers are not allowed for these accounts.\nTransferBlockedWalletDeposit\tTransfers are not allowed for these accounts. cannot transfer crw -> PA client\nTransferBlockedWalletNotLinked\tTransfers are not allowed for these accounts. unlinked account error code\nTransferBlockedWalletWithdrawal\tTransfers are not allowed for these accounts. cannot transfer p2p -> crw\nTransferCurrencyMismatch\tCurrency provided is different from account currency.\nTransferInvalidAmount\tPlease provide valid amount.\nTransferSetCurrency\tPlease set the currency for your existing account [_1].\nTransferSuspended\tTransfers between fiat and crypto accounts are currently unavailable. Please try again later.\nTransferToNonPaSibling\tYou are not allowed to transfer to this account. Transferring from a payment agent to non-pa sibling is not allowed.\nTransferToOtherPA\tYou are not allowed to transfer to other payment agents.\nUNAVAILABLE_ISSUER\tThe verification status is not available, provider says: Issuer Unavailable.\nUNAVAILABLE_MICROSERVICE\tThe verification status is not available, provider says: Microservice unavailable.\nUNAVAILABLE_STATUS\tThe verification status is not available, provider says: N/A.\nUNDERAGE\tYou're under legal age.\nUNEXPECTED_ERROR\tThe verification status is not available, provider says: Unexpected Error.\nUnderageBlocked\tThe document you used appears to be from an underage individual. Please use a valid document. The document has been underage blocked.\nUnrecognizedEvent\tNo such category or event. Please check the provided value.\nUnwelcomeAccount\tWe are unable to do that because your account has been restricted. If you need help, let us know.\nUnwelcomeStatus\tWe are unable to transfer to [_1] because that account has been restricted.\nUploadDenied\terror code is correct\nUserIsNotEligibleForMigration\tYour account is not ready for wallet migration.\nUserServiceError\tinvalid auth_token\nVERIFICATION_STARTED\tThe document's verification has started.\nValueOutOfRange\tIt must be between [_1] and [_2].\nVirtualAccount\tThis is a virtual-money account. Please switch to a real-money account to access cashier.\nVirtualNotAllowed\tThis feature is not available to virtual accounts. Virtual not allowed\nWalletAccountsNotAllowed\tTransfer between wallet accounts is not allowed.\nWalletMigrationInprogress\tThis may take up to 2 minutes. During this time, you will not be able to deposit, withdraw, transfer, and add new accounts.\nWalletSignupUnavailable\tNew wallet accounts are not available in your country. wallet signup unavailable error code\nWithdrawalLocked\tYou cannot perform this action, as your account is withdrawal locked.\nWithdrawalLockedStatus\tYou cannot perform this action, as your account is withdrawal locked. Correct error code\nWrongAmount\tPlease enter a valid amount to transfer.\nWrongLoginID\tLogin ID ([_1]) does not exist.\naccount_opening_reason\tYour account opening reason cannot be changed.\nage_validation.minimum_accepted_age\tYour age in the document you provided appears to be below 18 years. We're only allowed to offer our services to clients above 18 years old, so we'll need to close your account. If you have a balance in your account, contact us via live chat and we'll help to withdraw your funds before your account is closed.\nalready_expired => {message\tExpiration date cannot be less than or equal to current date.\ncitizen\tYour citizenship cannot be changed.\ncompromised_document\tYour document failed our verification checks.\ndata_comparison.date_of_birth\tThe date of birth on your document doesn't match your profile.\ndata_comparison.date_of_expiry\tYour document has expired.\ndata_comparison.document_numbers\tYour document appears to be invalid.\ndata_comparison.document_type\tYour document appears to be invalid.\ndata_comparison.first_name\tThe name on your document doesn't match your profile.\ndata_comparison.issuing_country\tYour document appears to be invalid.\ndata_comparison.last_name\tThe name on your document doesn't match your profile.\ndate_of_birth\tYour date of birth cannot be changed.\ndescription\tDP2P is Deriv's peer-to-peer deposit and withdrawal service\nduplicate email\tYour provided email address is already in use by another Login ID. According to our terms and conditions, you may only register once through our site. Correct error code\nduplicate name DOB\tSorry, it looks like you already have a real money account with us. Only one real money account is allowed for each client.\nduplicated_document\tWe're unable to verify the document you provided as it was already submitted.\nemail unverified\tYour email address is unverified. It should return error if email unverified\nend_date\tPlease enter end date.\nfirst_name\tYour first name cannot be changed.\ninsufficient score\tUnfortunately your answers to the questions above indicate that you do not have sufficient financial resources or trading experience to be eligible to open a trading account at this time.\ninvalid\tSorry, account opening is unavailable. Exception thrown for client creation.\ninvalid residence\tSorry, our service is not available for your country of residence. gb is not allowed to sign up\ninvalid_exp_date => {message\tInvalid expiration date\ninvalid_proof_of_ownership_id => {message\tThe proof of ownership id provided is not valid.\nlast_name\tYour last name cannot be changed.\nmarket => { name => 'forex', display_name\tForex\nmessage_to_client\tThis account is already phone number verified\nmissing_doc_id => {message\tDocument ID is required.\nmissing_exp_date => {message\tExpiration date is required.\nmissing_issuing_country => {message\tIssuing country is mandatory for proof of identity\nmissing_proof_of_ownership_details => {message\tYou must specify the proof of ownership details.\nmissing_proof_of_ownership_id => {message\tYou must specify the proof of ownership id.\nno residence\tYour account has no country of residence.\nplace_of_birth\tYour place of birth cannot be changed.\npoa_pending\tPOA document is already uploaded and pending for review\npoi_pending\tPOI documents are already uploaded and pending for review\npricing error\tUnable to price the contract.\nsalutation\tYour salutation cannot be changed.\nsecret_answer\tYour secret answer cannot be changed.\nsecret_question\tYour secret question cannot be changed.\nselfie\tWe're unable to verify the selfie you provided as it does not match the required criteria. Please provide a photo that closely resembles the document photo provided.\nstart_date\tPlease enter start date.\nsubject\tYour new trading password request\nsystem_maintenance\tSorry, cashier is temporarily unavailable due to system maintenance.\ntax_identification_number\tYour tax identification number cannot be changed.\ntax_residence\tYour tax residence cannot be changed.\ntitle\tPhone number verification\ntoo young\tSorry, you are too young to open an account.\nMT5\nError Code\tDescription\nExpiredDocumentsMT5\tYour identity documents have expired. Visit your account profile to submit your valid documents and create your MT5 Financial STP account.\nIncompatibleMt5ToMt5\tTransfer between two MT5 accounts is not allowed.\nIncorrectMT5PasswordFormat\tYour password must be 8 to 16 characters long. It must include lowercase, uppercase letters, numbers, and special characters.\nInvalidMT5Account\tSorry, we couldn't find your MT5 account.\nInvalidMT5Group\tThis MT5 account has an invalid Landing Company. Permission denied.\nMT5APISuspendedError\tMT5 is currently unavailable. Please try again later.\nMT5AccountCreationThrottle\tWe're unable to add another MT5 account right now. Please try again in a minute.\nMT5AccountExisting\tChange of currency is not allowed due to an existing MT5 real account.\nMT5AccountInaccessible\tThe following MT5 account(s) are temporarily inaccessible: [_1]. Please try again later.\nMT5AccountInactive\tYour MT5 account is inactive. Please contact us for more information.\nMT5AccountLocked\tYour MT5 account is locked. Please contact us for more information.\nMT5AccountMigrationSuspended\tFailed to migrate account. [_1] Account for migration not found.\nMT5CreateUserError\tAn error occurred while creating your account. Please check your information and try again. Has correct error code for duplicate account.\nMT5DEMOAPISuspendedError\tMT5 is currently unavailable. Please try again later.\nMT5DepositError\terror code is MT5DepositError\nMT5DepositLocked\tYou cannot make a deposit because your MT5 account is disabled. Please contact our Customer Support team.\nMT5DepositSuspended\tDeposits are currently unavailable. Please try again later.\nMT5Duplicate\tAn account already exists with the information you provided. If you've forgotten your username or password, please contact us.\nMT5GetGroupError\tN/A\nMT5GetUserError\tN/A\nMT5InvalidAccount\tAn invalid MT5 account ID was provided.\nMT5KYCDepositLocked\tYou cannot make a deposit because your MT5 account identity verification requirements are not met. Please contact our Customer Support team.\nMT5KYCWithdrawalLocked\tYou cannot make a withdrawal because your MT5 account identity verification requirements are not met. Please contact our Customer Support team.\nMT5NotAllowed\tMT5 [_1] account is not available in your country yet. Only svg, malta, maltainvest clients allowed.\nMT5PasswordChangeError\tYou've used this password before. Please create a different one.\nMT5PasswordEmailLikenessError\tYou cannot use your email address as your password.\nMT5REALAPISuspendedError\tMT5 is currently unavailable. Please try again later.\nMT5REALDepositSuspended\tDeposits are currently unavailable. Please try again later.\nMT5REALWithdrawalSuspended\tWithdrawals are currently unavailable. Please try again later.\nMT5SamePassword\tPlease use different passwords for your investor and main accounts.\nMT5Suspended\tMT5 account management is currently suspended.\nMT5SwapFreeNotAllowed\tMT5 swap-free [_1] account is not available in your country yet.\nMT5TransferSuspension\tWe are still processing your transfer. Please try again later.\nMT5TransfersLocked\tIt looks like your account is locked for MT5 transfers. Please contact us for more information.\nMT5WithdrawalError\terror code is MT5WithdrawalError\nMT5WithdrawalSuspended\tWithdrawals are currently unavailable. Please try again later.\nMT5ZeroSpreadNotAllowed\tMT5 Zero Spread [_1] account is not available in your country yet.\nPoBoxAddressMT5\tPhysical address is required to create an MT5 account. Please contact our Customer Support team.\nP2P\nError Code\tMessage\nActivePaymentMethodRequired\tAt least one active payment method is required.\nAdvertContactInfoRequired\tPlease provide your contact details.\nAdvertCounterpartyIneligible\tYou do not meet the advertiser's requirements for placing an order on this advert.\nAdvertFixedRateNotAllowed\tFixed rate adverts are not available at this time.\nAdvertFloatRateNotAllowed\tFloating rate adverts are not available at this time.\nAdvertInfoMissingParam\tAn advert ID must be provided when not subscribing. Error for no id or subscribe.\nAdvertIsDisabled\tThis ad is currently unavailable. Please choose another ad or check back later.\nAdvertMaxExceeded\tYou've reached the maximum ad limit. Please deactivate some ads.\nAdvertMaxExceededSameType\tYou've reached the maximum of [_1] active ads for this currency pair and order type. Please delete an ad to place a new one.\nAdvertNoPaymentMethod\tThis advert has no payment methods. Please add at least one before activating it.\nAdvertNotFound\tWe can't find the ad. Please review the details or try another ad. Get info for non-existent advert.\nAdvertOwnerNotApproved\tThis advertiser has not been approved yet. Please choose another advertiser.\nAdvertPaymentInfoRequired\tPlease provide your payment details.\nAdvertPaymentMethodNamesNotAllowed\tPayment method names cannot be provided for sell ads. Please provide saved payment methods.\nAdvertPaymentMethodParam\tPayment method field cannot be combined with other payment methods.\nAdvertPaymentMethodRequired\tPlease add a payment method to this ad.\nAdvertPaymentMethodsNotAllowed\tSaved payment methods cannot be provided for buy ads. Please provide payment method names.\nAdvertSameLimits\tPlease change the minimum and/or maximum order limit for this ad. The range between these limits must not overlap with another active ad you created for this currency pair and order type.\nAdvertiserBlocked\tYou cannot place an order on the advert, because you have blocked the advertiser.\nAdvertiserCannotListAds\tYou cannot list adverts because you've not been approved as an advertiser yet.\nAdvertiserCreateChatError\tAn error occurred (chat user not created). Please try again later.\nAdvertiserNameRequired\tPlease provide your name. Cannot update the advertiser name to blank.\nAdvertiserNameTaken\tThat nickname is taken. Pick another.\nAdvertiserNotApproved\tBefore you can post an ad, we need to verify your identity. Please complete your identity verification at Deriv.com. Cannot update the advertiser information when advertiser is not approved.\nAdvertiserNotApprovedForBlock\tYou can't block anyone because you haven't verified your identity yet.\nAdvertiserNotApprovedForOrder\tBefore you can place an order, we need to verify your identity. Please complete your identity verification at Deriv.com.\nAdvertiserNotEligibleForLimitUpgrade\tYou are not eligible for P2P buy and sell limit upgrade. Please contact our Customer Support team for more information.\nAdvertiserNotFound\tWe can't find the advertiser. Please review the details and try again. Get info of non-existent advertiser.\nAdvertiserNotFoundForChat\tYou may not chat until you have registered as a Deriv P2P advertiser.\nAdvertiserNotFoundForChatToken\tThis account is not registered as a Deriv P2P advertiser.\nAdvertiserNotFoundForOrder\tYou are using an old version of this app, which no longer supports placing orders. Please upgrade your app to place your order.\nAdvertiserNotListed\tThis advertiser is currently inactive. Please check again later or choose another advertiser.\nAdvertiserNotRegistered\tPlease apply to be an advertiser. If you've already applied, please contact our Customer Support team. Update non-existent advertiser.\nAdvertiserRelationSelf\tYou may not assign your own Advertiser ID as favourite or blocked.\nAdvertiserScheduleAvailability\tThe advertiser's scheduled availability does not allow placing an order on this ad at this time.\nAlreadyInProgress\tOrder is in progress. Changes are no longer allowed.\nAlreadyRegistered\tYou are already an advertiser.\nAuthenticationRequired\tSubmit your proof of address and identity before signing up for Deriv P2P.\nBelowPerOrderLimit\tMinimum ad order amount is [_1] [_2]. Please adjust the value.\nBlockAndFavouriteNotAllowedTogether\tYou can't block and follow the same advertiser(s): [_1].\nBlockAndUnblockNotAllowedTogether\tYou can't block and unblock the same advertiser(s): [_1].\nBlockTradeDisabled\tBlock trading is currently unavailable. Please try again later.\nBlockTradeNotAllowed\tYou're not eligible for block trading. Contact our Customer Support team for more information.\nBlockingFavouriteAdvertiserNotAllowed\tYou can't block these advertiser(s) because you are currently following them: [_1].\nChatTokenError\tAn error occurred when issuing a new token. Please try again later.\nClientDailyOrderLimitExceeded\tYou may only place [_1] orders every 24 hours. Please try again later. Client daily order limit exceeded.\nClientScheduleAvailability\tYour scheduled availability does not allow placing an order on this ad at this time.\nCounterpartyNotAdvertiserForChat\tChat is not possible because the other client is not yet registered as a Deriv P2P advertiser.\nCreateChatError\tAn error occurred when creating the chat. Please try again later.\nCrossBorderNotAllowed\tOnly exchanges in your local currency are supported. Contact us via live chat to learn more.\nDuplicateAdvert\tYou have another active ad with the same rate for this currency pair and order type. Please set a different rate.\nDuplicatePaymentMethod\tYou have a payment method with the same values for [_1].\nEscrowNotFound\tAdvertising for this currency is currently unavailable. Please contact our Customer Support team or try again later.\nExcessiveVerificationFailures\tIt looks like you've made too many attempts to confirm this order. Please try again after [_1] minutes.\nExcessiveVerificationRequests\tPlease wait for [_1] seconds before requesting another email.\nFavouriteAndUnfavouriteNotAllowedTogether\tYou can't follow and unfollow the same advertiser(s): [_1].\nFavouritingBlockedAdvertiserNotAllowed\tYou can't follow these advertiser(s) because you had already blocked them : [_1].\nFloatRatePrecision\tFloating rate cannot be provided with more than 2 decimal places of precision.\nFloatRateTooBig\tThe allowed range for floating rate is -[_1]% to +[_1]%.\nInvalidAdvertForOrder\tIt is not possible to place an order on this advert. Please choose another advert.\nInvalidAdvertOwn\tYou cannot place an order for your own ad.\nInvalidAdvertiserID\tInvalid Advertiser ID provided.\nInvalidAdvertiserIDsForBlocking\tYou can't block these advertiser(s) because you had already blocked them: [_1].\nInvalidAdvertiserIDsForFavouriting\tYou can't follow these advertiser(s) because you had already followed them: [_1].\nInvalidAdvertiserIDsForUnblocking\tYou can't unblock these advertiser(s) because you didn't block them before: [_1].\nInvalidAdvertiserIDsForUnfavouriting\tYou can't unfollow these advertiser(s) because you didn't follow them before: [_1].\nInvalidCountry\t[_1] is not a valid country code or a country where P2P is offered.\nInvalidDateFormat\tInvalid date format.\nInvalidFinalStateForDispute\tThis order is complete and can no longer be disputed. Invalid final state for dispute.\nInvalidListLimit\tPlease enter a limit value that's greater than 0.\nInvalidListOffset\tThe offset value cannot be negative. Please enter 0 or higher.\nInvalidLocalCurrency\tInvalid currency provided.\nInvalidMinMaxAmount\tThe minimum order amount should be less than or equal to the maximum order amount. Please adjust the value. min_order_amount cannot be greater than max_order_amount.\nInvalidOrderCurrency\tPlease select an ad that matches your currency.\nInvalidOrderExpiryPeriod\tInvalid order expiry period provided.\nInvalidOtherPaymentMethodName\t[_1] is similar to an available P2P payment method. Try entering a different payment method.\nInvalidPaymentMethod\tInvalid payment method provided: [_1].\nInvalidPaymentMethodField\t[_1] is not a valid field for payment method [_2].\nInvalidPaymentMethods\tInvalid payment methods provided.\nInvalidReasonForBuyer\tThis reason doesn't apply to your case. Please choose another reason. Invalid reason for buyer.\nInvalidReasonForSeller\tThis reason doesn't apply to your case. Please choose another reason. Invalid reason for seller.\nInvalidScheduleInterval\tThe value [_1] is invalid. Period start and end values must be multiples of [_2].\nInvalidScheduleRange\tThe end time of a period must be greater than the start time.\nInvalidStateForDispute\tPlease wait until the order expires to raise a dispute. Invalid state for dispute.\nInvalidVerificationToken\tThe link that you used appears to be invalid. Please check and try again.\nMaxPerOrderExceeded\tMaximum ad order amount is [_1] [_2]. Please adjust the value.\nMaximumExceeded\tMaximum ad limit is [_1] [_2]. Please adjust the value.\nMaximumExceededNewAmount\tMaximum ad limit is [_1] [_4], and [_2] [_4] has been used by existing orders, so the new amount will be [_3] [_4]. Please adjust the value.\nMinPriceTooSmall\tMinimum order amount is [_1]. Please adjust the value. Got error if min price is 0.\nMissingPaymentMethodField\t[_1] is a required field for payment method [_2]. Please provide a value.\nNoCountry\tPlease set your country of residence.\nNoCurrency\tPlease set your account currency. error code is NoCurrency.\nNoLocalCurrency\tWe cannot recognise your local currency. Please contact our Customer Support team.\nNotLoggedIn\tPlease log in to continue.\nOpenOrdersDeleteAdvert\tYou have open orders for this ad. Complete all open orders before deleting this ad.\nOrderAlreadyCancelled\tYou've already cancelled this order.\nOrderAlreadyConfirmedBuyer\tYou've already confirmed this order. Please wait for the seller to confirm.\nOrderAlreadyConfirmedTimedout\tYou've already confirmed this order, but the seller has not. Please contact them for more information. If you need help, contact our Customer Support team.\nOrderAlreadyExists\tYou have an active order for this ad. Please complete the order before making a new one.\nOrderChatAlreadyCreated\tA chat for this order has already been created.\nOrderConfirmCompleted\tThis order has already been completed.\nOrderContactInfoRequired\tPlease provide your contact details.\nOrderCreateFailAmount\tAn order cannot be created for this amount at this time. Please try adjusting the amount.\nOrderCreateFailAmountAdvertiser\tAn order cannot be created for this amount at this time. Please try adjusting the amount.\nOrderCreateFailClient\tThere was a problem in placing this order. [_1]\nOrderCreateFailClientBalance\tThe amount of the order exceeds your funds available in Deriv P2P.\nOrderCreateFailRateChanged\tThe rate of the advert has changed. Please try creating your order again.\nOrderCreateFailRateRequired\tPlease provide a rate for this order.\nOrderCreateFailRateSlippage\tWe're unable to create your order because the market rate has moved too much. Please try creating your order again.\nOrderEmailVerificationRequired\tWe've sent you an email. Click the confirmation link in the email to complete this order.\nOrderMaximumExceeded\tMaximum ad amount is [_1] [_2]. Please adjust the value.\nOrderMaximumTempExceeded\tMaximum order amount at this time is [_1] [_2]. Please adjust the value or try after 00:00 GMT.\nOrderMinimumNotMet\tMinimum ad amount is [_1] [_2]. Please adjust the value.\nOrderNoEditExpired\tThis order has expired and cannot be changed.\nOrderNotConfirmedPending\tPlease wait for the buyer to confirm the order.\nOrderNotFound\tThis order does not exist. Confirm non-existent order.\nOrderPaymentContactInfoNotAllowed\tBuy orders do not require payment and contact information.\nOrderPaymentInfoRequired\tPlease provide your payment details.\nOrderRefundInvalid\tThis order has already been cancelled.\nOrderReviewExists\tYou have already reviewed this order.\nOrderReviewNotComplete\tThis order can only be reviewed after it has been successfully completed.\nOrderReviewPeriodExpired\tIt's not possible to give a review now. Reviews can only be placed within [_1] hours of successfully completing the order.\nOrderReviewStatusInvalid\tThis order cannot be reviewed. It was not successfully completed.\nOrderUnderDispute\tThis order is under dispute. Order is already under dispute.\nP2PDepositsTransfer\tAs some of your previous deposits were made via P2P, the maximum you can transfer is [_1] [_2].\nP2PDepositsTransferZero\tAs your previous deposits were made via P2P, transfers are not possible from this account.\nP2PDepositsWithdrawal\tAs some of your previous deposits were made via P2P, the maximum you can withdraw is [_1] [_2].\nP2PDepositsWithdrawalZero\tAs your previous deposits were made via P2P, you can only withdraw via P2P.\nP2PDisabled\tDeriv P2P is currently unavailable. Please check back later. error code is P2PDisabled.\nP2PError\tSorry, an error occurred.\nP2PLimitUpgradeFailed\tThere was a problem in upgrading your limit. Please try again later or contact our Customer Support team for more information.\nP2PRestrictedCountry\tDeriv P2P is unavailable in your country. Please provide a different account opening reason.\nPaymentMethodInUse\tThis payment method is in use by multiple ads and/or orders, and cannot be deleted or deactivated.\nPaymentMethodInfoAlreadyInUse\tThe [_1] details you entered are already in use by another advertiser. Use different details or contact us via live chat for further assistance.\nPaymentMethodNotFound\tThe payment method ID does not exist.\nPaymentMethodNotInAd\t[_1] is not available as a payment method for this advert.\nPaymentMethodRemoveActiveOrders\tYou have active orders on this ad, so you must keep these payment methods: [_1].\nPaymentMethodRemoveActiveOrdersDB\tYou cannot remove payment methods used by active orders on this advert.\nPaymentMethodUsedByAd\tYou can't delete this payment method because it's in use by these sell ad(s): [_1].\nPaymentMethodUsedByOrder\tThis payment method is in use by the following order(s): [_1]. Please wait until it completes.\nPaymentMethodsDisabled\tThe payment method feature is not available on P2P yet. Please check back later.\nRateTooBig\tAd rate should not be more than [_1]. Please adjust the value.\nRateTooSmall\tAd rate should not be less than [_1]. Please adjust the value.\nRestrictedCountry\tDeriv P2P is unavailable in your country. correct error code.\nRestrictedCurrency\t[_1] is not supported at the moment. error code is RestrictedCurrency.\nServiceNotAllowedForPA\tThis service is not available for payment agents. Payment agents cannot create orders.\nTemporaryBar\tYou've been temporarily barred from using our services due to multiple cancellation attempts. Try again after [_1] GMT.\nUnavailableOnVirtual\tDeriv P2P is unavailable on demo accounts. Please switch to your real account. error code is UnavailableOnVirtual.\nAccount\nError Code\tMessage\nAPITokenError\t[_1] is required.', 'new_token\nASK_FIX_DETAILS\tMT5 is currently unavailable. Please try again later.\nAccountHasPendingConditions\tPlease close open positions and withdraw all funds from your [_1] account(s). Also, notice if you have pending withdrawal requests, wait for those to be finalized first before proceeding.\nAccountTypeMissing\tN/A\nCrypto2CryptoTransferOverLimit\tNot verified account should not pass the crypto to crypto limit\nCrypto2FiatTransferOverLimit\tNot verified account should not pass the crypto to fiat limit\nFiat2CryptoTransferOverLimit\tNot verified account should not pass the fiat to crypto limit\nInputValidationFailed\tYour password must be 8 to 25 characters long. It must include lowercase and uppercase letters, and numbers.\nInvalidChecksum\tThe security hash used in your request appears to be invalid.\nInvalidDemoAccountType\tN/A\nInvalidEmail\tThis email is already in use. Please use a different email.\nInvalidRequestParams\tInvalid request parameters.\nInvalidToken\tThe token is invalid, requires 'admin' scope.\nPasswordChangeError\tWe were unable to change your password due to an unexpected error. Please try again.\nPasswordResetError\tWe were unable to reset your password due to an unexpected error. Please try again.\nPermissionDenied\tWallet account creation is currently suspended.\nRealToVirtualNotAllowed\tTransfer between real and virtual accounts is not allowed. MT5 demo -> real account transfer error code\nReasonNotSpecified\tPlease specify the reasons for closing your accounts.\nSetSelfExclusionError\tPlease provide at least one self-exclusion setting.\nSocialBased\tSorry, your account does not allow passwords because you use social media to log in.\nSuspendedDueToLoad\tThe system is currently under heavy load, and this call has been suspended temporarily. Please try again in a few minutes.\nTokenDeleted\tNo token found\nUnknownLandingCompany\tUnknown landing company.\nUserAlreadyVerified\tUser is already email verified.\nTransfersBlocked\tTransfers are not allowed for these accounts.\nApplication\nError Code\tMessage\nApplicantError\tCannot create applicant for [_1].\nMissingPersonalDetails\tUpdate your personal details.\nServiceUnavailable\tThe requested service is unavailable at the moment.\nTokenGeneratingError\tCannot generate token for [_1].\nUnsupportedCountry\tCountry\ndata_validation.date_of_birth\tSome details on your document appear to be invalid, missing, or unclear.\ndata_validation.document_expiration\tYour document has expired.\ndata_validation.document_numbers\tSome details in your document appear to be invalid, missing, or unclear.\ndata_validation.expiry_date\tSome details on your document appear to be invalid, missing, or unclear.\ndata_validation.mrz\tSome details on your document appear to be invalid, missing, or unclear.\ndata_validation.no_document_numbers\tThe serial number of your document couldn't be verified.\nimage_integrity.colour_picture\tYour document appears to be in black and white. Please upload a colour photo of your document.\nimage_integrity.conclusive_document_quality\tYour document appears to be invalid.\nimage_integrity.conclusive_document_quality.abnormal_document_features\tSome details on your document appear to be invalid, missing, or unclear.\nimage_integrity.conclusive_document_quality.corner_removed\tYour document appears to be damaged or cropped.\nimage_integrity.conclusive_document_quality.digital_document\tYour document appears to be a digital document.\nimage_integrity.conclusive_document_quality.missing_back\tThe back of your document appears to be missing. Please include both sides of your identity document.\nimage_integrity.conclusive_document_quality.obscured_data_points\tSome details on your document appear to be invalid, missing, or unclear.\nimage_integrity.conclusive_document_quality.obscured_security_features\tSome details on your document appear to be invalid, missing, or unclear.\nimage_integrity.conclusive_document_quality.punctured_document\tYour document appears to be damaged or cropped.\nimage_integrity.conclusive_document_quality.watermarks_digital_text_overlay\tYour document contains markings or text that should not be on your document.\nimage_integrity.image_quality\tThe image quality of your document is too low. Please provide a hi-res photo of your identity document.\nimage_integrity.image_quality.blurred_photo\tWe were unable to verify your selfie because it's not clear. Please take a clearer photo and try again.\nimage_integrity.image_quality.covered_photo\tWe're unable to verify the document you provided because some details appear to be missing. Please try again.\nimage_integrity.image_quality.cut_off_document\tWe're unable to verify the document you provided because it appears to be damaged. Please try again.\nimage_integrity.image_quality.damaged_document\tWe're unable to verify the document you provided because it appears to be damaged. Please try again.\nimage_integrity.image_quality.dark_photo\tWe were unable to verify your selfie because it's not clear. Please take a clearer photo and try again.\nimage_integrity.image_quality.glare_on_photo\tWe were unable to verify your selfie because it's not clear. Please take a clearer photo and try again.\nimage_integrity.image_quality.incorrect_side\tThe front of your document appears to be missing. Please provide both sides of your identity document.\nimage_integrity.image_quality.no_document_in_image\tWe're unable to verify the document you provided because it appears to be a blank image. Please try again.\nimage_integrity.image_quality.other_photo_issue\tWe're unable to verify the document you provided because some details appear to be missing. Please try again.\nimage_integrity.image_quality.two_documents_uploaded\tThe document you provided appears to be two different types. Please try again.\nimage_integrity.supported_document\tThe document you provided is not supported for your country. Please provide a supported document.\nvisual_authenticity.digital_tampering\tYour document appears to be invalid.\nvisual_authenticity.face_detection\tYour document appears to be invalid.\nvisual_authenticity.fonts\tYour document appears to be invalid.\nvisual_authenticity.original_document_present\tYour document appears to be a scanned copy that contains markings or text that shouldn't be on your document.\nvisual_authenticity.original_document_present.document_on_printed_paper\tYour document appears to be a printed copy.\nvisual_authenticity.original_document_present.photo_of_screen\tYour document appears to be a photo of a device screen.\nvisual_authenticity.original_document_present.scan\tWe're unable to verify the document you provided because it contains markings or text that should not be there.\nvisual_authenticity.original_document_present.screenshot\tYour document appears to be a screenshot.\nvisual_authenticity.picture_face_integrity\tYour document appears to be invalid.\nvisual_authenticity.security_features\tYour document appears to be invalid.\nvisual_authenticity.template\tYour document appears to be invalid.\nCashier\nError Code\tMessage\nASK_AUTHENTICATE\tPlease authenticate your account. MF client needs to be fully authenticated\nASK_CURRENCY\tClient has no default currency\nASK_EMAIL_VERIFY\tVerify your withdraw request. Withdrawal needs verification token\nASK_FINANCIAL_RISK_APPROVAL\tFinancial risk approval is required\nASK_TIN_INFORMATION\tTax information is required for malatainvest\nAmountExceedsBalance\tWithdrawal amount [100.01 USD] exceeds client balance [100.00 USD].\nAmountExceedsUnfrozenBalance\tWithdrawal is 320.00 USD but balance 320.00 includes frozen bonus 20.00.\nCashierForwardError\tVerify your withdraw request.\nCryptoConnectionError\tAn error occurred while processing your request. Please try again later.\nCryptoInvalidCurrency\tThe provided currency [_1] is not a valid cryptocurrency.\nCryptoMissingRequiredParameter\tMissing or invalid required parameter.\nInvalidCashierCurrency\tThis feature is unavailable for the provided currency: [_1]\nInvalidCurrency\tReturns correct error code if currency is invalid\nInvalidRequest\tCrypto cashier is unavailable for the provided currency.\nJustificationAlreadySubmitted\tYou cannot submit another payment agent withdrawal justification within 24 hours. Error code for repeat submission\nNoBalance\tThis transaction cannot be done because your\nNotAuthentorized\t\nTopupDemoError\t\nUnhandledError\tAn error that is not handled here.\nWithdrawalLimit\tWithdrawal is 20.00 USD but balance 20.00 includes frozen bonus 20.00.\nWithdrawalLimitReached\tYou\naccount_transfer\tCrypto cashier is unavailable for the provided currency.\nTrading\nError Code\tMessage\nCTIDGetFailed\tFailed to retrieve new or existing CTID.\nCopyTradingWrongCurrency\tYour account currency and trader currency must be same.\nCurrencyRequired\tPlease provide valid currency.\nCurrencyTypeNotAllowed\tThis currency is temporarily suspended. Please select another currency to proceed. error code is CurrencyTypeNotAllowed\nDifferentLandingCompanies\tTransfers between EU and non-EU accounts aren't allowed. You can only transfer funds between accounts under the same regulator.\nFinancialAssessmentMandatory\tPlease complete your financial assessment. should complete F.A.\nInvalidStakeLimit\tMin trade stake should be lower than max trade stake.\nInvalidTradeType\tInvalid trade type: [_1].\nMaximumAmountTransfers\tThe maximum amount of transfers is [_1] [_2] per day. Please try again tomorrow. limit applies to different account of same user\nMaximumTransfers\tYou can only perform up to [_1] transfers a day. Please try again tomorrow. Daily Transfer limit - correct error code\nNoAgeVerification\tYou haven't verified your age. Please contact us for more information. should be age verified\nNoOldPassword\tOld password cannot be provided until a trading password has been set. cannot provide old password yet\nOldPasswordError\tYou've used this password before. Please create a different one.\nOldPasswordRequired\tOld password cannot be empty.\nPasswordRequired\tA new password is required\nPlatformInvestorPasswordChangeError\t\nPlatformPasswordChangeError\tDue to a network issue, we\nPlatformPasswordChangeSuspended\tWe're unable to reset your trading password due to system maintenance. Please try again later.\nPlatformTransferAccountInvalid\tThe provided Deriv account ID is not valid. Non sibling cannot transfer\nPlatformTransferBlocked\tTransfers have been blocked on this account.\nPlatformTransferCurrencySuspended\t[_1] currency transfers are suspended.\nPlatformTransferDemoOnly\tBoth accounts must be demo accounts.\nPlatformTransferError\tThe transfer could not be completed: [_1] Insufficient balance\nPlatformTransferNoVirtual\tThis feature is not available for virtual accounts.\nPlatformTransferNocurrency\tPlease select your account currency first.\nPlatformTransferOauthTokenRequired\tThis request must be made using a connection authorized by the Deriv account involved in the transfer. non oauth token not allowed\nPlatformTransferRealOnly\tBoth accounts must be real accounts.\nPlatformTransferRealParams\tA Deriv account ID and amount must be provided for real accounts. from_account and amount needed for real account\nPlatformTransferSuspended\tTransfers are suspended for system maintenance. Please try later.\nPlatformTransferTemporarilyUnavailable\tTransfers between these accounts are temporarily unavailable. Please try later.\nPlatformTransferWalletOnly\tThis feature is only available for wallet accounts.\nTradingAccountCurrencyNotAllowed\tThis currency is not available. must use a valid currency\nTradingAccountNotAllowed\tThis trading platform account is not available in your country yet. only svg countries\nUserServiceFailed\tThere was a problem reading your user data.\nCTraderAccountCreateFailed\tThere was an error creating cTrader account. Please try again later.\nCTraderAccountCreationInProgress\tYour account creation is still in progress. Please wait for completion.\nCTraderAccountLinkFailed\tThere was an error linking created cTrader account. Please try again later.\nCTraderAccountNotFound\tNo cTrader accounts found.\nCTraderDemoTopFailed\tYour cTrader demo account could not be topped up at this time. Please try later.\nCTraderDemoTopupBalance\tWe cannot complete your request. You can only top up your cTrader demo account when the balance falls below [_1] [_2].\nCTraderDepositFailed\tThe required funds could not be deposited to your cTrader account. Please try a different account.\nCTraderDepositIncomplete\tThe deposit to your cTrader account did not complete. Please contact our Customer Support team.\nCTraderDepositSuspended\tcTrader deposit is currently suspended.\nCTraderExistingAccountGroupMissing\tExisting cTrader accounts missing group data.\nCTraderExistingAccountLimitExceeded\tMaximum allowed cTrader [_1] accounts per client exceeded. You can have up to [_2] cTrader accounts.\nCTraderGeneral\tThis service is currently unavailable. Please try again later.\nCTraderInsufficientBalance\tYour cTrader account balance is insufficient for this withdrawal.\nCTraderInvalidAccount\tAn invalid cTrader account ID was provided. Cannot transfer from real wallet to ctrader demo.\nCTraderInvalidAccountType\tAn invalid cTrader account type was provided for account creation.\nCTraderInvalidGroup\tcTrader invalid group provided.\nCTraderInvalidMarketType\tAn invalid cTrader market type was provided for account creation.\nCTraderNotAllowed\tcTrader account or landing company is not available in your country yet.\nCTraderServerSuspended\tThis feature is suspended for system maintenance. Please try later.\nCTraderSuspended\tcTrader account management is currently suspended.\nCTraderTransferCompleteError\tThe transfer completed successfully, but an error occurred when getting account details.\nCTraderUnsupportedCountry\tcTrader unsupported country code.\nCTraderWithdrawalFailed\tThe required funds could not be withdrawn from your cTrader account. Please try later or use a different account.\nCTraderWithdrawalIncomplete\tThe credit to your Deriv account did not complete. Please contact our Customer Support team.\nCTraderWithdrawalSuspended\tcTrader withdrawal is currently suspended.\nContractIsSold\tContract has expired.\nContractNotFound\tThis contract was not found among your open positions.\nInvalidContractUpdate\t\nInvalidUpdateArgument\tOnly a hash reference input is accepted.\nInvalidUpdateValue\tPlease enter a number or a null value.\nTooFrequentUpdate\tOnly one update per second is allowed.\nUpdate is not available\tUpdate of stop loss and take profit is not available at the moment.\nUpdateNotAllowed\tThis contract cannot be updated once you've made your purchase. This feature is not available for this contract type.\nUpdateStopLossNotAllowed\tYou may update your stop loss amount after deal cancellation has expired.\nUpdateTakeProfitNotAllowed\tYou may update your take profit amount after deal cancellation has expired.\naccumulator\tACCU is not supported.\nmultiplier\tMULTUP and MULTDOWN are not supported.\nDeriv X\nError Code\tMessage\nDXDemoTopFailed\tYour Deriv X demo account could not be topped up at this time. Please try later.\nDXDemoTopupBalance\tWe cannot complete your request. You can only top up your Deriv X demo account when the balance falls below [_1] [_2]. expected error for top up virtual\nDXDepositFailed\tThe required funds could not be withdrawn from your Deriv account. Please try a different account.\nDXDepositIncomplete\tThe deposit to your Deriv X account did not complete. Please contact our Customer Support team.\nDXExistingAccount\tYou already have Deriv X account of this type (account ID [_1]).[_2] error code for duplicate account.\nDXGeneral\tThis service is currently unavailable. Please try again later.\nDXInsufficientBalance\tYour Deriv X account balance is insufficient for this withdrawal.\nDXInvalidAccount\tAn invalid Deriv X account ID was provided. Cannot transfer from real wallet to dxtrade demo.\nDXInvalidMarketType\tAn invalid Deriv X market type was provided for [_1] account creation.\nDXNewAccountFailed\tThere was an error while creating your account. Please try again later.\nDXNoAccount\tYou do not have a Deriv X account on the provided server.\nDXNoServer\tServer must be provided for Deriv X service token.\nDXServerSuspended\tThis feature is suspended for system maintenance. Please try later. server suspended\nDXSuspended\tDeriv X account management is currently suspended. dxtrade suspended\nDXTokenGenerationFailed\tToken generation failed. Please try later.\nDXTradeAccountExisting\tChange of currency is not allowed due to an existing Deriv X real account.\nDXTransferCompleteError\tThe transfer completed successfully, but an error occurred when getting account details.\nDXWithdrawalFailed\tThe required funds could not be withdrawn from your Deriv X account. Please try later or use a different account.\nDXWithdrawalIncomplete\tThe credit to your Deriv account did not complete. Please contact our Customer Support team.\nDXtradeNoCurrency\tPlease provide a currency for the Deriv X account.\nIncompatibleDxtradeToDxtrade\tTransfer between two Deriv X accounts is not allowed.\nIncompatibleDxtradeToMt5\tYou are not allowed to transfer to this account.\nIncompatibleMt5ToDxtrade\tYou are not allowed to transfer to this account.\n\nUpdated 4 months ago\n\nDid this page help you?\nYes\nNo",
      "headings": [
        {
          "level": "h1",
          "text": "General"
        },
        {
          "level": "h1",
          "text": "MT5"
        },
        {
          "level": "h1",
          "text": "P2P"
        },
        {
          "level": "h1",
          "text": "Account"
        },
        {
          "level": "h1",
          "text": "Application"
        },
        {
          "level": "h1",
          "text": "Cashier"
        },
        {
          "level": "h1",
          "text": "Trading"
        },
        {
          "level": "h1",
          "text": "Deriv X"
        }
      ],
      "codeBlocks": [],
      "tables": [
        "<table><thead><tr><th>Error Code</th><th>Message</th></tr></thead><tbody><tr><td>AccountShouldBeReal</td><td>Only real accounts are allowed to open [_1] real accounts. Demo account cannot open real dxtrader.</td></tr><tr><td>AccountTypesMismatch</td><td>Transfer between real and virtual accounts is not allowed.</td></tr><tr><td>AccountWithDeposit</td><td>Change of currency is not allowed for an existing account with previous deposits.</td></tr><tr><td>AffiliateNotFound</td><td>N/A</td></tr><tr><td>AllowCopiersError</td><td>Copier can't be a trader.</td></tr><tr><td>AlreadyAgeVerified</td><td>Your age has already been verified.</td></tr><tr><td>AlreadyVerified</td><td>This account is already phone number verified.</td></tr><tr><td>AmountNotAllowed</td><td>The minimum amount for transfers is [_1] [_2] after conversion fees are deducted. Please adjust the amount.</td></tr><tr><td>AppGet</td><td>Not Found</td></tr><tr><td>AppRegister</td><td>Not Found</td></tr><tr><td>AppUpdate</td><td>N/A</td></tr><tr><td>AppropriatenessTestFailed</td><td>Failed to reach an acceptable trading experience score.</td></tr><tr><td>AuthenticateAccount</td><td>Please authenticate your [_1] account to proceed with the fund transfer.</td></tr><tr><td>AuthenticateAccountCreate</td><td>Please verify your [_1] account to proceed with account creation.</td></tr><tr><td>AuthorizationRequired</td><td>Please log in.</td></tr><tr><td>BadSession</td><td>The token you used is invalid in this session. Please get a new token and try again.</td></tr><tr><td>BalanceExceeded</td><td>This deposit will cause your account balance to exceed your account limit of 300000 USD.</td></tr><tr><td>BarrierValidationError</td><td>Barrier can only be up to [_1] decimal places.</td></tr><tr><td>BelowMinimumAge</td><td>Value of date of birth is below the minimum age required.</td></tr><tr><td>CannotChangeAccountDetails</td><td>You may not change these account details. Correct error code.</td></tr><tr><td>CannotChangeWallet</td><td>Sorry, your trading account is already linked to a wallet.</td></tr><tr><td>CannotGetOpenPositions</td><td>A connection error happened while we were completing your request. Please try again later.</td></tr><tr><td>CannotLinkVirtualAndReal</td><td>Please ensure your trading account type is the same as your wallet account type.</td></tr><tr><td>CannotLinkWallet</td><td>Sorry, we couldn't link your trading account to this wallet.</td></tr><tr><td>CashierLocked</td><td>Your account cashier is locked. Please contact us for more information. Correct error code for cashier locked.</td></tr><tr><td>CashierNotAllowed</td><td>Cashier deposits and withdrawals are not allowed on this account.</td></tr><tr><td>CashierRequirementsMissing</td><td>Your profile appears to be incomplete. Please update your personal details to continue.</td></tr><tr><td>ClaimedDocument</td><td>This document number was already submitted for a different account. Please contact us via live chat if you need help.</td></tr><tr><td>ClientCashierLocked</td><td>You cannot transfer to account [_1], as their cashier is locked.</td></tr><tr><td>ClientCurrencyMismatch</td><td>You cannot perform this action, as [_1] is not the default account currency for client [_2].</td></tr><tr><td>ClientCurrencyMismatchWithdraw</td><td>You cannot perform this action, as [_1] is not the default currency for your account [_2].</td></tr><tr><td>ClientDisabledAccount</td><td>You cannot transfer to account [_1], as their account is disabled.</td></tr><tr><td>ClientDocumentsExpired</td><td>You cannot transfer to account [_1], as their verification documents have expired.</td></tr><tr><td>ClientFrozen</td><td>We are completing your request. Please give us a few more seconds.</td></tr><tr><td>ClientInsufficientBalance</td><td>Sorry, you cannot withdraw. Your account balance is [_3] [_2].</td></tr><tr><td>ClientMissing</td><td>The client is missing, please provide a valid client.</td></tr><tr><td>ClientRequirementsMissing</td><td>You cannot transfer to account [_1], as their profile is incomplete.</td></tr><tr><td>ClientsAreTheSame</td><td>Payment agent transfers are not allowed within the same account.</td></tr><tr><td>ClosedMarket</td><td>Transfers are unavailable on weekends. Please try again anytime from Monday to Friday.</td></tr><tr><td>ConnectionError</td><td>Cannot create an order for [_1].</td></tr><tr><td>ContractCreationFailure</td><td>Contract's stake amount is more than the maximum purchase price.</td></tr><tr><td>ContractIDRequestFailure</td><td>Failed to retrieve broker code from client login ID.</td></tr><tr><td>ContractUpdateError</td><td>N/A</td></tr><tr><td>ContractUpdateFailure</td><td>Contract ID is required to update contract.</td></tr><tr><td>ContractUpdateHistoryError</td><td>Sorry, an error occurred while processing your request.</td></tr><tr><td>CopyTradingNotAllowed</td><td>Trader does not allow copy trading.</td></tr><tr><td>CryptoAccount</td><td>Account currency is set to cryptocurrency. Any change is not allowed.</td></tr><tr><td>CryptoLimitAgeVerified</td><td>Withdrawal request of [_1] [_2] exceeds cumulative limit for transactions. Please verify your identity.</td></tr><tr><td>CryptoWithdrawalBalanceExceeded</td><td>Withdrawal amount of [_1] [_2] exceeds your account balance of [_3] [_2].</td></tr><tr><td>CryptoWithdrawalError</td><td>Error validating your transaction, please try again in a few minutes.</td></tr><tr><td>CryptoWithdrawalLimitExceeded</td><td>Withdrawal amount of [_1] [_2] exceeds your account withdrawal limit of [_3] [_2].</td></tr><tr><td>CryptoWithdrawalMaxReached</td><td>You have reached the maximum withdrawal limit of [_1] [_2]. Please authenticate your account to make unlimited withdrawals.</td></tr><tr><td>CryptoWithdrawalNotAuthenticated</td><td>Please authenticate your account to proceed with withdrawals.</td></tr><tr><td>CurrencyChangeIsNotPossible</td><td>Change of currency is not allowed for a trading account.</td></tr><tr><td>CurrencyConflict</td><td>Currency provided is different from account currency.</td></tr><tr><td>CurrencyMismatch</td><td>Please ensure your trading account currency is the same as your wallet account currency.</td></tr><tr><td>CurrencyNotAllowed</td><td>The provided currency [_1] is not selectable at the moment. Currency GBP is disabled for signup for maltainvest.</td></tr><tr><td>CurrencyNotApplicable</td><td>The provided currency [_1] is not applicable for this account.</td></tr><tr><td>CurrencyNotLegalLandingCompany</td><td>Currency provided is not valid for your account.</td></tr><tr><td>CurrencyShouldMatch</td><td>Currency provided is different from account currency.</td></tr><tr><td>CurrencySuspended</td><td>Transfers between [_1] and [_2] are currently unavailable. Please try again later.</td></tr><tr><td>DECEASED</td><td>The document's owner is deceased.</td></tr><tr><td>DOB_MISMATCH</td><td>The date of birth retrieved from your document doesn't match your profile.</td></tr><tr><td>DOCUMENT_REJECTED</td><td>Document was rejected by the provider.</td></tr><tr><td>DemoTopupBalance</td><td>We cannot complete your request. You can only ask for additional virtual funds if your demo account balance falls below [_1] [_2].</td></tr><tr><td>DemoTopupThrottle</td><td>We are processing your top-up request. Please wait for your virtual funds to be credited.</td></tr><tr><td>DepositAttempted</td><td>Change of currency is not allowed after the first deposit attempt.</td></tr><tr><td>DepositLimitExceeded</td><td>Deposit exceeds [_1] limit [_2]. Aggregated deposit over period [_3]. Current amount [_4].</td></tr><tr><td>Deprecated</td><td>This API is deprecated.</td></tr><tr><td>DifferentFiatCurrencies</td><td>Account transfers are not available for accounts with different currencies. Fiat-&gt;fiat not allowed - correct error code.</td></tr><tr><td>DisabledAccount</td><td>You cannot perform this action, as your account [_1] is currently disabled.</td></tr><tr><td>DisabledClient</td><td>Please log in.</td></tr><tr><td>DocumentMissing</td><td>The document is missing.</td></tr><tr><td>DocumentNumberMissing</td><td>The field document number is required. Document number is missing.</td></tr><tr><td>DocumentTypeMissing</td><td>The field document type is required. Document type is missing.</td></tr><tr><td>DocumentsExpired</td><td>Your identity documents have expired. Visit your account profile to submit your valid documents and unlock your cashier.</td></tr><tr><td>DuplicateAccount</td><td>Sorry, an account already exists with those details. Only one real money account is allowed per client.</td></tr><tr><td>DuplicateCurrency</td><td>Please note that you are limited to only one [_1] account.</td></tr><tr><td>DuplicateVirtualWallet</td><td>Sorry, a virtual wallet account already exists.</td></tr><tr><td>DuplicateWallet</td><td>Sorry, a wallet already exists with those details.</td></tr><tr><td>EMPTY_RESPONSE</td><td>The verification status is not available. There is no response from provider.</td></tr><tr><td>EMPTY_STATUS</td><td>The verification status was empty, rejected for lack of information.</td></tr><tr><td>EXPIRED</td><td>The document's validity has been expired.</td></tr><tr><td>EmptySourceCurrency</td><td>Please deposit to your account.</td></tr><tr><td>ExchangeRatesNotAvailable</td><td>Exchange rates are not currently available.</td></tr><tr><td>ExchangeRatesUnavailable</td><td>Sorry, transfers are currently unavailable. Please try again later.</td></tr><tr><td>Experimental</td><td>This currency is temporarily suspended. Please select another currency to proceed.</td></tr><tr><td>ExpiredDocument</td><td>The document you used appears to be expired. Please use a valid document.</td></tr><tr><td>FailedToGenerateOTP</td><td>Could not generate OTP. Please try again in a few minutes. No attempts left.</td></tr><tr><td>FinancialAccountExists</td><td>You already have a financial money account. Please switch accounts to trade financial products.</td></tr><tr><td>FinancialAccountMissing</td><td>Your existing account does not allow MT5 trading. To open an MT5 account, please upgrade to a financial account.</td></tr><tr><td>FinancialAssessmentRequired</td><td>Please complete your financial assessment. MF client has to complete financial assessment irrespective of risk classification.</td></tr><tr><td>FinancialRiskNotApproved</td><td>Financial Risk approval is required.</td></tr><tr><td>GamingAccountMissing</td><td>Your existing account does not allow MT5 trading. To open an MT5 account, please upgrade to a gaming account.</td></tr><tr><td>General</td><td>A connection error happened while we were completing your request. Please try again later.</td></tr><tr><td>GetContractDetails</td><td>Cannot create contract</td></tr><tr><td>GetProposalFailure</td><td>Cannot create contract</td></tr><tr><td>HaveOpenPositions</td><td>Please withdraw your account balance and close all your open positions before revoking MT5 account manager permissions.</td></tr><tr><td>HighRiskNotAuthenticated</td><td>Please authenticate your account.</td></tr><tr><td>IDVResultMissing</td><td>The IDV result is missing.</td></tr><tr><td>INFORMATION_LACK</td><td>The verification is passed but the personal info is not available to compare.</td></tr><tr><td>INVALID_WEBHOOK_REQUEST</td><td>The verification status is not available, provider says: Invalid webhook request.</td></tr><tr><td>IdentityVerificationDisabled</td><td>This verification method is currently unavailable. IDV is currently disabled.</td></tr><tr><td>IdentityVerificationDisallowed</td><td>This method of verification is not allowed. Please try another method. Client not allowed to upload data.</td></tr><tr><td>IncompatibleClientLoginidClientFrom</td><td>You can only transfer from the current authorized client's account. VRTC token cannot perform transfer for VRW account.</td></tr><tr><td>IncompatibleCurrencyType</td><td>Please provide valid currency.</td></tr><tr><td>IncompatibleLandingCompanies</td><td>Transfers between accounts are not available for your account.</td></tr><tr><td>IncompleteFinancialAssessment</td><td>The financial assessment is not complete. Financial assessment should be complete.</td></tr><tr><td>InsufficientAccountDetails</td><td>Please provide complete details for your account. It should return error if client does not accept risk.</td></tr><tr><td>InternalCashierError</td><td>Sorry, cashier is temporarily unavailable. Please try again later.</td></tr><tr><td>InternalClient</td><td>This feature is not allowed for internal clients.</td></tr><tr><td>InternalServerError</td><td>Sorry, an error occurred while processing your request.</td></tr><tr><td>InvalidAccount</td><td>Sorry, account opening is unavailable. InvalidAccount (used to be Invalid Jersey postcode).</td></tr><tr><td>InvalidAccountRegion</td><td>Sorry, account opening is unavailable in your region. It should return error code if wallet is unavailable in country of residence.</td></tr><tr><td>InvalidAccountType</td><td>We can't find this account. Please check the details and try again. Invalid account_type entered on dry run.</td></tr><tr><td>InvalidAmount</td><td>Invalid amount. Amount provided cannot have more than [_1] decimal places.</td></tr><tr><td>InvalidAppID</td><td>Your [_1] is invalid. 'app_id'.</td></tr><tr><td>InvalidArrayValue</td><td>Valid array was expected.</td></tr><tr><td>InvalidBrand</td><td>Brand is invalid.</td></tr><tr><td>InvalidCitizenship</td><td>Sorry, our service is not available for your country of citizenship. Correct error code for invalid citizenship for maltainvest.</td></tr><tr><td>InvalidCompanyInput</td><td>Input parameter 'company' is not supported for the account type.</td></tr><tr><td>InvalidCryptoCurrency</td><td>The provided currency [_1] is not a valid cryptocurrency.</td></tr><tr><td>InvalidDateFirstContact</td><td>Date first contact is invalid.</td></tr><tr><td>InvalidDateOfBirth</td><td>Date of birth is invalid.</td></tr><tr><td>InvalidDocumentAdditional</td><td>It looks like the document details you entered are invalid. Please check and try again. Invalid document number.</td></tr><tr><td>InvalidDocumentNumber</td><td>It looks like the document number you entered is invalid. Please check and try again. Invalid document number.</td></tr><tr><td>InvalidDocumentType</td><td>The document type you entered isn't supported for the country you selected. Document type does not exist.</td></tr><tr><td>InvalidLandingCompany</td><td>Invalid landing company - [_1].</td></tr><tr><td>InvalidLoginid</td><td>We can't find this login ID in our database. Please check the details and try again. Error code for mt5_get_settings wrong login.</td></tr><tr><td>InvalidLoginidFrom</td><td>You are not allowed to transfer from this account.</td></tr><tr><td>InvalidLoginidTo</td><td>You are not allowed to transfer to this account.</td></tr><tr><td>InvalidMarketType</td><td>We can't find this account market type. Please check the details and try again.</td></tr><tr><td>InvalidMaxAmount</td><td>The maximum amount for deposits is [_1] [_2]. Please adjust your amount. Invalid max amount hit.</td></tr><tr><td>InvalidMinAmount</td><td>The minimum amount for transfers is [_1] [_2]. Please adjust your amount. Invalid min amount hit.</td></tr><tr><td>InvalidNumericValue</td><td>The numeric value is invalid.</td></tr><tr><td>InvalidOTP</td><td>The OTP is not valid.</td></tr><tr><td>InvalidOfferings</td><td>Correct error code.</td></tr><tr><td>InvalidParameters</td><td>PA parameters are valid from paymentagent_withdraw only.</td></tr><tr><td>InvalidPassword</td><td>Forgot your password? Please reset your password. Error code for mt5_password_check wrong password.</td></tr><tr><td>InvalidPhone</td><td>Please enter a valid phone number, including the country code (e.g. +15417541234). Phone number could not contain alphabetic characters.</td></tr><tr><td>InvalidPlaceOfBirth</td><td>Please enter a valid place of birth.</td></tr><tr><td>InvalidPlatform</td><td>We can't find this account platform. Please check the details and try again.</td></tr><tr><td>InvalidPrice</td><td>Invalid price. Price provided cannot have more than [_1] decimal places.</td></tr><tr><td>InvalidProductOffering</td><td>We can't find this product offering. Please check the details and try again.</td></tr><tr><td>InvalidResidence</td><td>Sorry, our service is not available for your country of residence. Returns correct response when CPA selected in non-DIEL Country.</td></tr><tr><td>InvalidSellContractProposal</td><td>Unknown contract sell proposal.</td></tr><tr><td>InvalidServerInput</td><td>Input parameter 'server' is not supported for the account type.</td></tr><tr><td>InvalidStartEnd</td><td>Start time [_1] must be before end time [_2].</td></tr><tr><td>InvalidState</td><td>Sorry, the provided state is not valid for your country of residence. Correct error code if address state doesn't match the country of residence.</td></tr><tr><td>InvalidStringValue</td><td>This field must contain at least one alphabetic character.</td></tr><tr><td>InvalidStyle</td><td>Style [_1] invalid.</td></tr><tr><td>InvalidSubAccountType</td><td>We can't find this account. Please check the details and try again. Invalid mt5_account_type entered on dry run.</td></tr><tr><td>InvalidSymbol</td><td>Symbol [_1] invalid.</td></tr><tr><td>InvalidTradingAccount</td><td>Sorry, we couldn't find your trading account.</td></tr><tr><td>InvalidTradingPlatformPasswordFormat</td><td>Please use [_1] to reset your password. Your password must be 8 to 16 characters long. It must include lowercase, uppercase letters, numbers, and special characters.</td></tr><tr><td>InvalidUser</td><td>Your User ID appears to be invalid. If user not found, it should return error.</td></tr><tr><td>InvalidWalletAccount</td><td>Sorry, we couldn't find your wallet account.</td></tr><tr><td>InvalidtoBuy</td><td>Invalid to Buy.</td></tr><tr><td>IssuingCountryMissing</td><td>The field issuing country is required. Issuing country is missing.</td></tr><tr><td>LimitOrderAmountTooHigh</td><td>N/A.</td></tr><tr><td>MALFORMED_JSON</td><td>The verification status is not available, provider says: Malformed JSON.</td></tr><tr><td>MYAFFRuntimeError</td><td>Error in response structure.</td></tr><tr><td>MarketIsClosed</td><td>This market is presently closed.</td></tr><tr><td>MaxWithdrawalIsLessThanMin</td><td>The requested maximum amount must be greater than the minimum amount.</td></tr><tr><td>MigrationAlreadyFinished</td><td>Wallet migration is already finished.</td></tr><tr><td>MigrationAlreadyInProgress</td><td>Wallet migration is already in progress.</td></tr><tr><td>MigrationNotFailed</td><td>Migration is not in failed state.</td></tr><tr><td>MigrationSuspended</td><td>Wallet migration is not available.</td></tr><tr><td>MinWithdrawalIsNegative</td><td>The requested minimum amount must be greater than zero.</td></tr><tr><td>MissingAmount</td><td>Please enter the amount you want to transfer.</td></tr><tr><td>MissingContractId</td><td>Contract ID is required to cancel contract.</td></tr><tr><td>MissingID</td><td>Your login ID is missing. Please check the details and try again.</td></tr><tr><td>MissingRequiredParams</td><td>Target currency is required.</td></tr><tr><td>MissingSignupDetails</td><td>Your profile appears to be incomplete. Please update your personal details to continue.</td></tr><tr><td>MockResponseNotFound</td><td>Cannot find mock RPC response for method.</td></tr><tr><td>MultiplierNotAllowed</td><td>Up to 100 tokens are allowed.</td></tr><tr><td>NAME_MISMATCH</td><td>The name retrieved from your document doesn't match your profile.</td></tr><tr><td>NEEDS_TECHNICAL_INVESTIGATION</td><td>The verification status is not available, provider says: Needs Technical Investigation.</td></tr><tr><td>NeedBothSecret</td><td>Need both secret question and secret answer.</td></tr><tr><td>NewAccountLimitReached</td><td>You have created all accounts available to you. Correct error code.</td></tr><tr><td>NewAccountPOAFailed</td><td>Failed to create account due to failed Proof of Address with status: [_1].</td></tr><tr><td>NoAccountCurrency</td><td>Please set the currency for your existing account. Correct error code when currency not set.</td></tr><tr><td>NoAccountDetails</td><td>We are retrieving your MT5 details. Please give us a few more seconds.</td></tr><tr><td>NoAttemptsLeft</td><td>Please wait for some time before requesting another link.</td></tr><tr><td>NoAuthNeeded</td><td>You don't need to authenticate your account at this time.</td></tr><tr><td>NoBalanceVerifyMail</td><td>Withdrawal isn't possible because you have no funds in your [_1] account.</td></tr><tr><td>NoConnection</td><td>N/A.</td></tr><tr><td>NoCurrencySet</td><td>Please set the currency of your account.</td></tr><tr><td>NoExchangeRates</td><td>Sorry, transfers are currently unavailable. Please try again later. Transfer from suspended currency not allowed - correct error code.</td></tr><tr><td>NoManagerAccountWithdraw</td><td>Withdrawals from MT5 manager accounts are not possible. Please choose another payment method.</td></tr><tr><td>NoMaxTurnoverLimit</td><td>Please set your 30-day turnover limit in our self-exclusion facilities to access the cashier.</td></tr><tr><td>NoMoney</td><td>Your withdrawal is unsuccessful. Please make sure you have enough funds in your account.</td></tr><tr><td>NoRealtimeQuotes</td><td>Realtime quotes not available for [_1].</td></tr><tr><td>NoResidence</td><td>Please set your country of residence.</td></tr><tr><td>NoSubmissionLeft</td><td>You've reached the maximum number of attempts for verifying your proof of identity with this method. No submission left occurred.</td></tr><tr><td>NoSymbolProvided</td><td>Please provide an underlying symbol.</td></tr><tr><td>NoTaxInformation</td><td>Tax-related information is mandatory for legal and regulatory requirements. Please provide your latest tax information.</td></tr><tr><td>NoTransferFee</td><td>Transfers are currently unavailable between [_1] and [_2]. Please use a different currency or try again later.</td></tr><tr><td>NoWithdrawalOrTradingStatus</td><td>You cannot perform this action, as your account is withdrawal locked.</td></tr><tr><td>NotAgeVerified</td><td>Please verify your identity. CR client with no POI and no POA gets error code NotAuthenticated from paymentagent_create.</td></tr><tr><td>NotAuthenticated</td><td>Please authenticate your account. CR client with no POA gets error code NotAuthenticated from paymentagent_create.</td></tr><tr><td>NotAuthorized</td><td>Your account needs to be authenticated to perform payment agent transfers.</td></tr><tr><td>NotFound</td><td>N/A.</td></tr><tr><td>NotSupportedCountry</td><td>The country you selected isn't supported. Not supported country.</td></tr><tr><td>OfferingsValidationError</td><td>correct error code</td></tr><tr><td>OfferingsValidationFailure</td><td>correct error code</td></tr><tr><td>OpenP2POrders</td><td>You cannot change account currency while you have open P2P orders.</td></tr><tr><td>OrderCreationError</td><td>This feature is only available for accounts with crypto as currency.</td></tr><tr><td>OutdatedDocuments</td><td>Your proof of address document is outdated. Visit your account profile to submit your valid documents and unlock your cashier.</td></tr><tr><td>PACashierLockedWithdraw</td><td>You cannot perform the withdrawal to account [_1], as the payment agent's cashier is locked.</td></tr><tr><td>PACommisionWithdrawalLimit</td><td>The amount you entered exceeds your commission balance. You may withdraw up to [_1] [_2].</td></tr><tr><td>PACurrencyMismatch</td><td>You cannot perform this action, as [_1] is not the default account currency for payment agent [_2].</td></tr><tr><td>PACurrencyMismatchWithdraw</td><td>You cannot perform this action, as [_1] is not default currency for payment agent account [_2].</td></tr><tr><td>PADepositsWithdrawalLimit</td><td>As some of your previous deposits were made via a payment agent, the maximum you can withdraw is [_1] [_2].</td></tr><tr><td>PADepositsWithdrawalZero</td><td>As your previous deposits were made via a payment agent, you can only withdraw via a payment agent.</td></tr><tr><td>PADisabledAccountWithdraw</td><td>You cannot perform the withdrawal to account [_1], as the payment agent's account is disabled.</td></tr><tr><td>PADocumentsExpiredWithdraw</td><td>You cannot perform withdrawal to account [_1], as payment agent's verification documents have expired.</td></tr><tr><td>PAP2PDepositsWithdrawalLimit</td><td>As some of your previous deposits were made via P2P and payment agents, the maximum you can withdraw is [_1] [_2].</td></tr><tr><td>PAP2PDepositsWithdrawalZero</td><td>As your previous deposits were made via P2P and a payment agent, you can only withdraw via those methods.</td></tr><tr><td>PASameAccountWithdrawal</td><td>You cannot withdraw funds to the same account.</td></tr><tr><td>PATransferClientFailure</td><td>You cannot transfer to account [_1].</td></tr><tr><td>PAUnwelcomeStatusWithdraw</td><td>We cannot transfer to account [_1]. Please select another payment agent.</td></tr><tr><td>PAWithdrawalDifferentBrokers</td><td>Payment agent withdrawals are not allowed for specified accounts.</td></tr><tr><td>POAVerificationFailed</td><td>Proof of Address verification failed. Withdrawal operation suspended.</td></tr><tr><td>PROMO8</td><td>N/A</td></tr><tr><td>PROVIDER_UNAVAILABLE</td><td>The verification status is not available, provider says: Provider Unavailable.</td></tr><tr><td>PasswordError</td><td>That password is incorrect. Please try again.</td></tr><tr><td>PasswordReset</td><td>Please reset your password to continue. error code for 6th bad password</td></tr><tr><td>PaymentValidationError</td><td>An error occurred while processing your request. Please try again later.</td></tr><tr><td>PaymentsSuspended</td><td>Payments are currently unavailable. Please try again later.</td></tr><tr><td>Permission Denied</td><td>You can not perform the phone number verification while impersonating an account</td></tr><tr><td>PhoneNumberTaken</td><td>The phone number is not available. the phone number is not available.</td></tr><tr><td>PhoneNumberVerificationSuspended</td><td>Phone Number Verification is temporarily suspended suspended!</td></tr><tr><td>PoBoxInAddress</td><td>P.O. Box is not accepted in address.</td></tr><tr><td>PotentialFraud</td><td>Please authenticate your account.</td></tr><tr><td>PriceMoved</td><td>price moved error</td></tr><tr><td>ProfessionalAlreadySubmitted</td><td>You already requested professional status.</td></tr><tr><td>ProfessionalNotAllowed</td><td>Professional status is not applicable to your account.</td></tr><tr><td>ProofRequirementError</td><td>Proof of Identity or Address requirements not met. Operation rejected.</td></tr><tr><td>REJECTED_BY_PROVIDER</td><td>The document was rejected by the Provider.</td></tr><tr><td>RETRY_MECHANISM</td><td>The document's verification is waiting for the provider.</td></tr><tr><td>RateLimitExceeded</td><td>Permission denied.</td></tr><tr><td>RealAccountMissing</td><td>You are on a virtual account. To open an MT5 account, please upgrade to a real account. Real account missing</td></tr><tr><td>RequiredFieldMissing</td><td>This field is required.</td></tr><tr><td>ResidentSelfDeclarationRequired</td><td>Resident Self Declaration required for country. It should return error: ResidentSelfDeclarationRequired</td></tr><tr><td>SameAccountNotAllowed</td><td>Account transfers are not available within same account.</td></tr><tr><td>SameAsInvestorPassword</td><td>The new password is the same as your investor password. Please take a different password.</td></tr><tr><td>SameAsMainPassword</td><td>The new password is the same as your main password. Please take a different password.</td></tr><tr><td>SelfExclusion</td><td>You have chosen to exclude yourself from trading on our website until [_1]. If you are unable to place a trade or deposit after your self-exclusion period, please contact us via live chat. If password is weak it should return error</td></tr><tr><td>SelfExclusionLimitExceeded</td><td>This deposit will cause your account balance to exceed your limit of 1000 USD. To proceed with this deposit, please adjust your self exclusion settings.</td></tr><tr><td>SellExpiredError</td><td>There was an error processing the request.</td></tr><tr><td>SetExistingAccountCurrency</td><td>Please set your account currency. correct error code.</td></tr><tr><td>StreamingNotAllowed</td><td>Streaming for this symbol is not available due to license restrictions.</td></tr><tr><td>SuccessRegister</td><td>Error in response structure</td></tr><tr><td>Suspendedlogin</td><td>This email address is invalid.</td></tr><tr><td>SwitchAccount</td><td>This account does not allow MT5 trading. Please log in to the correct account.</td></tr><tr><td>SystemMaintenance</td><td>Sorry, cashier is temporarily unavailable due to system maintenance.</td></tr><tr><td>SystemMaintenanceCrypto</td><td>Sorry, crypto cashier is temporarily unavailable due to system maintenance.</td></tr><tr><td>SystemMaintenanceDepositOutage</td><td>Deposits are temporarily unavailable for [_1]. Please try later.</td></tr><tr><td>SystemMaintenanceWithdrawalOutage</td><td>Withdrawals are temporarily unavailable for [_1]. Please try later.</td></tr><tr><td>TIMEOUT</td><td>The verification status is not available, provider says: Timeout.</td></tr><tr><td>TINDetailInvalid</td><td>The provided Tax Identification Number is invalid. Please try again.</td></tr><tr><td>TINDetailsMandatory</td><td>We require your tax information for regulatory purposes. Please fill in your tax information. should complete tax details</td></tr><tr><td>TaxInformationCleared</td><td>Tax information cannot be removed once it has been set.</td></tr><tr><td>Testing</td><td>N/A</td></tr><tr><td>Throttle</td><td>It looks like you have already made the request. Please try again later.</td></tr><tr><td>Timeout</td><td>N/A</td></tr><tr><td>TooManyDecimalPlaces</td><td>Only [_1] decimal places are allowed.</td></tr><tr><td>TooManyTokens</td><td>Up to 100 tokens are allowed.</td></tr><tr><td>TradingPlatformError</td><td>Sorry, an error occurred. Please try again later. bad params</td></tr><tr><td>TradingPlatformInvalidAccount</td><td>This [_1] account is not available for your account. Has correct error code for duplicate account</td></tr><tr><td>TransferBetweenAccountsError</td><td>Transfers between accounts are not available for your account. error code is TransferBetweenAccountsError</td></tr><tr><td>TransferBetweenDifferentCurrencies</td><td>Your account currencies need to be the same. Please choose accounts with matching currencies and try again.</td></tr><tr><td>TransferBlocked</td><td>Transfers are not allowed for these accounts.</td></tr><tr><td>TransferBlockedClientIsVirtual</td><td>The authorized account cannot be used to perform transfers. virtual account -&gt; MT5 demo transfer error code</td></tr><tr><td>TransferBlockedLegacy</td><td>Transfers are not allowed for these accounts.</td></tr><tr><td>TransferBlockedTradingAccounts</td><td>Transfers are not allowed for these accounts.</td></tr><tr><td>TransferBlockedWalletDeposit</td><td>Transfers are not allowed for these accounts. cannot transfer crw -&gt; PA client</td></tr><tr><td>TransferBlockedWalletNotLinked</td><td>Transfers are not allowed for these accounts. unlinked account error code</td></tr><tr><td>TransferBlockedWalletWithdrawal</td><td>Transfers are not allowed for these accounts. cannot transfer p2p -&gt; crw</td></tr><tr><td>TransferCurrencyMismatch</td><td>Currency provided is different from account currency.</td></tr><tr><td>TransferInvalidAmount</td><td>Please provide valid amount.</td></tr><tr><td>TransferSetCurrency</td><td>Please set the currency for your existing account [_1].</td></tr><tr><td>TransferSuspended</td><td>Transfers between fiat and crypto accounts are currently unavailable. Please try again later.</td></tr><tr><td>TransferToNonPaSibling</td><td>You are not allowed to transfer to this account. Transferring from a payment agent to non-pa sibling is not allowed.</td></tr><tr><td>TransferToOtherPA</td><td>You are not allowed to transfer to other payment agents.</td></tr><tr><td>UNAVAILABLE_ISSUER</td><td>The verification status is not available, provider says: Issuer Unavailable.</td></tr><tr><td>UNAVAILABLE_MICROSERVICE</td><td>The verification status is not available, provider says: Microservice unavailable.</td></tr><tr><td>UNAVAILABLE_STATUS</td><td>The verification status is not available, provider says: N/A.</td></tr><tr><td>UNDERAGE</td><td>You're under legal age.</td></tr><tr><td>UNEXPECTED_ERROR</td><td>The verification status is not available, provider says: Unexpected Error.</td></tr><tr><td>UnderageBlocked</td><td>The document you used appears to be from an underage individual. Please use a valid document. The document has been underage blocked.</td></tr><tr><td>UnrecognizedEvent</td><td>No such category or event. Please check the provided value.</td></tr><tr><td>UnwelcomeAccount</td><td>We are unable to do that because your account has been restricted. If you need help, let us know.</td></tr><tr><td>UnwelcomeStatus</td><td>We are unable to transfer to [_1] because that account has been restricted.</td></tr><tr><td>UploadDenied</td><td>error code is correct</td></tr><tr><td>UserIsNotEligibleForMigration</td><td>Your account is not ready for wallet migration.</td></tr><tr><td>UserServiceError</td><td>invalid auth_token</td></tr><tr><td>VERIFICATION_STARTED</td><td>The document's verification has started.</td></tr><tr><td>ValueOutOfRange</td><td>It must be between [_1] and [_2].</td></tr><tr><td>VirtualAccount</td><td>This is a virtual-money account. Please switch to a real-money account to access cashier.</td></tr><tr><td>VirtualNotAllowed</td><td>This feature is not available to virtual accounts. Virtual not allowed</td></tr><tr><td>WalletAccountsNotAllowed</td><td>Transfer between wallet accounts is not allowed.</td></tr><tr><td>WalletMigrationInprogress</td><td>This may take up to 2 minutes. During this time, you will not be able to deposit, withdraw, transfer, and add new accounts.</td></tr><tr><td>WalletSignupUnavailable</td><td>New wallet accounts are not available in your country. wallet signup unavailable error code</td></tr><tr><td>WithdrawalLocked</td><td>You cannot perform this action, as your account is withdrawal locked.</td></tr><tr><td>WithdrawalLockedStatus</td><td>You cannot perform this action, as your account is withdrawal locked. Correct error code</td></tr><tr><td>WrongAmount</td><td>Please enter a valid amount to transfer.</td></tr><tr><td>WrongLoginID</td><td>Login ID ([_1]) does not exist.</td></tr><tr><td>account_opening_reason</td><td>Your account opening reason cannot be changed.</td></tr><tr><td>age_validation.minimum_accepted_age</td><td>Your age in the document you provided appears to be below 18 years. We're only allowed to offer our services to clients above 18 years old, so we'll need to close your account. If you have a balance in your account, contact us via live chat and we'll help to withdraw your funds before your account is closed.</td></tr><tr><td>already_expired =&gt; {message</td><td>Expiration date cannot be less than or equal to current date.</td></tr><tr><td>citizen</td><td>Your citizenship cannot be changed.</td></tr><tr><td>compromised_document</td><td>Your document failed our verification checks.</td></tr><tr><td>data_comparison.date_of_birth</td><td>The date of birth on your document doesn't match your profile.</td></tr><tr><td>data_comparison.date_of_expiry</td><td>Your document has expired.</td></tr><tr><td>data_comparison.document_numbers</td><td>Your document appears to be invalid.</td></tr><tr><td>data_comparison.document_type</td><td>Your document appears to be invalid.</td></tr><tr><td>data_comparison.first_name</td><td>The name on your document doesn't match your profile.</td></tr><tr><td>data_comparison.issuing_country</td><td>Your document appears to be invalid.</td></tr><tr><td>data_comparison.last_name</td><td>The name on your document doesn't match your profile.</td></tr><tr><td>date_of_birth</td><td>Your date of birth cannot be changed.</td></tr><tr><td>description</td><td>DP2P is Deriv's peer-to-peer deposit and withdrawal service</td></tr><tr><td>duplicate email</td><td>Your provided email address is already in use by another Login ID. According to our terms and conditions, you may only register once through our site. Correct error code</td></tr><tr><td>duplicate name DOB</td><td>Sorry, it looks like you already have a real money account with us. Only one real money account is allowed for each client.</td></tr><tr><td>duplicated_document</td><td>We're unable to verify the document you provided as it was already submitted.</td></tr><tr><td>email unverified</td><td>Your email address is unverified. It should return error if email unverified</td></tr><tr><td>end_date</td><td>Please enter end date.</td></tr><tr><td>first_name</td><td>Your first name cannot be changed.</td></tr><tr><td>insufficient score</td><td>Unfortunately your answers to the questions above indicate that you do not have sufficient financial resources or trading experience to be eligible to open a trading account at this time.</td></tr><tr><td>invalid</td><td>Sorry, account opening is unavailable. Exception thrown for client creation.</td></tr><tr><td>invalid residence</td><td>Sorry, our service is not available for your country of residence. gb is not allowed to sign up</td></tr><tr><td>invalid_exp_date =&gt; {message</td><td>Invalid expiration date</td></tr><tr><td>invalid_proof_of_ownership_id =&gt; {message</td><td>The proof of ownership id provided is not valid.</td></tr><tr><td>last_name</td><td>Your last name cannot be changed.</td></tr><tr><td>market =&gt; { name =&gt; 'forex', display_name</td><td>Forex</td></tr><tr><td>message_to_client</td><td>This account is already phone number verified</td></tr><tr><td>missing_doc_id =&gt; {message</td><td>Document ID is required.</td></tr><tr><td>missing_exp_date =&gt; {message</td><td>Expiration date is required.</td></tr><tr><td>missing_issuing_country =&gt; {message</td><td>Issuing country is mandatory for proof of identity</td></tr><tr><td>missing_proof_of_ownership_details =&gt; {message</td><td>You must specify the proof of ownership details.</td></tr><tr><td>missing_proof_of_ownership_id =&gt; {message</td><td>You must specify the proof of ownership id.</td></tr><tr><td>no residence</td><td>Your account has no country of residence.</td></tr><tr><td>place_of_birth</td><td>Your place of birth cannot be changed.</td></tr><tr><td>poa_pending</td><td>POA document is already uploaded and pending for review</td></tr><tr><td>poi_pending</td><td>POI documents are already uploaded and pending for review</td></tr><tr><td>pricing error</td><td>Unable to price the contract.</td></tr><tr><td>salutation</td><td>Your salutation cannot be changed.</td></tr><tr><td>secret_answer</td><td>Your secret answer cannot be changed.</td></tr><tr><td>secret_question</td><td>Your secret question cannot be changed.</td></tr><tr><td>selfie</td><td>We're unable to verify the selfie you provided as it does not match the required criteria. Please provide a photo that closely resembles the document photo provided.</td></tr><tr><td>start_date</td><td>Please enter start date.</td></tr><tr><td>subject</td><td>Your new trading password request</td></tr><tr><td>system_maintenance</td><td>Sorry, cashier is temporarily unavailable due to system maintenance.</td></tr><tr><td>tax_identification_number</td><td>Your tax identification number cannot be changed.</td></tr><tr><td>tax_residence</td><td>Your tax residence cannot be changed.</td></tr><tr><td>title</td><td>Phone number verification</td></tr><tr><td>too young</td><td>Sorry, you are too young to open an account.</td></tr></tbody></table>",
        "<table><thead><tr><th>Error Code</th><th>Description</th></tr></thead><tbody><tr><td>ExpiredDocumentsMT5</td><td>Your identity documents have expired. Visit your account profile to submit your valid documents and create your MT5 Financial STP account.</td></tr><tr><td>IncompatibleMt5ToMt5</td><td>Transfer between two MT5 accounts is not allowed.</td></tr><tr><td>IncorrectMT5PasswordFormat</td><td>Your password must be 8 to 16 characters long. It must include lowercase, uppercase letters, numbers, and special characters.</td></tr><tr><td>InvalidMT5Account</td><td>Sorry, we couldn't find your MT5 account.</td></tr><tr><td>InvalidMT5Group</td><td>This MT5 account has an invalid Landing Company. Permission denied.</td></tr><tr><td>MT5APISuspendedError</td><td>MT5 is currently unavailable. Please try again later.</td></tr><tr><td>MT5AccountCreationThrottle</td><td>We're unable to add another MT5 account right now. Please try again in a minute.</td></tr><tr><td>MT5AccountExisting</td><td>Change of currency is not allowed due to an existing MT5 real account.</td></tr><tr><td>MT5AccountInaccessible</td><td>The following MT5 account(s) are temporarily inaccessible: [_1]. Please try again later.</td></tr><tr><td>MT5AccountInactive</td><td>Your MT5 account is inactive. Please contact us for more information.</td></tr><tr><td>MT5AccountLocked</td><td>Your MT5 account is locked. Please contact us for more information.</td></tr><tr><td>MT5AccountMigrationSuspended</td><td>Failed to migrate account. [_1] Account for migration not found.</td></tr><tr><td>MT5CreateUserError</td><td>An error occurred while creating your account. Please check your information and try again. Has correct error code for duplicate account.</td></tr><tr><td>MT5DEMOAPISuspendedError</td><td>MT5 is currently unavailable. Please try again later.</td></tr><tr><td>MT5DepositError</td><td>error code is MT5DepositError</td></tr><tr><td>MT5DepositLocked</td><td>You cannot make a deposit because your MT5 account is disabled. Please contact our Customer Support team.</td></tr><tr><td>MT5DepositSuspended</td><td>Deposits are currently unavailable. Please try again later.</td></tr><tr><td>MT5Duplicate</td><td>An account already exists with the information you provided. If you've forgotten your username or password, please contact us.</td></tr><tr><td>MT5GetGroupError</td><td>N/A</td></tr><tr><td>MT5GetUserError</td><td>N/A</td></tr><tr><td>MT5InvalidAccount</td><td>An invalid MT5 account ID was provided.</td></tr><tr><td>MT5KYCDepositLocked</td><td>You cannot make a deposit because your MT5 account identity verification requirements are not met. Please contact our Customer Support team.</td></tr><tr><td>MT5KYCWithdrawalLocked</td><td>You cannot make a withdrawal because your MT5 account identity verification requirements are not met. Please contact our Customer Support team.</td></tr><tr><td>MT5NotAllowed</td><td>MT5 [_1] account is not available in your country yet. Only svg, malta, maltainvest clients allowed.</td></tr><tr><td>MT5PasswordChangeError</td><td>You've used this password before. Please create a different one.</td></tr><tr><td>MT5PasswordEmailLikenessError</td><td>You cannot use your email address as your password.</td></tr><tr><td>MT5REALAPISuspendedError</td><td>MT5 is currently unavailable. Please try again later.</td></tr><tr><td>MT5REALDepositSuspended</td><td>Deposits are currently unavailable. Please try again later.</td></tr><tr><td>MT5REALWithdrawalSuspended</td><td>Withdrawals are currently unavailable. Please try again later.</td></tr><tr><td>MT5SamePassword</td><td>Please use different passwords for your investor and main accounts.</td></tr><tr><td>MT5Suspended</td><td>MT5 account management is currently suspended.</td></tr><tr><td>MT5SwapFreeNotAllowed</td><td>MT5 swap-free [_1] account is not available in your country yet.</td></tr><tr><td>MT5TransferSuspension</td><td>We are still processing your transfer. Please try again later.</td></tr><tr><td>MT5TransfersLocked</td><td>It looks like your account is locked for MT5 transfers. Please contact us for more information.</td></tr><tr><td>MT5WithdrawalError</td><td>error code is MT5WithdrawalError</td></tr><tr><td>MT5WithdrawalSuspended</td><td>Withdrawals are currently unavailable. Please try again later.</td></tr><tr><td>MT5ZeroSpreadNotAllowed</td><td>MT5 Zero Spread [_1] account is not available in your country yet.</td></tr><tr><td>PoBoxAddressMT5</td><td>Physical address is required to create an MT5 account. Please contact our Customer Support team.</td></tr></tbody></table>",
        "<table><thead><tr><th>Error Code</th><th>Message</th></tr></thead><tbody><tr><td>ActivePaymentMethodRequired</td><td>At least one active payment method is required.</td></tr><tr><td>AdvertContactInfoRequired</td><td>Please provide your contact details.</td></tr><tr><td>AdvertCounterpartyIneligible</td><td>You do not meet the advertiser's requirements for placing an order on this advert.</td></tr><tr><td>AdvertFixedRateNotAllowed</td><td>Fixed rate adverts are not available at this time.</td></tr><tr><td>AdvertFloatRateNotAllowed</td><td>Floating rate adverts are not available at this time.</td></tr><tr><td>AdvertInfoMissingParam</td><td>An advert ID must be provided when not subscribing. Error for no id or subscribe.</td></tr><tr><td>AdvertIsDisabled</td><td>This ad is currently unavailable. Please choose another ad or check back later.</td></tr><tr><td>AdvertMaxExceeded</td><td>You've reached the maximum ad limit. Please deactivate some ads.</td></tr><tr><td>AdvertMaxExceededSameType</td><td>You've reached the maximum of [_1] active ads for this currency pair and order type. Please delete an ad to place a new one.</td></tr><tr><td>AdvertNoPaymentMethod</td><td>This advert has no payment methods. Please add at least one before activating it.</td></tr><tr><td>AdvertNotFound</td><td>We can't find the ad. Please review the details or try another ad. Get info for non-existent advert.</td></tr><tr><td>AdvertOwnerNotApproved</td><td>This advertiser has not been approved yet. Please choose another advertiser.</td></tr><tr><td>AdvertPaymentInfoRequired</td><td>Please provide your payment details.</td></tr><tr><td>AdvertPaymentMethodNamesNotAllowed</td><td>Payment method names cannot be provided for sell ads. Please provide saved payment methods.</td></tr><tr><td>AdvertPaymentMethodParam</td><td>Payment method field cannot be combined with other payment methods.</td></tr><tr><td>AdvertPaymentMethodRequired</td><td>Please add a payment method to this ad.</td></tr><tr><td>AdvertPaymentMethodsNotAllowed</td><td>Saved payment methods cannot be provided for buy ads. Please provide payment method names.</td></tr><tr><td>AdvertSameLimits</td><td>Please change the minimum and/or maximum order limit for this ad. The range between these limits must not overlap with another active ad you created for this currency pair and order type.</td></tr><tr><td>AdvertiserBlocked</td><td>You cannot place an order on the advert, because you have blocked the advertiser.</td></tr><tr><td>AdvertiserCannotListAds</td><td>You cannot list adverts because you've not been approved as an advertiser yet.</td></tr><tr><td>AdvertiserCreateChatError</td><td>An error occurred (chat user not created). Please try again later.</td></tr><tr><td>AdvertiserNameRequired</td><td>Please provide your name. Cannot update the advertiser name to blank.</td></tr><tr><td>AdvertiserNameTaken</td><td>That nickname is taken. Pick another.</td></tr><tr><td>AdvertiserNotApproved</td><td>Before you can post an ad, we need to verify your identity. Please complete your identity verification at Deriv.com. Cannot update the advertiser information when advertiser is not approved.</td></tr><tr><td>AdvertiserNotApprovedForBlock</td><td>You can't block anyone because you haven't verified your identity yet.</td></tr><tr><td>AdvertiserNotApprovedForOrder</td><td>Before you can place an order, we need to verify your identity. Please complete your identity verification at Deriv.com.</td></tr><tr><td>AdvertiserNotEligibleForLimitUpgrade</td><td>You are not eligible for P2P buy and sell limit upgrade. Please contact our Customer Support team for more information.</td></tr><tr><td>AdvertiserNotFound</td><td>We can't find the advertiser. Please review the details and try again. Get info of non-existent advertiser.</td></tr><tr><td>AdvertiserNotFoundForChat</td><td>You may not chat until you have registered as a Deriv P2P advertiser.</td></tr><tr><td>AdvertiserNotFoundForChatToken</td><td>This account is not registered as a Deriv P2P advertiser.</td></tr><tr><td>AdvertiserNotFoundForOrder</td><td>You are using an old version of this app, which no longer supports placing orders. Please upgrade your app to place your order.</td></tr><tr><td>AdvertiserNotListed</td><td>This advertiser is currently inactive. Please check again later or choose another advertiser.</td></tr><tr><td>AdvertiserNotRegistered</td><td>Please apply to be an advertiser. If you've already applied, please contact our Customer Support team. Update non-existent advertiser.</td></tr><tr><td>AdvertiserRelationSelf</td><td>You may not assign your own Advertiser ID as favourite or blocked.</td></tr><tr><td>AdvertiserScheduleAvailability</td><td>The advertiser's scheduled availability does not allow placing an order on this ad at this time.</td></tr><tr><td>AlreadyInProgress</td><td>Order is in progress. Changes are no longer allowed.</td></tr><tr><td>AlreadyRegistered</td><td>You are already an advertiser.</td></tr><tr><td>AuthenticationRequired</td><td>Submit your proof of address and identity before signing up for Deriv P2P.</td></tr><tr><td>BelowPerOrderLimit</td><td>Minimum ad order amount is [_1] [_2]. Please adjust the value.</td></tr><tr><td>BlockAndFavouriteNotAllowedTogether</td><td>You can't block and follow the same advertiser(s): [_1].</td></tr><tr><td>BlockAndUnblockNotAllowedTogether</td><td>You can't block and unblock the same advertiser(s): [_1].</td></tr><tr><td>BlockTradeDisabled</td><td>Block trading is currently unavailable. Please try again later.</td></tr><tr><td>BlockTradeNotAllowed</td><td>You're not eligible for block trading. Contact our Customer Support team for more information.</td></tr><tr><td>BlockingFavouriteAdvertiserNotAllowed</td><td>You can't block these advertiser(s) because you are currently following them: [_1].</td></tr><tr><td>ChatTokenError</td><td>An error occurred when issuing a new token. Please try again later.</td></tr><tr><td>ClientDailyOrderLimitExceeded</td><td>You may only place [_1] orders every 24 hours. Please try again later. Client daily order limit exceeded.</td></tr><tr><td>ClientScheduleAvailability</td><td>Your scheduled availability does not allow placing an order on this ad at this time.</td></tr><tr><td>CounterpartyNotAdvertiserForChat</td><td>Chat is not possible because the other client is not yet registered as a Deriv P2P advertiser.</td></tr><tr><td>CreateChatError</td><td>An error occurred when creating the chat. Please try again later.</td></tr><tr><td>CrossBorderNotAllowed</td><td>Only exchanges in your local currency are supported. Contact us via live chat to learn more.</td></tr><tr><td>DuplicateAdvert</td><td>You have another active ad with the same rate for this currency pair and order type. Please set a different rate.</td></tr><tr><td>DuplicatePaymentMethod</td><td>You have a payment method with the same values for [_1].</td></tr><tr><td>EscrowNotFound</td><td>Advertising for this currency is currently unavailable. Please contact our Customer Support team or try again later.</td></tr><tr><td>ExcessiveVerificationFailures</td><td>It looks like you've made too many attempts to confirm this order. Please try again after [_1] minutes.</td></tr><tr><td>ExcessiveVerificationRequests</td><td>Please wait for [_1] seconds before requesting another email.</td></tr><tr><td>FavouriteAndUnfavouriteNotAllowedTogether</td><td>You can't follow and unfollow the same advertiser(s): [_1].</td></tr><tr><td>FavouritingBlockedAdvertiserNotAllowed</td><td>You can't follow these advertiser(s) because you had already blocked them : [_1].</td></tr><tr><td>FloatRatePrecision</td><td>Floating rate cannot be provided with more than 2 decimal places of precision.</td></tr><tr><td>FloatRateTooBig</td><td>The allowed range for floating rate is -[_1]% to +[_1]%.</td></tr><tr><td>InvalidAdvertForOrder</td><td>It is not possible to place an order on this advert. Please choose another advert.</td></tr><tr><td>InvalidAdvertOwn</td><td>You cannot place an order for your own ad.</td></tr><tr><td>InvalidAdvertiserID</td><td>Invalid Advertiser ID provided.</td></tr><tr><td>InvalidAdvertiserIDsForBlocking</td><td>You can't block these advertiser(s) because you had already blocked them: [_1].</td></tr><tr><td>InvalidAdvertiserIDsForFavouriting</td><td>You can't follow these advertiser(s) because you had already followed them: [_1].</td></tr><tr><td>InvalidAdvertiserIDsForUnblocking</td><td>You can't unblock these advertiser(s) because you didn't block them before: [_1].</td></tr><tr><td>InvalidAdvertiserIDsForUnfavouriting</td><td>You can't unfollow these advertiser(s) because you didn't follow them before: [_1].</td></tr><tr><td>InvalidCountry</td><td>[_1] is not a valid country code or a country where P2P is offered.</td></tr><tr><td>InvalidDateFormat</td><td>Invalid date format.</td></tr><tr><td>InvalidFinalStateForDispute</td><td>This order is complete and can no longer be disputed. Invalid final state for dispute.</td></tr><tr><td>InvalidListLimit</td><td>Please enter a limit value that's greater than 0.</td></tr><tr><td>InvalidListOffset</td><td>The offset value cannot be negative. Please enter 0 or higher.</td></tr><tr><td>InvalidLocalCurrency</td><td>Invalid currency provided.</td></tr><tr><td>InvalidMinMaxAmount</td><td>The minimum order amount should be less than or equal to the maximum order amount. Please adjust the value. min_order_amount cannot be greater than max_order_amount.</td></tr><tr><td>InvalidOrderCurrency</td><td>Please select an ad that matches your currency.</td></tr><tr><td>InvalidOrderExpiryPeriod</td><td>Invalid order expiry period provided.</td></tr><tr><td>InvalidOtherPaymentMethodName</td><td>[_1] is similar to an available P2P payment method. Try entering a different payment method.</td></tr><tr><td>InvalidPaymentMethod</td><td>Invalid payment method provided: [_1].</td></tr><tr><td>InvalidPaymentMethodField</td><td>[_1] is not a valid field for payment method [_2].</td></tr><tr><td>InvalidPaymentMethods</td><td>Invalid payment methods provided.</td></tr><tr><td>InvalidReasonForBuyer</td><td>This reason doesn't apply to your case. Please choose another reason. Invalid reason for buyer.</td></tr><tr><td>InvalidReasonForSeller</td><td>This reason doesn't apply to your case. Please choose another reason. Invalid reason for seller.</td></tr><tr><td>InvalidScheduleInterval</td><td>The value [_1] is invalid. Period start and end values must be multiples of [_2].</td></tr><tr><td>InvalidScheduleRange</td><td>The end time of a period must be greater than the start time.</td></tr><tr><td>InvalidStateForDispute</td><td>Please wait until the order expires to raise a dispute. Invalid state for dispute.</td></tr><tr><td>InvalidVerificationToken</td><td>The link that you used appears to be invalid. Please check and try again.</td></tr><tr><td>MaxPerOrderExceeded</td><td>Maximum ad order amount is [_1] [_2]. Please adjust the value.</td></tr><tr><td>MaximumExceeded</td><td>Maximum ad limit is [_1] [_2]. Please adjust the value.</td></tr><tr><td>MaximumExceededNewAmount</td><td>Maximum ad limit is [_1] [_4], and [_2] [_4] has been used by existing orders, so the new amount will be [_3] [_4]. Please adjust the value.</td></tr><tr><td>MinPriceTooSmall</td><td>Minimum order amount is [_1]. Please adjust the value. Got error if min price is 0.</td></tr><tr><td>MissingPaymentMethodField</td><td>[_1] is a required field for payment method [_2]. Please provide a value.</td></tr><tr><td>NoCountry</td><td>Please set your country of residence.</td></tr><tr><td>NoCurrency</td><td>Please set your account currency. error code is NoCurrency.</td></tr><tr><td>NoLocalCurrency</td><td>We cannot recognise your local currency. Please contact our Customer Support team.</td></tr><tr><td>NotLoggedIn</td><td>Please log in to continue.</td></tr><tr><td>OpenOrdersDeleteAdvert</td><td>You have open orders for this ad. Complete all open orders before deleting this ad.</td></tr><tr><td>OrderAlreadyCancelled</td><td>You've already cancelled this order.</td></tr><tr><td>OrderAlreadyConfirmedBuyer</td><td>You've already confirmed this order. Please wait for the seller to confirm.</td></tr><tr><td>OrderAlreadyConfirmedTimedout</td><td>You've already confirmed this order, but the seller has not. Please contact them for more information. If you need help, contact our Customer Support team.</td></tr><tr><td>OrderAlreadyExists</td><td>You have an active order for this ad. Please complete the order before making a new one.</td></tr><tr><td>OrderChatAlreadyCreated</td><td>A chat for this order has already been created.</td></tr><tr><td>OrderConfirmCompleted</td><td>This order has already been completed.</td></tr><tr><td>OrderContactInfoRequired</td><td>Please provide your contact details.</td></tr><tr><td>OrderCreateFailAmount</td><td>An order cannot be created for this amount at this time. Please try adjusting the amount.</td></tr><tr><td>OrderCreateFailAmountAdvertiser</td><td>An order cannot be created for this amount at this time. Please try adjusting the amount.</td></tr><tr><td>OrderCreateFailClient</td><td>There was a problem in placing this order. [_1]</td></tr><tr><td>OrderCreateFailClientBalance</td><td>The amount of the order exceeds your funds available in Deriv P2P.</td></tr><tr><td>OrderCreateFailRateChanged</td><td>The rate of the advert has changed. Please try creating your order again.</td></tr><tr><td>OrderCreateFailRateRequired</td><td>Please provide a rate for this order.</td></tr><tr><td>OrderCreateFailRateSlippage</td><td>We're unable to create your order because the market rate has moved too much. Please try creating your order again.</td></tr><tr><td>OrderEmailVerificationRequired</td><td>We've sent you an email. Click the confirmation link in the email to complete this order.</td></tr><tr><td>OrderMaximumExceeded</td><td>Maximum ad amount is [_1] [_2]. Please adjust the value.</td></tr><tr><td>OrderMaximumTempExceeded</td><td>Maximum order amount at this time is [_1] [_2]. Please adjust the value or try after 00:00 GMT.</td></tr><tr><td>OrderMinimumNotMet</td><td>Minimum ad amount is [_1] [_2]. Please adjust the value.</td></tr><tr><td>OrderNoEditExpired</td><td>This order has expired and cannot be changed.</td></tr><tr><td>OrderNotConfirmedPending</td><td>Please wait for the buyer to confirm the order.</td></tr><tr><td>OrderNotFound</td><td>This order does not exist. Confirm non-existent order.</td></tr><tr><td>OrderPaymentContactInfoNotAllowed</td><td>Buy orders do not require payment and contact information.</td></tr><tr><td>OrderPaymentInfoRequired</td><td>Please provide your payment details.</td></tr><tr><td>OrderRefundInvalid</td><td>This order has already been cancelled.</td></tr><tr><td>OrderReviewExists</td><td>You have already reviewed this order.</td></tr><tr><td>OrderReviewNotComplete</td><td>This order can only be reviewed after it has been successfully completed.</td></tr><tr><td>OrderReviewPeriodExpired</td><td>It's not possible to give a review now. Reviews can only be placed within [_1] hours of successfully completing the order.</td></tr><tr><td>OrderReviewStatusInvalid</td><td>This order cannot be reviewed. It was not successfully completed.</td></tr><tr><td>OrderUnderDispute</td><td>This order is under dispute. Order is already under dispute.</td></tr><tr><td>P2PDepositsTransfer</td><td>As some of your previous deposits were made via P2P, the maximum you can transfer is [_1] [_2].</td></tr><tr><td>P2PDepositsTransferZero</td><td>As your previous deposits were made via P2P, transfers are not possible from this account.</td></tr><tr><td>P2PDepositsWithdrawal</td><td>As some of your previous deposits were made via P2P, the maximum you can withdraw is [_1] [_2].</td></tr><tr><td>P2PDepositsWithdrawalZero</td><td>As your previous deposits were made via P2P, you can only withdraw via P2P.</td></tr><tr><td>P2PDisabled</td><td>Deriv P2P is currently unavailable. Please check back later. error code is P2PDisabled.</td></tr><tr><td>P2PError</td><td>Sorry, an error occurred.</td></tr><tr><td>P2PLimitUpgradeFailed</td><td>There was a problem in upgrading your limit. Please try again later or contact our Customer Support team for more information.</td></tr><tr><td>P2PRestrictedCountry</td><td>Deriv P2P is unavailable in your country. Please provide a different account opening reason.</td></tr><tr><td>PaymentMethodInUse</td><td>This payment method is in use by multiple ads and/or orders, and cannot be deleted or deactivated.</td></tr><tr><td>PaymentMethodInfoAlreadyInUse</td><td>The [_1] details you entered are already in use by another advertiser. Use different details or contact us via live chat for further assistance.</td></tr><tr><td>PaymentMethodNotFound</td><td>The payment method ID does not exist.</td></tr><tr><td>PaymentMethodNotInAd</td><td>[_1] is not available as a payment method for this advert.</td></tr><tr><td>PaymentMethodRemoveActiveOrders</td><td>You have active orders on this ad, so you must keep these payment methods: [_1].</td></tr><tr><td>PaymentMethodRemoveActiveOrdersDB</td><td>You cannot remove payment methods used by active orders on this advert.</td></tr><tr><td>PaymentMethodUsedByAd</td><td>You can't delete this payment method because it's in use by these sell ad(s): [_1].</td></tr><tr><td>PaymentMethodUsedByOrder</td><td>This payment method is in use by the following order(s): [_1]. Please wait until it completes.</td></tr><tr><td>PaymentMethodsDisabled</td><td>The payment method feature is not available on P2P yet. Please check back later.</td></tr><tr><td>RateTooBig</td><td>Ad rate should not be more than [_1]. Please adjust the value.</td></tr><tr><td>RateTooSmall</td><td>Ad rate should not be less than [_1]. Please adjust the value.</td></tr><tr><td>RestrictedCountry</td><td>Deriv P2P is unavailable in your country. correct error code.</td></tr><tr><td>RestrictedCurrency</td><td>[_1] is not supported at the moment. error code is RestrictedCurrency.</td></tr><tr><td>ServiceNotAllowedForPA</td><td>This service is not available for payment agents. Payment agents cannot create orders.</td></tr><tr><td>TemporaryBar</td><td>You've been temporarily barred from using our services due to multiple cancellation attempts. Try again after [_1] GMT.</td></tr><tr><td>UnavailableOnVirtual</td><td>Deriv P2P is unavailable on demo accounts. Please switch to your real account. error code is UnavailableOnVirtual.</td></tr></tbody></table>",
        "<table><thead><tr><th>Error Code</th><th>Message</th></tr></thead><tbody><tr><td>APITokenError</td><td>[_1] is required.', 'new_token</td></tr><tr><td>ASK_FIX_DETAILS</td><td>MT5 is currently unavailable. Please try again later.</td></tr><tr><td>AccountHasPendingConditions</td><td>Please close open positions and withdraw all funds from your [_1] account(s). Also, notice if you have pending withdrawal requests, wait for those to be finalized first before proceeding.</td></tr><tr><td>AccountTypeMissing</td><td>N/A</td></tr><tr><td>Crypto2CryptoTransferOverLimit</td><td>Not verified account should not pass the crypto to crypto limit</td></tr><tr><td>Crypto2FiatTransferOverLimit</td><td>Not verified account should not pass the crypto to fiat limit</td></tr><tr><td>Fiat2CryptoTransferOverLimit</td><td>Not verified account should not pass the fiat to crypto limit</td></tr><tr><td>InputValidationFailed</td><td>Your password must be 8 to 25 characters long. It must include lowercase and uppercase letters, and numbers.</td></tr><tr><td>InvalidChecksum</td><td>The security hash used in your request appears to be invalid.</td></tr><tr><td>InvalidDemoAccountType</td><td>N/A</td></tr><tr><td>InvalidEmail</td><td>This email is already in use. Please use a different email.</td></tr><tr><td>InvalidRequestParams</td><td>Invalid request parameters.</td></tr><tr><td>InvalidToken</td><td>The token is invalid, requires 'admin' scope.</td></tr><tr><td>PasswordChangeError</td><td>We were unable to change your password due to an unexpected error. Please try again.</td></tr><tr><td>PasswordResetError</td><td>We were unable to reset your password due to an unexpected error. Please try again.</td></tr><tr><td>PermissionDenied</td><td>Wallet account creation is currently suspended.</td></tr><tr><td>RealToVirtualNotAllowed</td><td>Transfer between real and virtual accounts is not allowed. MT5 demo -&gt; real account transfer error code</td></tr><tr><td>ReasonNotSpecified</td><td>Please specify the reasons for closing your accounts.</td></tr><tr><td>SetSelfExclusionError</td><td>Please provide at least one self-exclusion setting.</td></tr><tr><td>SocialBased</td><td>Sorry, your account does not allow passwords because you use social media to log in.</td></tr><tr><td>SuspendedDueToLoad</td><td>The system is currently under heavy load, and this call has been suspended temporarily. Please try again in a few minutes.</td></tr><tr><td>TokenDeleted</td><td>No token found</td></tr><tr><td>UnknownLandingCompany</td><td>Unknown landing company.</td></tr><tr><td>UserAlreadyVerified</td><td>User is already email verified.</td></tr><tr><td>TransfersBlocked</td><td>Transfers are not allowed for these accounts.</td></tr></tbody></table>",
        "<table><thead><tr><th>Error Code</th><th>Message</th></tr></thead><tbody><tr><td>ApplicantError</td><td>Cannot create applicant for [_1].</td></tr><tr><td>MissingPersonalDetails</td><td>Update your personal details.</td></tr><tr><td>ServiceUnavailable</td><td>The requested service is unavailable at the moment.</td></tr><tr><td>TokenGeneratingError</td><td>Cannot generate token for [_1].</td></tr><tr><td>UnsupportedCountry</td><td>Country</td></tr><tr><td>data_validation.date_of_birth</td><td>Some details on your document appear to be invalid, missing, or unclear.</td></tr><tr><td>data_validation.document_expiration</td><td>Your document has expired.</td></tr><tr><td>data_validation.document_numbers</td><td>Some details in your document appear to be invalid, missing, or unclear.</td></tr><tr><td>data_validation.expiry_date</td><td>Some details on your document appear to be invalid, missing, or unclear.</td></tr><tr><td>data_validation.mrz</td><td>Some details on your document appear to be invalid, missing, or unclear.</td></tr><tr><td>data_validation.no_document_numbers</td><td>The serial number of your document couldn't be verified.</td></tr><tr><td>image_integrity.colour_picture</td><td>Your document appears to be in black and white. Please upload a colour photo of your document.</td></tr><tr><td>image_integrity.conclusive_document_quality</td><td>Your document appears to be invalid.</td></tr><tr><td>image_integrity.conclusive_document_quality.abnormal_document_features</td><td>Some details on your document appear to be invalid, missing, or unclear.</td></tr><tr><td>image_integrity.conclusive_document_quality.corner_removed</td><td>Your document appears to be damaged or cropped.</td></tr><tr><td>image_integrity.conclusive_document_quality.digital_document</td><td>Your document appears to be a digital document.</td></tr><tr><td>image_integrity.conclusive_document_quality.missing_back</td><td>The back of your document appears to be missing. Please include both sides of your identity document.</td></tr><tr><td>image_integrity.conclusive_document_quality.obscured_data_points</td><td>Some details on your document appear to be invalid, missing, or unclear.</td></tr><tr><td>image_integrity.conclusive_document_quality.obscured_security_features</td><td>Some details on your document appear to be invalid, missing, or unclear.</td></tr><tr><td>image_integrity.conclusive_document_quality.punctured_document</td><td>Your document appears to be damaged or cropped.</td></tr><tr><td>image_integrity.conclusive_document_quality.watermarks_digital_text_overlay</td><td>Your document contains markings or text that should not be on your document.</td></tr><tr><td>image_integrity.image_quality</td><td>The image quality of your document is too low. Please provide a hi-res photo of your identity document.</td></tr><tr><td>image_integrity.image_quality.blurred_photo</td><td>We were unable to verify your selfie because it's not clear. Please take a clearer photo and try again.</td></tr><tr><td>image_integrity.image_quality.covered_photo</td><td>We're unable to verify the document you provided because some details appear to be missing. Please try again.</td></tr><tr><td>image_integrity.image_quality.cut_off_document</td><td>We're unable to verify the document you provided because it appears to be damaged. Please try again.</td></tr><tr><td>image_integrity.image_quality.damaged_document</td><td>We're unable to verify the document you provided because it appears to be damaged. Please try again.</td></tr><tr><td>image_integrity.image_quality.dark_photo</td><td>We were unable to verify your selfie because it's not clear. Please take a clearer photo and try again.</td></tr><tr><td>image_integrity.image_quality.glare_on_photo</td><td>We were unable to verify your selfie because it's not clear. Please take a clearer photo and try again.</td></tr><tr><td>image_integrity.image_quality.incorrect_side</td><td>The front of your document appears to be missing. Please provide both sides of your identity document.</td></tr><tr><td>image_integrity.image_quality.no_document_in_image</td><td>We're unable to verify the document you provided because it appears to be a blank image. Please try again.</td></tr><tr><td>image_integrity.image_quality.other_photo_issue</td><td>We're unable to verify the document you provided because some details appear to be missing. Please try again.</td></tr><tr><td>image_integrity.image_quality.two_documents_uploaded</td><td>The document you provided appears to be two different types. Please try again.</td></tr><tr><td>image_integrity.supported_document</td><td>The document you provided is not supported for your country. Please provide a supported document.</td></tr><tr><td>visual_authenticity.digital_tampering</td><td>Your document appears to be invalid.</td></tr><tr><td>visual_authenticity.face_detection</td><td>Your document appears to be invalid.</td></tr><tr><td>visual_authenticity.fonts</td><td>Your document appears to be invalid.</td></tr><tr><td>visual_authenticity.original_document_present</td><td>Your document appears to be a scanned copy that contains markings or text that shouldn't be on your document.</td></tr><tr><td>visual_authenticity.original_document_present.document_on_printed_paper</td><td>Your document appears to be a printed copy.</td></tr><tr><td>visual_authenticity.original_document_present.photo_of_screen</td><td>Your document appears to be a photo of a device screen.</td></tr><tr><td>visual_authenticity.original_document_present.scan</td><td>We're unable to verify the document you provided because it contains markings or text that should not be there.</td></tr><tr><td>visual_authenticity.original_document_present.screenshot</td><td>Your document appears to be a screenshot.</td></tr><tr><td>visual_authenticity.picture_face_integrity</td><td>Your document appears to be invalid.</td></tr><tr><td>visual_authenticity.security_features</td><td>Your document appears to be invalid.</td></tr><tr><td>visual_authenticity.template</td><td>Your document appears to be invalid.</td></tr></tbody></table>",
        "<table><thead><tr><th>Error Code</th><th>Message</th></tr></thead><tbody><tr><td>ASK_AUTHENTICATE</td><td>Please authenticate your account. MF client needs to be fully authenticated</td></tr><tr><td>ASK_CURRENCY</td><td>Client has no default currency</td></tr><tr><td>ASK_EMAIL_VERIFY</td><td>Verify your withdraw request. Withdrawal needs verification token</td></tr><tr><td>ASK_FINANCIAL_RISK_APPROVAL</td><td>Financial risk approval is required</td></tr><tr><td>ASK_TIN_INFORMATION</td><td>Tax information is required for malatainvest</td></tr><tr><td>AmountExceedsBalance</td><td>Withdrawal amount [100.01 USD] exceeds client balance [100.00 USD].</td></tr><tr><td>AmountExceedsUnfrozenBalance</td><td>Withdrawal is 320.00 USD but balance 320.00 includes frozen bonus 20.00.</td></tr><tr><td>CashierForwardError</td><td>Verify your withdraw request.</td></tr><tr><td>CryptoConnectionError</td><td>An error occurred while processing your request. Please try again later.</td></tr><tr><td>CryptoInvalidCurrency</td><td>The provided currency [_1] is not a valid cryptocurrency.</td></tr><tr><td>CryptoMissingRequiredParameter</td><td>Missing or invalid required parameter.</td></tr><tr><td>InvalidCashierCurrency</td><td>This feature is unavailable for the provided currency: [_1]</td></tr><tr><td>InvalidCurrency</td><td>Returns correct error code if currency is invalid</td></tr><tr><td>InvalidRequest</td><td>Crypto cashier is unavailable for the provided currency.</td></tr><tr><td>JustificationAlreadySubmitted</td><td>You cannot submit another payment agent withdrawal justification within 24 hours. Error code for repeat submission</td></tr><tr><td>NoBalance</td><td>This transaction cannot be done because your</td></tr><tr><td>NotAuthentorized</td><td></td></tr><tr><td>TopupDemoError</td><td></td></tr><tr><td>UnhandledError</td><td>An error that is not handled here.</td></tr><tr><td>WithdrawalLimit</td><td>Withdrawal is 20.00 USD but balance 20.00 includes frozen bonus 20.00.</td></tr><tr><td>WithdrawalLimitReached</td><td>You</td></tr><tr><td>account_transfer</td><td>Crypto cashier is unavailable for the provided currency.</td></tr></tbody></table>",
        "<table><thead><tr><th>Error Code</th><th>Message</th></tr></thead><tbody><tr><td>CTIDGetFailed</td><td>Failed to retrieve new or existing CTID.</td></tr><tr><td>CopyTradingWrongCurrency</td><td>Your account currency and trader currency must be same.</td></tr><tr><td>CurrencyRequired</td><td>Please provide valid currency.</td></tr><tr><td>CurrencyTypeNotAllowed</td><td>This currency is temporarily suspended. Please select another currency to proceed. error code is CurrencyTypeNotAllowed</td></tr><tr><td>DifferentLandingCompanies</td><td>Transfers between EU and non-EU accounts aren't allowed. You can only transfer funds between accounts under the same regulator.</td></tr><tr><td>FinancialAssessmentMandatory</td><td>Please complete your financial assessment. should complete F.A.</td></tr><tr><td>InvalidStakeLimit</td><td>Min trade stake should be lower than max trade stake.</td></tr><tr><td>InvalidTradeType</td><td>Invalid trade type: [_1].</td></tr><tr><td>MaximumAmountTransfers</td><td>The maximum amount of transfers is [_1] [_2] per day. Please try again tomorrow. limit applies to different account of same user</td></tr><tr><td>MaximumTransfers</td><td>You can only perform up to [_1] transfers a day. Please try again tomorrow. Daily Transfer limit - correct error code</td></tr><tr><td>NoAgeVerification</td><td>You haven't verified your age. Please contact us for more information. should be age verified</td></tr><tr><td>NoOldPassword</td><td>Old password cannot be provided until a trading password has been set. cannot provide old password yet</td></tr><tr><td>OldPasswordError</td><td>You've used this password before. Please create a different one.</td></tr><tr><td>OldPasswordRequired</td><td>Old password cannot be empty.</td></tr><tr><td>PasswordRequired</td><td>A new password is required</td></tr><tr><td>PlatformInvestorPasswordChangeError</td><td></td></tr><tr><td>PlatformPasswordChangeError</td><td>Due to a network issue, we</td></tr><tr><td>PlatformPasswordChangeSuspended</td><td>We're unable to reset your trading password due to system maintenance. Please try again later.</td></tr><tr><td>PlatformTransferAccountInvalid</td><td>The provided Deriv account ID is not valid. Non sibling cannot transfer</td></tr><tr><td>PlatformTransferBlocked</td><td>Transfers have been blocked on this account.</td></tr><tr><td>PlatformTransferCurrencySuspended</td><td>[_1] currency transfers are suspended.</td></tr><tr><td>PlatformTransferDemoOnly</td><td>Both accounts must be demo accounts.</td></tr><tr><td>PlatformTransferError</td><td>The transfer could not be completed: [_1] Insufficient balance</td></tr><tr><td>PlatformTransferNoVirtual</td><td>This feature is not available for virtual accounts.</td></tr><tr><td>PlatformTransferNocurrency</td><td>Please select your account currency first.</td></tr><tr><td>PlatformTransferOauthTokenRequired</td><td>This request must be made using a connection authorized by the Deriv account involved in the transfer. non oauth token not allowed</td></tr><tr><td>PlatformTransferRealOnly</td><td>Both accounts must be real accounts.</td></tr><tr><td>PlatformTransferRealParams</td><td>A Deriv account ID and amount must be provided for real accounts. from_account and amount needed for real account</td></tr><tr><td>PlatformTransferSuspended</td><td>Transfers are suspended for system maintenance. Please try later.</td></tr><tr><td>PlatformTransferTemporarilyUnavailable</td><td>Transfers between these accounts are temporarily unavailable. Please try later.</td></tr><tr><td>PlatformTransferWalletOnly</td><td>This feature is only available for wallet accounts.</td></tr><tr><td>TradingAccountCurrencyNotAllowed</td><td>This currency is not available. must use a valid currency</td></tr><tr><td>TradingAccountNotAllowed</td><td>This trading platform account is not available in your country yet. only svg countries</td></tr><tr><td>UserServiceFailed</td><td>There was a problem reading your user data.</td></tr><tr><td>CTraderAccountCreateFailed</td><td>There was an error creating cTrader account. Please try again later.</td></tr><tr><td>CTraderAccountCreationInProgress</td><td>Your account creation is still in progress. Please wait for completion.</td></tr><tr><td>CTraderAccountLinkFailed</td><td>There was an error linking created cTrader account. Please try again later.</td></tr><tr><td>CTraderAccountNotFound</td><td>No cTrader accounts found.</td></tr><tr><td>CTraderDemoTopFailed</td><td>Your cTrader demo account could not be topped up at this time. Please try later.</td></tr><tr><td>CTraderDemoTopupBalance</td><td>We cannot complete your request. You can only top up your cTrader demo account when the balance falls below [_1] [_2].</td></tr><tr><td>CTraderDepositFailed</td><td>The required funds could not be deposited to your cTrader account. Please try a different account.</td></tr><tr><td>CTraderDepositIncomplete</td><td>The deposit to your cTrader account did not complete. Please contact our Customer Support team.</td></tr><tr><td>CTraderDepositSuspended</td><td>cTrader deposit is currently suspended.</td></tr><tr><td>CTraderExistingAccountGroupMissing</td><td>Existing cTrader accounts missing group data.</td></tr><tr><td>CTraderExistingAccountLimitExceeded</td><td>Maximum allowed cTrader [_1] accounts per client exceeded. You can have up to [_2] cTrader accounts.</td></tr><tr><td>CTraderGeneral</td><td>This service is currently unavailable. Please try again later.</td></tr><tr><td>CTraderInsufficientBalance</td><td>Your cTrader account balance is insufficient for this withdrawal.</td></tr><tr><td>CTraderInvalidAccount</td><td>An invalid cTrader account ID was provided. Cannot transfer from real wallet to ctrader demo.</td></tr><tr><td>CTraderInvalidAccountType</td><td>An invalid cTrader account type was provided for account creation.</td></tr><tr><td>CTraderInvalidGroup</td><td>cTrader invalid group provided.</td></tr><tr><td>CTraderInvalidMarketType</td><td>An invalid cTrader market type was provided for account creation.</td></tr><tr><td>CTraderNotAllowed</td><td>cTrader account or landing company is not available in your country yet.</td></tr><tr><td>CTraderServerSuspended</td><td>This feature is suspended for system maintenance. Please try later.</td></tr><tr><td>CTraderSuspended</td><td>cTrader account management is currently suspended.</td></tr><tr><td>CTraderTransferCompleteError</td><td>The transfer completed successfully, but an error occurred when getting account details.</td></tr><tr><td>CTraderUnsupportedCountry</td><td>cTrader unsupported country code.</td></tr><tr><td>CTraderWithdrawalFailed</td><td>The required funds could not be withdrawn from your cTrader account. Please try later or use a different account.</td></tr><tr><td>CTraderWithdrawalIncomplete</td><td>The credit to your Deriv account did not complete. Please contact our Customer Support team.</td></tr><tr><td>CTraderWithdrawalSuspended</td><td>cTrader withdrawal is currently suspended.</td></tr><tr><td>ContractIsSold</td><td>Contract has expired.</td></tr><tr><td>ContractNotFound</td><td>This contract was not found among your open positions.</td></tr><tr><td>InvalidContractUpdate</td><td></td></tr><tr><td>InvalidUpdateArgument</td><td>Only a hash reference input is accepted.</td></tr><tr><td>InvalidUpdateValue</td><td>Please enter a number or a null value.</td></tr><tr><td>TooFrequentUpdate</td><td>Only one update per second is allowed.</td></tr><tr><td>Update is not available</td><td>Update of stop loss and take profit is not available at the moment.</td></tr><tr><td>UpdateNotAllowed</td><td>This contract cannot be updated once you've made your purchase. This feature is not available for this contract type.</td></tr><tr><td>UpdateStopLossNotAllowed</td><td>You may update your stop loss amount after deal cancellation has expired.</td></tr><tr><td>UpdateTakeProfitNotAllowed</td><td>You may update your take profit amount after deal cancellation has expired.</td></tr><tr><td>accumulator</td><td>ACCU is not supported.</td></tr><tr><td>multiplier</td><td>MULTUP and MULTDOWN are not supported.</td></tr></tbody></table>",
        "<table><thead><tr><th>Error Code</th><th>Message</th></tr></thead><tbody><tr><td>DXDemoTopFailed</td><td>Your Deriv X demo account could not be topped up at this time. Please try later.</td></tr><tr><td>DXDemoTopupBalance</td><td>We cannot complete your request. You can only top up your Deriv X demo account when the balance falls below [_1] [_2]. expected error for top up virtual</td></tr><tr><td>DXDepositFailed</td><td>The required funds could not be withdrawn from your Deriv account. Please try a different account.</td></tr><tr><td>DXDepositIncomplete</td><td>The deposit to your Deriv X account did not complete. Please contact our Customer Support team.</td></tr><tr><td>DXExistingAccount</td><td>You already have Deriv X account of this type (account ID [_1]).[_2] error code for duplicate account.</td></tr><tr><td>DXGeneral</td><td>This service is currently unavailable. Please try again later.</td></tr><tr><td>DXInsufficientBalance</td><td>Your Deriv X account balance is insufficient for this withdrawal.</td></tr><tr><td>DXInvalidAccount</td><td>An invalid Deriv X account ID was provided. Cannot transfer from real wallet to dxtrade demo.</td></tr><tr><td>DXInvalidMarketType</td><td>An invalid Deriv X market type was provided for [_1] account creation.</td></tr><tr><td>DXNewAccountFailed</td><td>There was an error while creating your account. Please try again later.</td></tr><tr><td>DXNoAccount</td><td>You do not have a Deriv X account on the provided server.</td></tr><tr><td>DXNoServer</td><td>Server must be provided for Deriv X service token.</td></tr><tr><td>DXServerSuspended</td><td>This feature is suspended for system maintenance. Please try later. server suspended</td></tr><tr><td>DXSuspended</td><td>Deriv X account management is currently suspended. dxtrade suspended</td></tr><tr><td>DXTokenGenerationFailed</td><td>Token generation failed. Please try later.</td></tr><tr><td>DXTradeAccountExisting</td><td>Change of currency is not allowed due to an existing Deriv X real account.</td></tr><tr><td>DXTransferCompleteError</td><td>The transfer completed successfully, but an error occurred when getting account details.</td></tr><tr><td>DXWithdrawalFailed</td><td>The required funds could not be withdrawn from your Deriv X account. Please try later or use a different account.</td></tr><tr><td>DXWithdrawalIncomplete</td><td>The credit to your Deriv account did not complete. Please contact our Customer Support team.</td></tr><tr><td>DXtradeNoCurrency</td><td>Please provide a currency for the Deriv X account.</td></tr><tr><td>IncompatibleDxtradeToDxtrade</td><td>Transfer between two Deriv X accounts is not allowed.</td></tr><tr><td>IncompatibleDxtradeToMt5</td><td>You are not allowed to transfer to this account.</td></tr><tr><td>IncompatibleMt5ToDxtrade</td><td>You are not allowed to transfer to this account.</td></tr></tbody></table>"
      ],
      "links": []
    },
    "Country list": {
      "title": "Deriv‚Äôs API country list | Deriv API",
      "url": "https://developers.deriv.com/docs/country-list",
      "mainContent": "Deriv products are offered internationally, depending on the country of residence. To ensure a seamless trading experience, here is a detailed list of supported countries and their respective country codes.\n\nüìò\n\nP2P APIs, Wallets and MT5 APIs are available only in specific countries.\n\nCountry\tCountry Code\nAfghanistan\taf\nAland Islands\tax\nAlbania\tal\nAlgeria\tdz\nAndorra\tad\nAngola\tao\nAnguilla\tai\nAntarctica\taq\nAntigua and Barbuda\tag\nArgentina\tar\nArmenia\tam\nAruba\taw\nAzerbaijan\taz\nBahamas\tbs\nBahrain\tbh\nBangladesh\tbd\nBarbados\tbb\nBelize\tbz\nBenin\tbj\nBermuda\tbm\nBhutan\tbt\nBolivia\tbo\nBosnia and Herzegovina\tba\nBotswana\tbw\nBrazil\tbr\nBritish Indian Ocean Territory\tio\nBritish Virgin Islands\tvg\nBrunei Darussalam\tbn\nBurkina Faso\tbf\nBurundi\tbi\nCambodia\tkh\nCameroon\tcm\nCape Verde\tcv\nCaribbean Netherlands (Bonaire, Sint Eustatius and Saba)\tbq\nCentral African Republic\tcf\nChad\ttd\nChile\tcl\nChina\tcn\nChristmas Island\tcx\nCocos (Keeling) Islands\tcc\nColombia\tco\nComoros\tkm\nCongo\tcg\nCook Islands\tck\nCosta Rica\tcr\nC√¥te d‚ÄôIvoire\tci\nCuracao\tcw\nDjibouti\tdj\nDominica\tdm\nDominican Republic\tdo\nEcuador\tec\nEgypt\teg\nEl Salvador\tsv\nEquatorial Guinea\tgq\nEritrea\ter\nEthiopia\tet\nFalkland Islands (Malvinas)\tfk\nFaroe Islands\tfo\nFiji\tfj\nFrench Guiana\tgf\nFrench Polynesia\tpf\nGabon\tga\nGambia\tgm\nGeorgia\tge\nGhana\tgh\nGibraltar\tgi\nGreenland\tgl\nGrenada\tgd\nGuadeloupe\tgp\nGuatemala\tgt\nGuinea\tgn\nGuinea-Bissau\tgw\nGuyana\tgy\nHaiti\tht\nHonduras\thn\nIceland\tis\nIndia\tin\nIndonesia\tid\nIraq\tiq\nJamaica\tjm\nKazakhstan\tkz\nKenya\tke\nKiribati\tki\nKuwait\tkw\nKyrgyzstan\tkg\nLebanon\tlb\nLesotho\tls\nLiberia\tlr\nLibyan Arab Jamahiriya\tly\nLiechtenstein\tli\nMacedonia\tmk\nMadagascar\tmg\nMalawi\tmw\nMaldives\tmv\nMali\tml\nMarshall Islands\tmh\nMartinique\tmq\nMauritania\tmr\nMayotte\tyt\nMexico\tmx\nMicronesia, Federated States of\tfm\nMoldova, Republic of\tmd\nMonaco\tmc\nMongolia\tmn\nMontenegro\tme\nMontserrat\tms\nMorocco\tma\nMozambique\tmz\nNamibia\tna\nNauru\tnr\nNepal\tnp\nNetherlands\tnl\nNew Caledonia\tnc\nNew Zealand\tnz\nNicaragua\tni\nNiger\tne\nNigeria\tng\nNiue\tnu\nNorfolk Island\tnf\nOman\tom\nPakistan\tpk\nPalau\tpw\nPalestinian Territory, Occupied\tps\nPanama\tpa\nPapua New Guinea\tpg\nPeru\tpe\nPhilippines\tph\nPitcairn\tpn\nQatar\tqa\nReunion\tre\nRussia\tru\nSaint Helena\tsh\nSaint Kitts and Nevis\tkn\nSaint Lucia\tlc\nSaint Pierre and Miquelon\tpm\nSaint-Martin (French part)\tmf\nSamoa\tws\nSan Marino\tsm\nSao Tome and Principe\tst\nSaudi Arabia\tsa\nSerbia\trs\nSeychelles\tsc\nSierra Leone\tsl\nSint Maarten (Dutch part)\tsx\nSolomon Islands\tsb\nSomalia\tso\nSouth Africa\tza\nSouth Sudan\tss\nSri Lanka\tlk\nSudan\tsd\nSuriname\tsr\nSvalbard and Jan Mayen\tsj\nSwaziland (Eswatini)\tsz\nSwitzerland\tch\nTaiwan, Province of China\ttw\nTajikistan\ttj\nTanzania\ttz\nThailand\tth\nTimor-Leste\ttl\nTogo\ttg\nTokelau\ttk\nTonga\tto\nTrinidad and Tobago\ttt\nTunisia\ttn\nTurkey\ttr\nTurkmenistan\ttm\nTurks and Caicos Islands\ttc\nTuvalu\ttv\nUganda\tug\nUkraine\tua\nUruguay\tuy\nUzbekistan\tuz\nVenezuela\tve\nVietnam\tvn\nWallis and Futuna\twf\nWestern Sahara\teh\nYemen\tye\nZambia\tzm\nZimbabwe\tzw\nP2P\n\nP2P is available in 195 countries.\n\nCountry\tCountry Code\nAfghanistan\taf\nAland Islands\tax\nAlbania\tal\nAlgeria\tdz\nAndorra\tad\nAngola\tao\nAnguilla\tai\nAntarctica\taq\nAntigua and Barbuda\tag\nArgentina\tar\nArmenia\tam\nAruba\taw\nAzerbaijan\taz\nBahamas\tbs\nBahrain\tbh\nBangladesh\tbd\nBarbados\tbb\nBelize\tbz\nBenin\tbj\nBermuda\tbm\nBhutan\tbt\nBolivia\tbo\nBosnia and Herzegovina\tba\nBotswana\tbw\nBrazil\tbr\nBritish Indian Ocean Territory\tio\nBrunei Darussalam\tbn\nBurkina Faso\tbf\nBurundi\tbi\nCambodia\tkh\nCameroon\tcm\nCape Verde\tcv\nCaribbean Netherlands\tbq\nCentral African Republic\tcf\nChad\ttd\nChile\tcl\nChina\tcn\nChristmas Island\tcx\nCocos (Keeling) Islands\tcc\nColombia\tco\nComoros\tkm\nCongo\tcg\nCook Islands\tck\nCosta Rica\tcr\nCote D'Ivoire\tci\nCuracao\tcw\nDjibouti\tdj\nDominica\tdm\nDominican Republic\tdo\nEcuador\tec\nEgypt\teg\nEl Salvador\tsv\nEquatorial Guinea\tgq\nEritrea\ter\nEthiopia\tet\nFalkland Islands (Malvinas)\tfk\nFaroe Islands\tfo\nFiji\tfj\nFrench Guiana\tgf\nFrench Polynesia\tpf\nGabon\tga\nGambia\tgm\nGeorgia\tge\nGhana\tgh\nGibraltar\tgi\nGreenland\tgl\nGrenada\tgd\nGuadeloupe\tgp\nGuatemala\tgt\nGuinea\tgn\nGuinea-Bissau\tgw\nGuyana\tgy\nHaiti\tht\nHonduras\thn\nIceland\tis\nIndia\tin\nIndonesia\tid\nIraq\tiq\nJamaica\tjm\nJapan\tjp\nKazakhstan\tkz\nKenya\tke\nKiribati\tki\nKuwait\tkw\nKyrgyzstan\tkg\nLebanon\tlb\nLesotho\tls\nLiberia\tlr\nLibyan Arab Jamahiriya\tly\nLiechtenstein\tli\nMacedonia\tmk\nMadagascar\tmg\nMalawi\tmw\nMaldives\tmv\nMali\tml\nMarshall Islands\tmh\nMartinique\tmq\nMauritania\tmr\nMayotte\tyt\nMexico\tmx\nMicronesia, Federated States of\tfm\nMoldova, Republic of\tmd\nMonaco\tmc\nMongolia\tmn\nMontenegro\tme\nMontserrat\tms\nMorocco\tma\nMozambique\tmz\nNamibia\tna\nNauru\tnr\nNepal\tnp\nNetherlands Antilles\tan\nNew Caledonia\tnc\nNicaragua\tni\nNiger\tne\nNiue\tnu\nNorfolk Island\tnf\nNorway\tno\nOman\tom\nPakistan\tpk\nPalau\tpw\nPalestinian Territory, Occupied\tps\nPanama\tpa\nPapua New Guinea\tpg\nPeru\tpe\nPhilippines\tph\nPitcairn\tpn\nQatar\tqa\nReunion\tre\nRussian Federation\tru\nSaint Helena\tsh\nSt. Kitts and Nevis\tkn\nSt. Lucia\tlc\nSt. Pierre and Miquelon\tpm\nSt. Vincent and the Grenadines\tvc\nSt. Martin (French part)\tmf\nSamoa\tws\nSan Marino\tsm\nSao Tome and Principe\tst\nSaudi Arabia\tsa\nSerbia\trs\nSeychelles\tsc\nSierra Leone\tsl\nSint Maarten (Dutch part)\tsx\nSolomon Islands\tsb\nSomalia\tso\nSouth Africa\tza\nSouth Sudan\tss\nSri Lanka\tlk\nSuriname\tsr\nSudan\tsd\nSvalbard and Jan Mayen\tsj\nSwaziland\tsz\nSwitzerland\tch\nTaiwan, Province of China\ttw\nTajikistan\ttj\nTanzania, United Republic of\ttz\nThailand\tth\nTimor-Leste\ttl\nTogo\ttg\nTokelau\ttk\nTonga\tto\nTrinidad and Tobago\ttt\nTunisia\ttn\nTurkey\ttr\nTurkmenistan\ttm\nTurks and Caicos Islands\ttc\nTuvalu\ttv\nUganda\tug\nUkraine\tua\nUruguay\tuy\nUzbekistan\tuz\nVenezuela\tve\nVietnam\tvn\nVirgin Islands, British\tvg\nWallis and Futuna\twf\nWestern Sahara\teh\nYemen\tye\nZambia\tzm\nZimbabwe\tzw\nWallets\n\nCountries supporting Wallets on Deriv.\n\nCountry\tCountry Code\nAfghanistan\taf\n√Öland Islands\tax\nAlbania\tal\nAlgeria\tdz\nAndorra\tad\nAngola\tao\nAnguilla\tai\nAntigua and Barbuda\tag\nArgentina\tar\nArmenia\tam\nAruba\taw\nAzerbaijan\taz\nBahamas\tbs\nBahrain\tbh\nBangladesh\tbd\nBarbados\tbb\nBelize\tbz\nBenin\tbj\nBermuda\tbm\nBhutan\tbt\nBolivia\tbo\nBosnia and Herzegovina\tba\nBotswana\tbw\nBrazil\tbr\nBritish Indian Ocean Territory\tio\nBrunei Darussalam\tbn\nBurkina Faso\tbf\nBurundi\tbi\nCambodia\tkh\nCameroon\tcm\nCape Verde\tcv\nCaribbean Netherlands\tbq\nCentral African Republic\tcf\nChad\ttd\nChile\tcl\nChina\tcn\nChristmas Island\tcx\nCocos (Keeling) Islands\tcc\nColombia\tco\nComoros\tkm\nCongo - Brazzaville\tcg\nCongo - Kinshasa\tcd\nCook Islands\tck\nCosta Rica\tcr\nC√¥te d'Ivoire\tci\nCura√ßao\tcw\nDjibouti\tdj\nDominica\tdm\nDominican Republic\tdo\nEcuador\tec\nEgypt\teg\nEl Salvador\tsv\nEquatorial Guinea\tgq\nEritrea\ter\nEswatini (Swaziland)\tsz\nEthiopia\tet\nFalkland Islands (Malvinas)\tfk\nFaroe Islands\tfo\nFiji\tfj\nFrench Guiana\tgf\nFrench Polynesia\tpf\nGabon\tga\nGambia\tgm\nGeorgia\tge\nGhana\tgh\nGibraltar\tgi\nGreenland\tgl\nGrenada\tgd\nGuadeloupe\tgp\nGuatemala\tgt\nGuinea\tgn\nGuinea-Bissau\tgw\nGuyana\tgy\nHaiti\tht\nHonduras\thn\nIceland\tis\nIndia\tin\nIraq\tiq\nIsrael\til\nJamaica\tjm\nJapan\tjp\nKazakhstan\tkz\nKenya\tke\nKiribati\tki\nKuwait\tkw\nKyrgyzstan\tkg\nLebanon\tlb\nLesotho\tls\nLiberia\tlr\nLibya\tly\nLiechtenstein\tli\nMadagascar\tmg\nMacau\tmo\nMalawi\tmw\nMaldives\tmv\nMali\tml\nMarshall Islands\tmh\nMartinique\tmq\nMauritania\tmr\nMayotte\tyt\nMexico\tmx\nMicronesia (Federated States of)\tfm\nMoldova, Republic of\tmd\nMonaco\tmc\nMongolia\tmn\nMontenegro\tme\nMontserrat\tms\nMorocco\tma\nMozambique\tmz\nNamibia\tna\nNauru\tnr\nNepal\tnp\nNew Caledonia\tnc\nNew Zealand\tnz\nNicaragua\tni\nNiger\tne\nNigeria\tng\nNiue\tnu\nNorfolk Island\tnf\nNorth Korea\tkp\nNorway\tno\nOman\tom\nPakistan\tpk\nPalau\tpw\nPalestine, State of\tps\nPanama\tpa\nPapua New Guinea\tpg\nPeru\tpe\nPhilippines\tph\nPitcairn\tpn\nQatar\tqa\nR√©union\tre\nSaint Barth√©lemy\tbl\nSaint Helena, Ascension and Tristan da Cunha\tsh\nSaint Kitts and Nevis\tkn\nSaint Lucia\tlc\nSaint Martin (French part)\tmf\nSaint Pierre and Miquelon\tpm\nSamoa\tws\nSan Marino\tsm\nSao Tome and Principe\tst\nSaudi Arabia\tsa\nSerbia\trs\nSeychelles\tsc\nSierra Leone\tsl\nSint Maarten (Dutch part)\tsx\nSolomon Islands\tsb\nSomalia\tso\nSouth Africa\tza\nSouth Korea\tkr\nSouth Sudan\tss\nSri Lanka\tlk\nSudan\tsd\nSuriname\tsr\nSvalbard and Jan Mayen\tsj\nEswatini (Swaziland)\tsz\nSwitzerland\tch\nTaiwan\ttw\nTajikistan\ttj\nTanzania, United Republic of\ttz\nThailand\tth\nTimor-Leste\ttl\nTogo\ttg\nTokelau\ttk\nTonga\tto\nTrinidad and Tobago\ttt\nTunisia\ttn\nTurkmenistan\ttm\nTurks and Caicos Islands\ttc\nTuvalu\ttv\nTurkey\ttr\nUganda\tug\nUruguay\tuy\nUzbekistan\tuz\nVenezuela, Bolivarian Republic of\tve\nVietnam\tvn\nWallis and Futuna\twf\nWestern Sahara\teh\nYemen\tye\nZambia\tzm\nZimbabwe\tzw\nMT5\n\nCountries supporting MT5 trading on Deriv.\n\nCountry\tCountry Code\nArmenia\tam\nAustria\tat\nAzerbaijan\taz\nBahrain\tbh\nBangladesh\tbd\nBhutan\tbt\nBrazil\tbr\nBrunei\tbn\nBulgaria\tbg\nCambodia\tkh\nChile\tcl\nChina\tcn\nColombia\tco\nCosta Rica\tcr\nCroatia\thr\nCyprus\tcy\nCzech Republic\tcz\nDenmark\tdk\nDominican Republic\tdo\nEcuador\tec\nEgypt\teg\nEl Salvador\tsv\nEstonia\tee\nFiji\tfj\nFinland\tfi\nFrance\tfr\nGeorgia\tge\nGermany\tde\nGhana\tgh\nGreece\tgr\nGuatemala\tgt\nHonduras\thn\nHungary\thu\nIceland\tis\nIndia\tin\nIndonesia\tid\nIran\tir\nIraq\tiq\nIreland\tie\nItaly\tit\nJamaica\tjm\nJapan\tjp\nKazakhstan\tkz\nKenya\tke\nKorea, Democratic People‚Äôs Republic of\tkp\nKuwait\tkw\nKyrgyzstan\tkg\nLaos\tla\nLatvia\tlv\nLebanon\tlb\nLiechtenstein\tli\nLithuania\tlt\nLuxembourg\tlu\nMacedonia\tmk\nMaldives\tmv\nMexico\tmx\nMonaco\tmc\nMongolia\tmn\nMontenegro\tme\nMorocco\tma\nNepal\tnp\nNetherlands\tnl\nNew Zealand\tnz\nNicaragua\tni\nNigeria\tng\nOman\tom\nPakistan\tpk\nPanama\tpa\nParaguay\tpy\nPeru\tpe\nPhilippines\tph\nPoland\tpl\nPortugal\tpt\nQatar\tqa\nRomania\tro\nSaudi Arabia\tsa\nSerbia\trs\nSlovakia\tsk\nSlovenia\tsi\nSouth Africa\tza\nSpain\tes\nSri Lanka\tlk\nSuriname\tsr\nSweden\tse\nSwitzerland\tch\nTaiwan\ttw\nTajikistan\ttj\nThailand\tth\nTrinidad and Tobago\ttt\nTunisia\ttn\nTurkey\ttr\nTurkmenistan\ttm\nUkraine\tua\nUnited Kingdom (UK)\tgb\nUruguay\tuy\nUzbekistan\tuz\nVatican City\tva\nVenezuela\tve\nVietnam\tvn\n\nUpdated 12 days ago\n\nDid this page help you?\nYes\nNo",
      "headings": [
        {
          "level": "h2",
          "text": "üìòP2P APIs, Wallets and MT5 APIs are available only in specific countries."
        },
        {
          "level": "h1",
          "text": "P2P"
        },
        {
          "level": "h1",
          "text": "Wallets"
        },
        {
          "level": "h1",
          "text": "MT5"
        }
      ],
      "codeBlocks": [],
      "tables": [
        "<table><thead><tr><th>Country</th><th>Country Code</th></tr></thead><tbody><tr><td>Afghanistan</td><td>af</td></tr><tr><td>Aland Islands</td><td>ax</td></tr><tr><td>Albania</td><td>al</td></tr><tr><td>Algeria</td><td>dz</td></tr><tr><td>Andorra</td><td>ad</td></tr><tr><td>Angola</td><td>ao</td></tr><tr><td>Anguilla</td><td>ai</td></tr><tr><td>Antarctica</td><td>aq</td></tr><tr><td>Antigua and Barbuda</td><td>ag</td></tr><tr><td>Argentina</td><td>ar</td></tr><tr><td>Armenia</td><td>am</td></tr><tr><td>Aruba</td><td>aw</td></tr><tr><td>Azerbaijan</td><td>az</td></tr><tr><td>Bahamas</td><td>bs</td></tr><tr><td>Bahrain</td><td>bh</td></tr><tr><td>Bangladesh</td><td>bd</td></tr><tr><td>Barbados</td><td>bb</td></tr><tr><td>Belize</td><td>bz</td></tr><tr><td>Benin</td><td>bj</td></tr><tr><td>Bermuda</td><td>bm</td></tr><tr><td>Bhutan</td><td>bt</td></tr><tr><td>Bolivia</td><td>bo</td></tr><tr><td>Bosnia and Herzegovina</td><td>ba</td></tr><tr><td>Botswana</td><td>bw</td></tr><tr><td>Brazil</td><td>br</td></tr><tr><td>British Indian Ocean Territory</td><td>io</td></tr><tr><td>British Virgin Islands</td><td>vg</td></tr><tr><td>Brunei Darussalam</td><td>bn</td></tr><tr><td>Burkina Faso</td><td>bf</td></tr><tr><td>Burundi</td><td>bi</td></tr><tr><td>Cambodia</td><td>kh</td></tr><tr><td>Cameroon</td><td>cm</td></tr><tr><td>Cape Verde</td><td>cv</td></tr><tr><td>Caribbean Netherlands (Bonaire, Sint Eustatius and Saba)</td><td>bq</td></tr><tr><td>Central African Republic</td><td>cf</td></tr><tr><td>Chad</td><td>td</td></tr><tr><td>Chile</td><td>cl</td></tr><tr><td>China</td><td>cn</td></tr><tr><td>Christmas Island</td><td>cx</td></tr><tr><td>Cocos (Keeling) Islands</td><td>cc</td></tr><tr><td>Colombia</td><td>co</td></tr><tr><td>Comoros</td><td>km</td></tr><tr><td>Congo</td><td>cg</td></tr><tr><td>Cook Islands</td><td>ck</td></tr><tr><td>Costa Rica</td><td>cr</td></tr><tr><td>C√¥te d‚ÄôIvoire</td><td>ci</td></tr><tr><td>Curacao</td><td>cw</td></tr><tr><td>Djibouti</td><td>dj</td></tr><tr><td>Dominica</td><td>dm</td></tr><tr><td>Dominican Republic</td><td>do</td></tr><tr><td>Ecuador</td><td>ec</td></tr><tr><td>Egypt</td><td>eg</td></tr><tr><td>El Salvador</td><td>sv</td></tr><tr><td>Equatorial Guinea</td><td>gq</td></tr><tr><td>Eritrea</td><td>er</td></tr><tr><td>Ethiopia</td><td>et</td></tr><tr><td>Falkland Islands (Malvinas)</td><td>fk</td></tr><tr><td>Faroe Islands</td><td>fo</td></tr><tr><td>Fiji</td><td>fj</td></tr><tr><td>French Guiana</td><td>gf</td></tr><tr><td>French Polynesia</td><td>pf</td></tr><tr><td>Gabon</td><td>ga</td></tr><tr><td>Gambia</td><td>gm</td></tr><tr><td>Georgia</td><td>ge</td></tr><tr><td>Ghana</td><td>gh</td></tr><tr><td>Gibraltar</td><td>gi</td></tr><tr><td>Greenland</td><td>gl</td></tr><tr><td>Grenada</td><td>gd</td></tr><tr><td>Guadeloupe</td><td>gp</td></tr><tr><td>Guatemala</td><td>gt</td></tr><tr><td>Guinea</td><td>gn</td></tr><tr><td>Guinea-Bissau</td><td>gw</td></tr><tr><td>Guyana</td><td>gy</td></tr><tr><td>Haiti</td><td>ht</td></tr><tr><td>Honduras</td><td>hn</td></tr><tr><td>Iceland</td><td>is</td></tr><tr><td>India</td><td>in</td></tr><tr><td>Indonesia</td><td>id</td></tr><tr><td>Iraq</td><td>iq</td></tr><tr><td>Jamaica</td><td>jm</td></tr><tr><td>Kazakhstan</td><td>kz</td></tr><tr><td>Kenya</td><td>ke</td></tr><tr><td>Kiribati</td><td>ki</td></tr><tr><td>Kuwait</td><td>kw</td></tr><tr><td>Kyrgyzstan</td><td>kg</td></tr><tr><td>Lebanon</td><td>lb</td></tr><tr><td>Lesotho</td><td>ls</td></tr><tr><td>Liberia</td><td>lr</td></tr><tr><td>Libyan Arab Jamahiriya</td><td>ly</td></tr><tr><td>Liechtenstein</td><td>li</td></tr><tr><td>Macedonia</td><td>mk</td></tr><tr><td>Madagascar</td><td>mg</td></tr><tr><td>Malawi</td><td>mw</td></tr><tr><td>Maldives</td><td>mv</td></tr><tr><td>Mali</td><td>ml</td></tr><tr><td>Marshall Islands</td><td>mh</td></tr><tr><td>Martinique</td><td>mq</td></tr><tr><td>Mauritania</td><td>mr</td></tr><tr><td>Mayotte</td><td>yt</td></tr><tr><td>Mexico</td><td>mx</td></tr><tr><td>Micronesia, Federated States of</td><td>fm</td></tr><tr><td>Moldova, Republic of</td><td>md</td></tr><tr><td>Monaco</td><td>mc</td></tr><tr><td>Mongolia</td><td>mn</td></tr><tr><td>Montenegro</td><td>me</td></tr><tr><td>Montserrat</td><td>ms</td></tr><tr><td>Morocco</td><td>ma</td></tr><tr><td>Mozambique</td><td>mz</td></tr><tr><td>Namibia</td><td>na</td></tr><tr><td>Nauru</td><td>nr</td></tr><tr><td>Nepal</td><td>np</td></tr><tr><td>Netherlands</td><td>nl</td></tr><tr><td>New Caledonia</td><td>nc</td></tr><tr><td>New Zealand</td><td>nz</td></tr><tr><td>Nicaragua</td><td>ni</td></tr><tr><td>Niger</td><td>ne</td></tr><tr><td>Nigeria</td><td>ng</td></tr><tr><td>Niue</td><td>nu</td></tr><tr><td>Norfolk Island</td><td>nf</td></tr><tr><td>Oman</td><td>om</td></tr><tr><td>Pakistan</td><td>pk</td></tr><tr><td>Palau</td><td>pw</td></tr><tr><td>Palestinian Territory, Occupied</td><td>ps</td></tr><tr><td>Panama</td><td>pa</td></tr><tr><td>Papua New Guinea</td><td>pg</td></tr><tr><td>Peru</td><td>pe</td></tr><tr><td>Philippines</td><td>ph</td></tr><tr><td>Pitcairn</td><td>pn</td></tr><tr><td>Qatar</td><td>qa</td></tr><tr><td>Reunion</td><td>re</td></tr><tr><td>Russia</td><td>ru</td></tr><tr><td>Saint Helena</td><td>sh</td></tr><tr><td>Saint Kitts and Nevis</td><td>kn</td></tr><tr><td>Saint Lucia</td><td>lc</td></tr><tr><td>Saint Pierre and Miquelon</td><td>pm</td></tr><tr><td>Saint-Martin (French part)</td><td>mf</td></tr><tr><td>Samoa</td><td>ws</td></tr><tr><td>San Marino</td><td>sm</td></tr><tr><td>Sao Tome and Principe</td><td>st</td></tr><tr><td>Saudi Arabia</td><td>sa</td></tr><tr><td>Serbia</td><td>rs</td></tr><tr><td>Seychelles</td><td>sc</td></tr><tr><td>Sierra Leone</td><td>sl</td></tr><tr><td>Sint Maarten (Dutch part)</td><td>sx</td></tr><tr><td>Solomon Islands</td><td>sb</td></tr><tr><td>Somalia</td><td>so</td></tr><tr><td>South Africa</td><td>za</td></tr><tr><td>South Sudan</td><td>ss</td></tr><tr><td>Sri Lanka</td><td>lk</td></tr><tr><td>Sudan</td><td>sd</td></tr><tr><td>Suriname</td><td>sr</td></tr><tr><td>Svalbard and Jan Mayen</td><td>sj</td></tr><tr><td>Swaziland (Eswatini)</td><td>sz</td></tr><tr><td>Switzerland</td><td>ch</td></tr><tr><td>Taiwan, Province of China</td><td>tw</td></tr><tr><td>Tajikistan</td><td>tj</td></tr><tr><td>Tanzania</td><td>tz</td></tr><tr><td>Thailand</td><td>th</td></tr><tr><td>Timor-Leste</td><td>tl</td></tr><tr><td>Togo</td><td>tg</td></tr><tr><td>Tokelau</td><td>tk</td></tr><tr><td>Tonga</td><td>to</td></tr><tr><td>Trinidad and Tobago</td><td>tt</td></tr><tr><td>Tunisia</td><td>tn</td></tr><tr><td>Turkey</td><td>tr</td></tr><tr><td>Turkmenistan</td><td>tm</td></tr><tr><td>Turks and Caicos Islands</td><td>tc</td></tr><tr><td>Tuvalu</td><td>tv</td></tr><tr><td>Uganda</td><td>ug</td></tr><tr><td>Ukraine</td><td>ua</td></tr><tr><td>Uruguay</td><td>uy</td></tr><tr><td>Uzbekistan</td><td>uz</td></tr><tr><td>Venezuela</td><td>ve</td></tr><tr><td>Vietnam</td><td>vn</td></tr><tr><td>Wallis and Futuna</td><td>wf</td></tr><tr><td>Western Sahara</td><td>eh</td></tr><tr><td>Yemen</td><td>ye</td></tr><tr><td>Zambia</td><td>zm</td></tr><tr><td>Zimbabwe</td><td>zw</td></tr></tbody></table>",
        "<table><thead><tr><th>Country</th><th>Country Code</th></tr></thead><tbody><tr><td>Afghanistan</td><td>af</td></tr><tr><td>Aland Islands</td><td>ax</td></tr><tr><td>Albania</td><td>al</td></tr><tr><td>Algeria</td><td>dz</td></tr><tr><td>Andorra</td><td>ad</td></tr><tr><td>Angola</td><td>ao</td></tr><tr><td>Anguilla</td><td>ai</td></tr><tr><td>Antarctica</td><td>aq</td></tr><tr><td>Antigua and Barbuda</td><td>ag</td></tr><tr><td>Argentina</td><td>ar</td></tr><tr><td>Armenia</td><td>am</td></tr><tr><td>Aruba</td><td>aw</td></tr><tr><td>Azerbaijan</td><td>az</td></tr><tr><td>Bahamas</td><td>bs</td></tr><tr><td>Bahrain</td><td>bh</td></tr><tr><td>Bangladesh</td><td>bd</td></tr><tr><td>Barbados</td><td>bb</td></tr><tr><td>Belize</td><td>bz</td></tr><tr><td>Benin</td><td>bj</td></tr><tr><td>Bermuda</td><td>bm</td></tr><tr><td>Bhutan</td><td>bt</td></tr><tr><td>Bolivia</td><td>bo</td></tr><tr><td>Bosnia and Herzegovina</td><td>ba</td></tr><tr><td>Botswana</td><td>bw</td></tr><tr><td>Brazil</td><td>br</td></tr><tr><td>British Indian Ocean Territory</td><td>io</td></tr><tr><td>Brunei Darussalam</td><td>bn</td></tr><tr><td>Burkina Faso</td><td>bf</td></tr><tr><td>Burundi</td><td>bi</td></tr><tr><td>Cambodia</td><td>kh</td></tr><tr><td>Cameroon</td><td>cm</td></tr><tr><td>Cape Verde</td><td>cv</td></tr><tr><td>Caribbean Netherlands</td><td>bq</td></tr><tr><td>Central African Republic</td><td>cf</td></tr><tr><td>Chad</td><td>td</td></tr><tr><td>Chile</td><td>cl</td></tr><tr><td>China</td><td>cn</td></tr><tr><td>Christmas Island</td><td>cx</td></tr><tr><td>Cocos (Keeling) Islands</td><td>cc</td></tr><tr><td>Colombia</td><td>co</td></tr><tr><td>Comoros</td><td>km</td></tr><tr><td>Congo</td><td>cg</td></tr><tr><td>Cook Islands</td><td>ck</td></tr><tr><td>Costa Rica</td><td>cr</td></tr><tr><td>Cote D'Ivoire</td><td>ci</td></tr><tr><td>Curacao</td><td>cw</td></tr><tr><td>Djibouti</td><td>dj</td></tr><tr><td>Dominica</td><td>dm</td></tr><tr><td>Dominican Republic</td><td>do</td></tr><tr><td>Ecuador</td><td>ec</td></tr><tr><td>Egypt</td><td>eg</td></tr><tr><td>El Salvador</td><td>sv</td></tr><tr><td>Equatorial Guinea</td><td>gq</td></tr><tr><td>Eritrea</td><td>er</td></tr><tr><td>Ethiopia</td><td>et</td></tr><tr><td>Falkland Islands (Malvinas)</td><td>fk</td></tr><tr><td>Faroe Islands</td><td>fo</td></tr><tr><td>Fiji</td><td>fj</td></tr><tr><td>French Guiana</td><td>gf</td></tr><tr><td>French Polynesia</td><td>pf</td></tr><tr><td>Gabon</td><td>ga</td></tr><tr><td>Gambia</td><td>gm</td></tr><tr><td>Georgia</td><td>ge</td></tr><tr><td>Ghana</td><td>gh</td></tr><tr><td>Gibraltar</td><td>gi</td></tr><tr><td>Greenland</td><td>gl</td></tr><tr><td>Grenada</td><td>gd</td></tr><tr><td>Guadeloupe</td><td>gp</td></tr><tr><td>Guatemala</td><td>gt</td></tr><tr><td>Guinea</td><td>gn</td></tr><tr><td>Guinea-Bissau</td><td>gw</td></tr><tr><td>Guyana</td><td>gy</td></tr><tr><td>Haiti</td><td>ht</td></tr><tr><td>Honduras</td><td>hn</td></tr><tr><td>Iceland</td><td>is</td></tr><tr><td>India</td><td>in</td></tr><tr><td>Indonesia</td><td>id</td></tr><tr><td>Iraq</td><td>iq</td></tr><tr><td>Jamaica</td><td>jm</td></tr><tr><td>Japan</td><td>jp</td></tr><tr><td>Kazakhstan</td><td>kz</td></tr><tr><td>Kenya</td><td>ke</td></tr><tr><td>Kiribati</td><td>ki</td></tr><tr><td>Kuwait</td><td>kw</td></tr><tr><td>Kyrgyzstan</td><td>kg</td></tr><tr><td>Lebanon</td><td>lb</td></tr><tr><td>Lesotho</td><td>ls</td></tr><tr><td>Liberia</td><td>lr</td></tr><tr><td>Libyan Arab Jamahiriya</td><td>ly</td></tr><tr><td>Liechtenstein</td><td>li</td></tr><tr><td>Macedonia</td><td>mk</td></tr><tr><td>Madagascar</td><td>mg</td></tr><tr><td>Malawi</td><td>mw</td></tr><tr><td>Maldives</td><td>mv</td></tr><tr><td>Mali</td><td>ml</td></tr><tr><td>Marshall Islands</td><td>mh</td></tr><tr><td>Martinique</td><td>mq</td></tr><tr><td>Mauritania</td><td>mr</td></tr><tr><td>Mayotte</td><td>yt</td></tr><tr><td>Mexico</td><td>mx</td></tr><tr><td>Micronesia, Federated States of</td><td>fm</td></tr><tr><td>Moldova, Republic of</td><td>md</td></tr><tr><td>Monaco</td><td>mc</td></tr><tr><td>Mongolia</td><td>mn</td></tr><tr><td>Montenegro</td><td>me</td></tr><tr><td>Montserrat</td><td>ms</td></tr><tr><td>Morocco</td><td>ma</td></tr><tr><td>Mozambique</td><td>mz</td></tr><tr><td>Namibia</td><td>na</td></tr><tr><td>Nauru</td><td>nr</td></tr><tr><td>Nepal</td><td>np</td></tr><tr><td>Netherlands Antilles</td><td>an</td></tr><tr><td>New Caledonia</td><td>nc</td></tr><tr><td>Nicaragua</td><td>ni</td></tr><tr><td>Niger</td><td>ne</td></tr><tr><td>Niue</td><td>nu</td></tr><tr><td>Norfolk Island</td><td>nf</td></tr><tr><td>Norway</td><td>no</td></tr><tr><td>Oman</td><td>om</td></tr><tr><td>Pakistan</td><td>pk</td></tr><tr><td>Palau</td><td>pw</td></tr><tr><td>Palestinian Territory, Occupied</td><td>ps</td></tr><tr><td>Panama</td><td>pa</td></tr><tr><td>Papua New Guinea</td><td>pg</td></tr><tr><td>Peru</td><td>pe</td></tr><tr><td>Philippines</td><td>ph</td></tr><tr><td>Pitcairn</td><td>pn</td></tr><tr><td>Qatar</td><td>qa</td></tr><tr><td>Reunion</td><td>re</td></tr><tr><td>Russian Federation</td><td>ru</td></tr><tr><td>Saint Helena</td><td>sh</td></tr><tr><td>St. Kitts and Nevis</td><td>kn</td></tr><tr><td>St. Lucia</td><td>lc</td></tr><tr><td>St. Pierre and Miquelon</td><td>pm</td></tr><tr><td>St. Vincent and the Grenadines</td><td>vc</td></tr><tr><td>St. Martin (French part)</td><td>mf</td></tr><tr><td>Samoa</td><td>ws</td></tr><tr><td>San Marino</td><td>sm</td></tr><tr><td>Sao Tome and Principe</td><td>st</td></tr><tr><td>Saudi Arabia</td><td>sa</td></tr><tr><td>Serbia</td><td>rs</td></tr><tr><td>Seychelles</td><td>sc</td></tr><tr><td>Sierra Leone</td><td>sl</td></tr><tr><td>Sint Maarten (Dutch part)</td><td>sx</td></tr><tr><td>Solomon Islands</td><td>sb</td></tr><tr><td>Somalia</td><td>so</td></tr><tr><td>South Africa</td><td>za</td></tr><tr><td>South Sudan</td><td>ss</td></tr><tr><td>Sri Lanka</td><td>lk</td></tr><tr><td>Suriname</td><td>sr</td></tr><tr><td>Sudan</td><td>sd</td></tr><tr><td>Svalbard and Jan Mayen</td><td>sj</td></tr><tr><td>Swaziland</td><td>sz</td></tr><tr><td>Switzerland</td><td>ch</td></tr><tr><td>Taiwan, Province of China</td><td>tw</td></tr><tr><td>Tajikistan</td><td>tj</td></tr><tr><td>Tanzania, United Republic of</td><td>tz</td></tr><tr><td>Thailand</td><td>th</td></tr><tr><td>Timor-Leste</td><td>tl</td></tr><tr><td>Togo</td><td>tg</td></tr><tr><td>Tokelau</td><td>tk</td></tr><tr><td>Tonga</td><td>to</td></tr><tr><td>Trinidad and Tobago</td><td>tt</td></tr><tr><td>Tunisia</td><td>tn</td></tr><tr><td>Turkey</td><td>tr</td></tr><tr><td>Turkmenistan</td><td>tm</td></tr><tr><td>Turks and Caicos Islands</td><td>tc</td></tr><tr><td>Tuvalu</td><td>tv</td></tr><tr><td>Uganda</td><td>ug</td></tr><tr><td>Ukraine</td><td>ua</td></tr><tr><td>Uruguay</td><td>uy</td></tr><tr><td>Uzbekistan</td><td>uz</td></tr><tr><td>Venezuela</td><td>ve</td></tr><tr><td>Vietnam</td><td>vn</td></tr><tr><td>Virgin Islands, British</td><td>vg</td></tr><tr><td>Wallis and Futuna</td><td>wf</td></tr><tr><td>Western Sahara</td><td>eh</td></tr><tr><td>Yemen</td><td>ye</td></tr><tr><td>Zambia</td><td>zm</td></tr><tr><td>Zimbabwe</td><td>zw</td></tr></tbody></table>",
        "<table><thead><tr><th>Country</th><th>Country Code</th></tr></thead><tbody><tr><td>Afghanistan</td><td>af</td></tr><tr><td>√Öland Islands</td><td>ax</td></tr><tr><td>Albania</td><td>al</td></tr><tr><td>Algeria</td><td>dz</td></tr><tr><td>Andorra</td><td>ad</td></tr><tr><td>Angola</td><td>ao</td></tr><tr><td>Anguilla</td><td>ai</td></tr><tr><td>Antigua and Barbuda</td><td>ag</td></tr><tr><td>Argentina</td><td>ar</td></tr><tr><td>Armenia</td><td>am</td></tr><tr><td>Aruba</td><td>aw</td></tr><tr><td>Azerbaijan</td><td>az</td></tr><tr><td>Bahamas</td><td>bs</td></tr><tr><td>Bahrain</td><td>bh</td></tr><tr><td>Bangladesh</td><td>bd</td></tr><tr><td>Barbados</td><td>bb</td></tr><tr><td>Belize</td><td>bz</td></tr><tr><td>Benin</td><td>bj</td></tr><tr><td>Bermuda</td><td>bm</td></tr><tr><td>Bhutan</td><td>bt</td></tr><tr><td>Bolivia</td><td>bo</td></tr><tr><td>Bosnia and Herzegovina</td><td>ba</td></tr><tr><td>Botswana</td><td>bw</td></tr><tr><td>Brazil</td><td>br</td></tr><tr><td>British Indian Ocean Territory</td><td>io</td></tr><tr><td>Brunei Darussalam</td><td>bn</td></tr><tr><td>Burkina Faso</td><td>bf</td></tr><tr><td>Burundi</td><td>bi</td></tr><tr><td>Cambodia</td><td>kh</td></tr><tr><td>Cameroon</td><td>cm</td></tr><tr><td>Cape Verde</td><td>cv</td></tr><tr><td>Caribbean Netherlands</td><td>bq</td></tr><tr><td>Central African Republic</td><td>cf</td></tr><tr><td>Chad</td><td>td</td></tr><tr><td>Chile</td><td>cl</td></tr><tr><td>China</td><td>cn</td></tr><tr><td>Christmas Island</td><td>cx</td></tr><tr><td>Cocos (Keeling) Islands</td><td>cc</td></tr><tr><td>Colombia</td><td>co</td></tr><tr><td>Comoros</td><td>km</td></tr><tr><td>Congo - Brazzaville</td><td>cg</td></tr><tr><td>Congo - Kinshasa</td><td>cd</td></tr><tr><td>Cook Islands</td><td>ck</td></tr><tr><td>Costa Rica</td><td>cr</td></tr><tr><td>C√¥te d'Ivoire</td><td>ci</td></tr><tr><td>Cura√ßao</td><td>cw</td></tr><tr><td>Djibouti</td><td>dj</td></tr><tr><td>Dominica</td><td>dm</td></tr><tr><td>Dominican Republic</td><td>do</td></tr><tr><td>Ecuador</td><td>ec</td></tr><tr><td>Egypt</td><td>eg</td></tr><tr><td>El Salvador</td><td>sv</td></tr><tr><td>Equatorial Guinea</td><td>gq</td></tr><tr><td>Eritrea</td><td>er</td></tr><tr><td>Eswatini (Swaziland)</td><td>sz</td></tr><tr><td>Ethiopia</td><td>et</td></tr><tr><td>Falkland Islands (Malvinas)</td><td>fk</td></tr><tr><td>Faroe Islands</td><td>fo</td></tr><tr><td>Fiji</td><td>fj</td></tr><tr><td>French Guiana</td><td>gf</td></tr><tr><td>French Polynesia</td><td>pf</td></tr><tr><td>Gabon</td><td>ga</td></tr><tr><td>Gambia</td><td>gm</td></tr><tr><td>Georgia</td><td>ge</td></tr><tr><td>Ghana</td><td>gh</td></tr><tr><td>Gibraltar</td><td>gi</td></tr><tr><td>Greenland</td><td>gl</td></tr><tr><td>Grenada</td><td>gd</td></tr><tr><td>Guadeloupe</td><td>gp</td></tr><tr><td>Guatemala</td><td>gt</td></tr><tr><td>Guinea</td><td>gn</td></tr><tr><td>Guinea-Bissau</td><td>gw</td></tr><tr><td>Guyana</td><td>gy</td></tr><tr><td>Haiti</td><td>ht</td></tr><tr><td>Honduras</td><td>hn</td></tr><tr><td>Iceland</td><td>is</td></tr><tr><td>India</td><td>in</td></tr><tr><td>Iraq</td><td>iq</td></tr><tr><td>Israel</td><td>il</td></tr><tr><td>Jamaica</td><td>jm</td></tr><tr><td>Japan</td><td>jp</td></tr><tr><td>Kazakhstan</td><td>kz</td></tr><tr><td>Kenya</td><td>ke</td></tr><tr><td>Kiribati</td><td>ki</td></tr><tr><td>Kuwait</td><td>kw</td></tr><tr><td>Kyrgyzstan</td><td>kg</td></tr><tr><td>Lebanon</td><td>lb</td></tr><tr><td>Lesotho</td><td>ls</td></tr><tr><td>Liberia</td><td>lr</td></tr><tr><td>Libya</td><td>ly</td></tr><tr><td>Liechtenstein</td><td>li</td></tr><tr><td>Madagascar</td><td>mg</td></tr><tr><td>Macau</td><td>mo</td></tr><tr><td>Malawi</td><td>mw</td></tr><tr><td>Maldives</td><td>mv</td></tr><tr><td>Mali</td><td>ml</td></tr><tr><td>Marshall Islands</td><td>mh</td></tr><tr><td>Martinique</td><td>mq</td></tr><tr><td>Mauritania</td><td>mr</td></tr><tr><td>Mayotte</td><td>yt</td></tr><tr><td>Mexico</td><td>mx</td></tr><tr><td>Micronesia (Federated States of)</td><td>fm</td></tr><tr><td>Moldova, Republic of</td><td>md</td></tr><tr><td>Monaco</td><td>mc</td></tr><tr><td>Mongolia</td><td>mn</td></tr><tr><td>Montenegro</td><td>me</td></tr><tr><td>Montserrat</td><td>ms</td></tr><tr><td>Morocco</td><td>ma</td></tr><tr><td>Mozambique</td><td>mz</td></tr><tr><td>Namibia</td><td>na</td></tr><tr><td>Nauru</td><td>nr</td></tr><tr><td>Nepal</td><td>np</td></tr><tr><td>New Caledonia</td><td>nc</td></tr><tr><td>New Zealand</td><td>nz</td></tr><tr><td>Nicaragua</td><td>ni</td></tr><tr><td>Niger</td><td>ne</td></tr><tr><td>Nigeria</td><td>ng</td></tr><tr><td>Niue</td><td>nu</td></tr><tr><td>Norfolk Island</td><td>nf</td></tr><tr><td>North Korea</td><td>kp</td></tr><tr><td>Norway</td><td>no</td></tr><tr><td>Oman</td><td>om</td></tr><tr><td>Pakistan</td><td>pk</td></tr><tr><td>Palau</td><td>pw</td></tr><tr><td>Palestine, State of</td><td>ps</td></tr><tr><td>Panama</td><td>pa</td></tr><tr><td>Papua New Guinea</td><td>pg</td></tr><tr><td>Peru</td><td>pe</td></tr><tr><td>Philippines</td><td>ph</td></tr><tr><td>Pitcairn</td><td>pn</td></tr><tr><td>Qatar</td><td>qa</td></tr><tr><td>R√©union</td><td>re</td></tr><tr><td>Saint Barth√©lemy</td><td>bl</td></tr><tr><td>Saint Helena, Ascension and Tristan da Cunha</td><td>sh</td></tr><tr><td>Saint Kitts and Nevis</td><td>kn</td></tr><tr><td>Saint Lucia</td><td>lc</td></tr><tr><td>Saint Martin (French part)</td><td>mf</td></tr><tr><td>Saint Pierre and Miquelon</td><td>pm</td></tr><tr><td>Samoa</td><td>ws</td></tr><tr><td>San Marino</td><td>sm</td></tr><tr><td>Sao Tome and Principe</td><td>st</td></tr><tr><td>Saudi Arabia</td><td>sa</td></tr><tr><td>Serbia</td><td>rs</td></tr><tr><td>Seychelles</td><td>sc</td></tr><tr><td>Sierra Leone</td><td>sl</td></tr><tr><td>Sint Maarten (Dutch part)</td><td>sx</td></tr><tr><td>Solomon Islands</td><td>sb</td></tr><tr><td>Somalia</td><td>so</td></tr><tr><td>South Africa</td><td>za</td></tr><tr><td>South Korea</td><td>kr</td></tr><tr><td>South Sudan</td><td>ss</td></tr><tr><td>Sri Lanka</td><td>lk</td></tr><tr><td>Sudan</td><td>sd</td></tr><tr><td>Suriname</td><td>sr</td></tr><tr><td>Svalbard and Jan Mayen</td><td>sj</td></tr><tr><td>Eswatini (Swaziland)</td><td>sz</td></tr><tr><td>Switzerland</td><td>ch</td></tr><tr><td>Taiwan</td><td>tw</td></tr><tr><td>Tajikistan</td><td>tj</td></tr><tr><td>Tanzania, United Republic of</td><td>tz</td></tr><tr><td>Thailand</td><td>th</td></tr><tr><td>Timor-Leste</td><td>tl</td></tr><tr><td>Togo</td><td>tg</td></tr><tr><td>Tokelau</td><td>tk</td></tr><tr><td>Tonga</td><td>to</td></tr><tr><td>Trinidad and Tobago</td><td>tt</td></tr><tr><td>Tunisia</td><td>tn</td></tr><tr><td>Turkmenistan</td><td>tm</td></tr><tr><td>Turks and Caicos Islands</td><td>tc</td></tr><tr><td>Tuvalu</td><td>tv</td></tr><tr><td>Turkey</td><td>tr</td></tr><tr><td>Uganda</td><td>ug</td></tr><tr><td>Uruguay</td><td>uy</td></tr><tr><td>Uzbekistan</td><td>uz</td></tr><tr><td>Venezuela, Bolivarian Republic of</td><td>ve</td></tr><tr><td>Vietnam</td><td>vn</td></tr><tr><td>Wallis and Futuna</td><td>wf</td></tr><tr><td>Western Sahara</td><td>eh</td></tr><tr><td>Yemen</td><td>ye</td></tr><tr><td>Zambia</td><td>zm</td></tr><tr><td>Zimbabwe</td><td>zw</td></tr></tbody></table>",
        "<table><thead><tr><th style=\"text-align:left\">Country</th><th style=\"text-align:left\">Country Code</th></tr></thead><tbody><tr><td style=\"text-align:left\">Armenia</td><td style=\"text-align:left\">am</td></tr><tr><td style=\"text-align:left\">Austria</td><td style=\"text-align:left\">at</td></tr><tr><td style=\"text-align:left\">Azerbaijan</td><td style=\"text-align:left\">az</td></tr><tr><td style=\"text-align:left\">Bahrain</td><td style=\"text-align:left\">bh</td></tr><tr><td style=\"text-align:left\">Bangladesh</td><td style=\"text-align:left\">bd</td></tr><tr><td style=\"text-align:left\">Bhutan</td><td style=\"text-align:left\">bt</td></tr><tr><td style=\"text-align:left\">Brazil</td><td style=\"text-align:left\">br</td></tr><tr><td style=\"text-align:left\">Brunei</td><td style=\"text-align:left\">bn</td></tr><tr><td style=\"text-align:left\">Bulgaria</td><td style=\"text-align:left\">bg</td></tr><tr><td style=\"text-align:left\">Cambodia</td><td style=\"text-align:left\">kh</td></tr><tr><td style=\"text-align:left\">Chile</td><td style=\"text-align:left\">cl</td></tr><tr><td style=\"text-align:left\">China</td><td style=\"text-align:left\">cn</td></tr><tr><td style=\"text-align:left\">Colombia</td><td style=\"text-align:left\">co</td></tr><tr><td style=\"text-align:left\">Costa Rica</td><td style=\"text-align:left\">cr</td></tr><tr><td style=\"text-align:left\">Croatia</td><td style=\"text-align:left\">hr</td></tr><tr><td style=\"text-align:left\">Cyprus</td><td style=\"text-align:left\">cy</td></tr><tr><td style=\"text-align:left\">Czech Republic</td><td style=\"text-align:left\">cz</td></tr><tr><td style=\"text-align:left\">Denmark</td><td style=\"text-align:left\">dk</td></tr><tr><td style=\"text-align:left\">Dominican Republic</td><td style=\"text-align:left\">do</td></tr><tr><td style=\"text-align:left\">Ecuador</td><td style=\"text-align:left\">ec</td></tr><tr><td style=\"text-align:left\">Egypt</td><td style=\"text-align:left\">eg</td></tr><tr><td style=\"text-align:left\">El Salvador</td><td style=\"text-align:left\">sv</td></tr><tr><td style=\"text-align:left\">Estonia</td><td style=\"text-align:left\">ee</td></tr><tr><td style=\"text-align:left\">Fiji</td><td style=\"text-align:left\">fj</td></tr><tr><td style=\"text-align:left\">Finland</td><td style=\"text-align:left\">fi</td></tr><tr><td style=\"text-align:left\">France</td><td style=\"text-align:left\">fr</td></tr><tr><td style=\"text-align:left\">Georgia</td><td style=\"text-align:left\">ge</td></tr><tr><td style=\"text-align:left\">Germany</td><td style=\"text-align:left\">de</td></tr><tr><td style=\"text-align:left\">Ghana</td><td style=\"text-align:left\">gh</td></tr><tr><td style=\"text-align:left\">Greece</td><td style=\"text-align:left\">gr</td></tr><tr><td style=\"text-align:left\">Guatemala</td><td style=\"text-align:left\">gt</td></tr><tr><td style=\"text-align:left\">Honduras</td><td style=\"text-align:left\">hn</td></tr><tr><td style=\"text-align:left\">Hungary</td><td style=\"text-align:left\">hu</td></tr><tr><td style=\"text-align:left\">Iceland</td><td style=\"text-align:left\">is</td></tr><tr><td style=\"text-align:left\">India</td><td style=\"text-align:left\">in</td></tr><tr><td style=\"text-align:left\">Indonesia</td><td style=\"text-align:left\">id</td></tr><tr><td style=\"text-align:left\">Iran</td><td style=\"text-align:left\">ir</td></tr><tr><td style=\"text-align:left\">Iraq</td><td style=\"text-align:left\">iq</td></tr><tr><td style=\"text-align:left\">Ireland</td><td style=\"text-align:left\">ie</td></tr><tr><td style=\"text-align:left\">Italy</td><td style=\"text-align:left\">it</td></tr><tr><td style=\"text-align:left\">Jamaica</td><td style=\"text-align:left\">jm</td></tr><tr><td style=\"text-align:left\">Japan</td><td style=\"text-align:left\">jp</td></tr><tr><td style=\"text-align:left\">Kazakhstan</td><td style=\"text-align:left\">kz</td></tr><tr><td style=\"text-align:left\">Kenya</td><td style=\"text-align:left\">ke</td></tr><tr><td style=\"text-align:left\">Korea, Democratic People‚Äôs Republic of</td><td style=\"text-align:left\">kp</td></tr><tr><td style=\"text-align:left\">Kuwait</td><td style=\"text-align:left\">kw</td></tr><tr><td style=\"text-align:left\">Kyrgyzstan</td><td style=\"text-align:left\">kg</td></tr><tr><td style=\"text-align:left\">Laos</td><td style=\"text-align:left\">la</td></tr><tr><td style=\"text-align:left\">Latvia</td><td style=\"text-align:left\">lv</td></tr><tr><td style=\"text-align:left\">Lebanon</td><td style=\"text-align:left\">lb</td></tr><tr><td style=\"text-align:left\">Liechtenstein</td><td style=\"text-align:left\">li</td></tr><tr><td style=\"text-align:left\">Lithuania</td><td style=\"text-align:left\">lt</td></tr><tr><td style=\"text-align:left\">Luxembourg</td><td style=\"text-align:left\">lu</td></tr><tr><td style=\"text-align:left\">Macedonia</td><td style=\"text-align:left\">mk</td></tr><tr><td style=\"text-align:left\">Maldives</td><td style=\"text-align:left\">mv</td></tr><tr><td style=\"text-align:left\">Mexico</td><td style=\"text-align:left\">mx</td></tr><tr><td style=\"text-align:left\">Monaco</td><td style=\"text-align:left\">mc</td></tr><tr><td style=\"text-align:left\">Mongolia</td><td style=\"text-align:left\">mn</td></tr><tr><td style=\"text-align:left\">Montenegro</td><td style=\"text-align:left\">me</td></tr><tr><td style=\"text-align:left\">Morocco</td><td style=\"text-align:left\">ma</td></tr><tr><td style=\"text-align:left\">Nepal</td><td style=\"text-align:left\">np</td></tr><tr><td style=\"text-align:left\">Netherlands</td><td style=\"text-align:left\">nl</td></tr><tr><td style=\"text-align:left\">New Zealand</td><td style=\"text-align:left\">nz</td></tr><tr><td style=\"text-align:left\">Nicaragua</td><td style=\"text-align:left\">ni</td></tr><tr><td style=\"text-align:left\">Nigeria</td><td style=\"text-align:left\">ng</td></tr><tr><td style=\"text-align:left\">Oman</td><td style=\"text-align:left\">om</td></tr><tr><td style=\"text-align:left\">Pakistan</td><td style=\"text-align:left\">pk</td></tr><tr><td style=\"text-align:left\">Panama</td><td style=\"text-align:left\">pa</td></tr><tr><td style=\"text-align:left\">Paraguay</td><td style=\"text-align:left\">py</td></tr><tr><td style=\"text-align:left\">Peru</td><td style=\"text-align:left\">pe</td></tr><tr><td style=\"text-align:left\">Philippines</td><td style=\"text-align:left\">ph</td></tr><tr><td style=\"text-align:left\">Poland</td><td style=\"text-align:left\">pl</td></tr><tr><td style=\"text-align:left\">Portugal</td><td style=\"text-align:left\">pt</td></tr><tr><td style=\"text-align:left\">Qatar</td><td style=\"text-align:left\">qa</td></tr><tr><td style=\"text-align:left\">Romania</td><td style=\"text-align:left\">ro</td></tr><tr><td style=\"text-align:left\">Saudi Arabia</td><td style=\"text-align:left\">sa</td></tr><tr><td style=\"text-align:left\">Serbia</td><td style=\"text-align:left\">rs</td></tr><tr><td style=\"text-align:left\">Slovakia</td><td style=\"text-align:left\">sk</td></tr><tr><td style=\"text-align:left\">Slovenia</td><td style=\"text-align:left\">si</td></tr><tr><td style=\"text-align:left\">South Africa</td><td style=\"text-align:left\">za</td></tr><tr><td style=\"text-align:left\">Spain</td><td style=\"text-align:left\">es</td></tr><tr><td style=\"text-align:left\">Sri Lanka</td><td style=\"text-align:left\">lk</td></tr><tr><td style=\"text-align:left\">Suriname</td><td style=\"text-align:left\">sr</td></tr><tr><td style=\"text-align:left\">Sweden</td><td style=\"text-align:left\">se</td></tr><tr><td style=\"text-align:left\">Switzerland</td><td style=\"text-align:left\">ch</td></tr><tr><td style=\"text-align:left\">Taiwan</td><td style=\"text-align:left\">tw</td></tr><tr><td style=\"text-align:left\">Tajikistan</td><td style=\"text-align:left\">tj</td></tr><tr><td style=\"text-align:left\">Thailand</td><td style=\"text-align:left\">th</td></tr><tr><td style=\"text-align:left\">Trinidad and Tobago</td><td style=\"text-align:left\">tt</td></tr><tr><td style=\"text-align:left\">Tunisia</td><td style=\"text-align:left\">tn</td></tr><tr><td style=\"text-align:left\">Turkey</td><td style=\"text-align:left\">tr</td></tr><tr><td style=\"text-align:left\">Turkmenistan</td><td style=\"text-align:left\">tm</td></tr><tr><td style=\"text-align:left\">Ukraine</td><td style=\"text-align:left\">ua</td></tr><tr><td style=\"text-align:left\">United Kingdom (UK)</td><td style=\"text-align:left\">gb</td></tr><tr><td style=\"text-align:left\">Uruguay</td><td style=\"text-align:left\">uy</td></tr><tr><td style=\"text-align:left\">Uzbekistan</td><td style=\"text-align:left\">uz</td></tr><tr><td style=\"text-align:left\">Vatican City</td><td style=\"text-align:left\">va</td></tr><tr><td style=\"text-align:left\">Venezuela</td><td style=\"text-align:left\">ve</td></tr><tr><td style=\"text-align:left\">Vietnam</td><td style=\"text-align:left\">vn</td></tr></tbody></table>"
      ],
      "links": []
    },
    "Currency": {
      "title": "Manage fiat and crypto with Deriv's Currency API | Deriv API",
      "url": "https://developers.deriv.com/docs/currency",
      "mainContent": "This table provides the currency codes and their corresponding full names for the different currencies and cryptocurrencies available for trading using Deriv APIs.\n\nFiat Currencies\nCurrency Code\tCurrency\nAUD\tAustralian Dollar\nEUR\tEuro\nGBP\tBritish Pound Sterling\nUSD\tUnited States Dollar\nCryptocurrencies\nCurrency Code\tCurrency\nBTC\tBitcoin\nETH\tEthereum\nLTC\tLitecoin\nXRP\tRipple\nUSDC\tUSD Coin\neUSDT\tEthereum-based Tether (USDT on the Ethereum blockchain)\ntUSDT\tTRON-based Tether (USDT on the TRON blockchain)\n\nUpdated 4 months ago\n\nDid this page help you?\nYes\nNo",
      "headings": [
        {
          "level": "h1",
          "text": "Fiat Currencies"
        },
        {
          "level": "h1",
          "text": "Cryptocurrencies"
        }
      ],
      "codeBlocks": [],
      "tables": [
        "<table><thead><tr><th style=\"text-align:left\">Currency Code</th><th style=\"text-align:left\">Currency</th></tr></thead><tbody><tr><td style=\"text-align:left\">AUD</td><td style=\"text-align:left\">Australian Dollar</td></tr><tr><td style=\"text-align:left\">EUR</td><td style=\"text-align:left\">Euro</td></tr><tr><td style=\"text-align:left\">GBP</td><td style=\"text-align:left\">British Pound Sterling</td></tr><tr><td style=\"text-align:left\">USD</td><td style=\"text-align:left\">United States Dollar</td></tr></tbody></table>",
        "<table><thead><tr><th style=\"text-align:left\">Currency Code</th><th style=\"text-align:left\">Currency</th></tr></thead><tbody><tr><td style=\"text-align:left\">BTC</td><td style=\"text-align:left\">Bitcoin</td></tr><tr><td style=\"text-align:left\">ETH</td><td style=\"text-align:left\">Ethereum</td></tr><tr><td style=\"text-align:left\">LTC</td><td style=\"text-align:left\">Litecoin</td></tr><tr><td style=\"text-align:left\">XRP</td><td style=\"text-align:left\">Ripple</td></tr><tr><td style=\"text-align:left\">USDC</td><td style=\"text-align:left\">USD Coin</td></tr><tr><td style=\"text-align:left\">eUSDT</td><td style=\"text-align:left\">Ethereum-based Tether (USDT on the Ethereum blockchain)</td></tr><tr><td style=\"text-align:left\">tUSDT</td><td style=\"text-align:left\">TRON-based Tether (USDT on the TRON blockchain)</td></tr></tbody></table>"
      ],
      "links": []
    },
    "Copy trading": {
      "title": "Enable copy trading with simple API calls | Deriv API",
      "url": "https://developers.deriv.com/docs/copy-trading",
      "mainContent": "Copy Trading is a popular trend in financial markets. It allows one user, called the Copier, to automatically replicate the trades of another user, known as the Trader. This way, copiers can benefit from the expertise of experienced traders without making all the trading decisions themselves.\n\n‚ùóÔ∏è\n\nCopy trading is available only for Options. For copy trading on MT5, use MetaQuotes Signals.\n\nBecoming a trader\n\nTo allow others to copy your trades:\n\nEnable copying: Set the allow_copiers option via the set settings call.This setting allows other users to copy your trades.\n\nCreate an API token: Generate a read-only API token and share it with potential copiers. This token lets them track your trades without making any changes.\n\nTrack your performance: With allow_copiers enabled, the copytrading statistics call becomes available. This API provides stats on your trading performance, giving potential copiers insight into your trading history.\n\nBecoming a copier\n\nTo start copying a Trader‚Äôs actions:\n\nStart copying: Use the copy start call to begin copying a trader‚Äôs moves.\n\nStop copying: If you want to stop copying trades, simply use the copy stop call.\n\nBy following these steps, you can easily participate in copy trading, whether you want to be a Copier or a Trader!\n\nUpdated 4 months ago\n\nDid this page help you?\nYes\nNo",
      "headings": [
        {
          "level": "h2",
          "text": "‚ùóÔ∏èCopy trading is available only for Options.  For copy trading on MT5, use MetaQuotes Signals."
        },
        {
          "level": "h2",
          "text": "Becoming a trader"
        },
        {
          "level": "h2",
          "text": "Becoming a copier"
        }
      ],
      "codeBlocks": [
        {
          "language": "text",
          "content": "allow_copiers"
        },
        {
          "language": "text",
          "content": "allow_copiers"
        }
      ],
      "tables": [],
      "links": [
        {
          "text": "set settings",
          "href": "https://api.deriv.com/api-explorer#set_settings"
        },
        {
          "text": "copytrading statistics",
          "href": "https://api.deriv.com/api-explorer#copytrading_statistics"
        },
        {
          "text": "copy start",
          "href": "https://api.deriv.com/api-explorer#copy_start"
        },
        {
          "text": "copy stop",
          "href": "https://api.deriv.com/api-explorer#copy_stop"
        }
      ]
    },
    "Affiliates": {
      "title": "Affiliates",
      "url": "https://developers.deriv.com/docs/affiliates",
      "mainContent": "How to Become a Deriv Affiliate\n\nGetting started as a Deriv Affiliate is simple and quick. Follow these steps:\n\nVisit our Partners page and click on \"Become a Partner\".\nComplete the Affiliate application form.\nWait for approval, which typically takes 1‚Äì3 working days.\n\nPro Tip: The approval process may be faster if your partner account application uses the same email as an existing Deriv account. Don‚Äôt have an account yet? Sign up here.\n\nAffiliate Benefits\n\nAs a Deriv Affiliate, you‚Äôll gain access to exclusive advantages, including:\n\nUp to 45% commission on referred clients‚Äô trading activity.\n\nFree educational and marketing resources to support your efforts.\n\nMultilingual support for global reach.\n\nTransparent fee structure with detailed earnings reports.\n\nDedicated account manager to assist you.\n\n24/7 live chat support for immediate help.\n\nAffiliates can earn commissions when referred clients trade Options on third-party platforms developed using the Deriv API.\n\nLeveraging Deriv API for Affiliate Earnings\n\nTo maximize your affiliate commissions through Deriv API, include your affiliate token when:\n\n1. Signing in Users\n\nRedirect users to the OAuth page with your affiliate token and utm campaign included:\n\nJSON\nhttps://oauth.deriv.com/oauth2/authorize?app_id=YOUR_APP_ID&affiliate_token=YOUR_TOKEN&utm_campaign=YOUR_CAMPAIGN\n\n\nReplace YOUR_APP_ID with your app‚Äôs ID (found under Dashboard ‚Üí Applications ‚Üí Applications Manager).\n\nReplace YOUR_TOKEN with your affiliate token.\nYou‚Äôll find these values in the referral links shared with you. Here‚Äôs how to extract and use them:\n\nIf your referral link looks like:\nhttps://deriv.com/signup?sidc=FB58247C-6B33-4677-A6AD-168C2D72323C&utm_campaign=dynamicworks&utm_medium=affiliate&utm_source=CU00001\nYour affiliate_token is the sidc value: FB58247C-6B33-4677-A6AD-168C2D72323C\nYour utm_campaign is: dynamicworks\nYour OAuth URL should be:\nhttps://oauth.deriv.com/oauth2/authorize?app_id=YOUR_APP_ID&affiliate_token=FB58247C-6B33-4677-A6AD-168C2D72323C&utm_campaign=dynamicworks\nIf your referral link looks like:\nhttps://track.deriv.com/_jqd7qq_iBB18zg8lBvFoLmNd7ZgqdRLk/1/\nYour affiliate_token is: jqd7qq_iBB18zg8lBvFoLmNd7ZgqdRLk\nYour utm_campaign is: myaffiliates\nYour OAuth URL should be:\nhttps://oauth.deriv.com/oauth2/authorize?app_id=YOUR_APP_ID&affiliate_token=jqd7qq_iBB18zg8lBvFoLmNd7ZgqdRLk&utm_campaign=myaffiliates\nAdding these parameters ensures proper referral tracking and commissions under your partnership.\nüìò\n\nImportant note:\n\nFor sign-ups, use the parameter tand utm_campaign:\n\nJSON\nhttps://hub.deriv.com/tradershub/signup?t=YOUR_TOKEN&utm_campaign=YOUR_CAMPAIGN\n\n\nFor more information refer: Authentication.\n\n2. Creating New Accounts Using APIs\n\nTo ensure your referrals are tracked correctly, include your affiliate token in API requests when creating new accounts via the following endpoints:\n\nnew_account_virtual\nnew_account_real\nnew_account_maltainvest\n\nBy embedding your affiliate token, you‚Äôll ensure effortless tracking and commission earnings from your referrals.\n\nFor more information refer: Create account using API.\n\nStart earning today by joining the Deriv Affiliate Program and leveraging the power of Deriv API.\n\nUpdated 3 months ago\n\nDid this page help you?\nYes\nNo",
      "headings": [
        {
          "level": "h2",
          "text": "How to Become a Deriv Affiliate"
        },
        {
          "level": "h2",
          "text": "Affiliate Benefits"
        },
        {
          "level": "h2",
          "text": "Leveraging Deriv API for Affiliate Earnings"
        },
        {
          "level": "h3",
          "text": "1. Signing in Users"
        },
        {
          "level": "h2",
          "text": "üìòImportant note:"
        },
        {
          "level": "h3",
          "text": "2. Creating New Accounts Using APIs"
        }
      ],
      "codeBlocks": [
        {
          "language": "text",
          "content": "https://oauth.deriv.com/oauth2/authorize?app_id=YOUR_APP_ID&affiliate_token=YOUR_TOKEN&utm_campaign=YOUR_CAMPAIGN"
        },
        {
          "language": "text",
          "content": "https://oauth.deriv.com/oauth2/authorize?app_id=YOUR_APP_ID&affiliate_token=YOUR_TOKEN&utm_campaign=YOUR_CAMPAIGN"
        },
        {
          "language": "text",
          "content": "YOUR_APP_ID"
        },
        {
          "language": "text",
          "content": "YOUR_TOKEN"
        },
        {
          "language": "text",
          "content": "FB58247C-6B33-4677-A6AD-168C2D72323C"
        },
        {
          "language": "text",
          "content": "dynamicworks"
        },
        {
          "language": "text",
          "content": "jqd7qq_iBB18zg8lBvFoLmNd7ZgqdRLk"
        },
        {
          "language": "text",
          "content": "myaffiliates"
        },
        {
          "language": "text",
          "content": "t"
        },
        {
          "language": "text",
          "content": "utm_campaign"
        },
        {
          "language": "text",
          "content": "https://hub.deriv.com/tradershub/signup?t=YOUR_TOKEN&utm_campaign=YOUR_CAMPAIGN"
        },
        {
          "language": "text",
          "content": "https://hub.deriv.com/tradershub/signup?t=YOUR_TOKEN&utm_campaign=YOUR_CAMPAIGN"
        },
        {
          "language": "text",
          "content": "new_account_virtual"
        },
        {
          "language": "text",
          "content": "new_account_real"
        },
        {
          "language": "text",
          "content": "new_account_maltainvest"
        }
      ],
      "tables": [],
      "links": [
        {
          "text": "Partners page",
          "href": "https://deriv.com/partners"
        },
        {
          "text": "Sign up here",
          "href": "https://hub.deriv.com/tradershub/signup"
        },
        {
          "text": "https://deriv.com/signup?sidc=FB58247C-6B33-4677-A6AD-168C2D72323C&utm_campaign=dynamicworks&utm_medium=affiliate&utm_source=CU00001",
          "href": "https://deriv.com/signup?sidc=FB58247C-6B33-4677-A6AD-168C2D72323C&utm_campaign=dynamicworks&utm_medium=affiliate&utm_source=CU00001"
        },
        {
          "text": "https://oauth.deriv.com/oauth2/authorize?app_id=YOUR_APP_ID&affiliate_token=FB58247C-6B33-4677-A6AD-168C2D72323C&utm_campaign=dynamicworks",
          "href": "https://oauth.deriv.com/oauth2/authorize?app_id=YOUR_APP_ID&affiliate_token=FB58247C-6B33-4677-A6AD-168C2D72323C&utm_campaign=dynamicworks"
        },
        {
          "text": "https://track.deriv.com/_jqd7qq_iBB18zg8lBvFoLmNd7ZgqdRLk/1/",
          "href": "https://track.deriv.com/_jqd7qq_iBB18zg8lBvFoLmNd7ZgqdRLk/1/"
        },
        {
          "text": "https://oauth.deriv.com/oauth2/authorize?app_id=YOUR_APP_ID&affiliate_token=jqd7qq_iBB18zg8lBvFoLmNd7ZgqdRLk&utm_campaign=myaffiliates",
          "href": "https://oauth.deriv.com/oauth2/authorize?app_id=YOUR_APP_ID&affiliate_token=jqd7qq_iBB18zg8lBvFoLmNd7ZgqdRLk&utm_campaign=myaffiliates"
        },
        {
          "text": "Authentication",
          "href": "https://developers.deriv.com/docs/authentication"
        },
        {
          "text": "Create account using API",
          "href": "https://developers.deriv.com/docs/create-account-using-api"
        },
        {
          "text": "joining the Deriv Affiliate Program",
          "href": "https://deriv.com/partners"
        }
      ]
    },
    "How to contribute to our docs": {
      "title": "Join the Deriv Community and contribute to API docs | Deriv API",
      "url": "https://developers.deriv.com/docs/how-to-contribute-to-our-docs",
      "mainContent": "We value and appreciate all contributions to our documentation. You can contribute in the following ways:\n\nSuggest edits option: Share your suggestions for improving the clarity or accuracy of our documentation.\nPropose enhancements for our GitHub repository: Submit feature suggestions or improvements via our GitHub repository.\nSubmit a Pull Request (PR): You can submit a PR to our documents repository on GitHub for more direct involvement.\nPost a message in our community forum to engage with other users and developers.\nSuggest edits\n\nTo suggest edits to our documentation, follow these steps after logging in:\n\nClick on the \"Suggest Edits\" button.\nLocate the area in the Guides page where you would like to suggest edits and use the editor to make those changes.\nClick \"Suggest\" and add a title to the suggested edits. You can also provide an optional description before submitting your suggestion.\n[Optional] You can also add additional edits, preview the change, add a comment, and see the before and after.\nüëç\n\nAll suggested edits have a preview button!\n\nYou can view any changes in the live site to get a true feel for how the change will render ‚Äî no imagination required!\n\nPropose enhancements on our GitHub repository\n\nWe recommend contributing to Deriv APIs by following these steps:\n\nStart by forking the Deriv API Docs repository.\nClone the forked repository on your machine.\nCreate a remote branch, e.g. git remote add upstream https://github.com/deriv-com/api-docs-readme.git\nFetch updates from the remote branch: git fetch upstream\nRebase your branch with the latest remote branch content: git rebase upstream/master\n\nUpdated 4 months ago\n\nDid this page help you?\nYes\nNo",
      "headings": [
        {
          "level": "h1",
          "text": "Suggest edits"
        },
        {
          "level": "h2",
          "text": "üëçAll suggested edits have a preview button!"
        },
        {
          "level": "h1",
          "text": "Propose enhancements on our GitHub repository"
        }
      ],
      "codeBlocks": [
        {
          "language": "text",
          "content": "git remote add upstream https://github.com/deriv-com/api-docs-readme.git"
        },
        {
          "language": "text",
          "content": "git fetch upstream"
        },
        {
          "language": "text",
          "content": "git rebase upstream/master"
        }
      ],
      "tables": [],
      "links": [
        {
          "text": "Suggest edits",
          "href": "https://developers.deriv.com/docs/how-to-contribute-to-our-docs#suggest-edits"
        },
        {
          "text": "Propose enhancements for our GitHub repository",
          "href": "https://developers.deriv.com/docs/how-to-contribute-to-our-docs#propose-enhancements-for-our-github-repository"
        },
        {
          "text": "community forum",
          "href": "https://community.deriv.com/c/developers/48"
        },
        {
          "text": "Deriv API Docs",
          "href": "https://github.com/deriv-com/api-docs-readme"
        }
      ]
    },
    "Frequently Asked Questions": {
      "title": "API FAQs with quick answers and solutions | Deriv API",
      "url": "https://developers.deriv.com/docs/frequently-asked-questions",
      "mainContent": "How do you set up copy trading?\n\nTo set up copy trading on Deriv, follow these steps:\n\nLog into your Deriv account: Ensure you‚Äôre logged into your Deriv account.\nAccess the Copy Trading feature: Read here to understand the developer API setup.\nChoose a Trader to Copy: Review the list of available traders and their performance metrics to select a trader that aligns with your investment goals. You can use the Copy Trading Statistics API to view the performance of the selected trader.\nSet Your Trading Parameters: Decide how much capital you want to allocate for copying trades and configure your risk management preferences.\nStart Copying: Once set up, your account will automatically replicate the trades of your chosen trader. You can monitor and manage this at any time.\n\nFor more technical details on API setup for copy trading, Refer to the documentation here: Copy Trading.\n\nHow to add your affiliate token to your app and not miss any clients?\n\nWhen creating new accounts, ensure to include your affiliate_token in the API request. For detailed instructions on creating an account via the API, refer to the Deriv API documentation.\n\nWhat are the terms and conditions for API users?\n\nThe document provides the terms and conditions for API users, covering obligations, content storage, ownership, liability, disclaimers, indemnification, security, and termination policies.\n\nAPI Rate Limiting\nHow to find the API request limits?\n\nThe API request limits can change over time, so retrieving them directly from the API is best. Developers can get this information using the Server_Status call, which returns the api_call_limits field. This will provide the most up-to-date details on the number of requests allowed.\n\nFor more information, refer to the WebSocket API documentation.\n\nWhat is the maximum number of simultaneous or per-minute requests allowed by the Deriv API?\n\nDeriv does not publish fixed request limits for simultaneous or per-minute API calls. Limits may vary depending on factors such as endpoint type and system performance. We recommend using the website_status call to check your current API call limits programmatically.\n\n2. What happens if I exceed the API request limits?\n\nIf you exceed the request limits, the API will respond with an error. There are no penalties or automatic blocks. However, persistent overuse or abuse of the service may result in temporary or permanent suspension, as outlined in our Terms and Conditions.\n\n3. Are the API limits the same across all endpoints?\n\nNo. Some endpoints‚Äîespecially trading-related ones‚Äîmay have different thresholds. You can inspect your specific limits under the api_call_limits object by using the website_status call. These include:\n\nmax_proposal_subscription\nmax_requests_general\nmax_requests_outcome\nmax_requests_pricing\n4. What best practices do you recommend to avoid hitting API rate limits?\nImplement client-side rate limiting and retry mechanisms.\nUse exponential backoff when retrying failed requests.\nAvoid excessive polling by using WebSocket subscriptions.\nMonitor request frequency and usage patterns.\nConsider proxying or load balancing if you serve multiple clients.\n5. What if my application needs a higher request volume?\n\nCurrently, there are no public upgrade plans for increasing API limits. If your use case requires higher capacity, please contact our support team to discuss potential solutions.\n\n6. Is there a way to monitor API request usage in real-time?\n\nWe do not offer a built-in dashboard for real-time API monitoring at this time. However, you can use the website_status API response to check applicable limits and implement usage tracking on your end.\n\n7. Where can I find more information or get support regarding API limits?\nüìÑ Terms and Conditions for API users\nüìß Contact support: api-support@deriv.com\nüí¨ Reach out via official developer support channels\n\nUpdated about 1 month ago\n\nDid this page help you?\nYes\nNo",
      "headings": [
        {
          "level": "h2",
          "text": "How do you set up copy trading?"
        },
        {
          "level": "h2",
          "text": "How to add your affiliate token to your app and not miss any clients?"
        },
        {
          "level": "h2",
          "text": "What are the terms and conditions for API users?"
        },
        {
          "level": "h1",
          "text": "API Rate Limiting"
        },
        {
          "level": "h2",
          "text": "How to find the API request limits?"
        },
        {
          "level": "h2",
          "text": "What is the maximum number of simultaneous or per-minute requests allowed by the Deriv API?"
        },
        {
          "level": "h2",
          "text": "2. What happens if I exceed the API request limits?"
        },
        {
          "level": "h2",
          "text": "3. Are the API limits the same across all endpoints?"
        },
        {
          "level": "h2",
          "text": "4. What best practices do you recommend to avoid hitting API rate limits?"
        },
        {
          "level": "h2",
          "text": "5. What if my application needs a higher request volume?"
        },
        {
          "level": "h2",
          "text": "6. Is there a way to monitor API request usage in real-time?"
        },
        {
          "level": "h2",
          "text": "7. Where can I find more information or get support regarding API limits?"
        }
      ],
      "codeBlocks": [
        {
          "language": "text",
          "content": "affiliate_token"
        },
        {
          "language": "text",
          "content": "api_call_limits"
        },
        {
          "language": "text",
          "content": "website_status"
        },
        {
          "language": "text",
          "content": "api_call_limits"
        },
        {
          "language": "text",
          "content": "website_status"
        },
        {
          "language": "text",
          "content": "max_proposal_subscription"
        },
        {
          "language": "text",
          "content": "max_requests_general"
        },
        {
          "language": "text",
          "content": "max_requests_outcome"
        },
        {
          "language": "text",
          "content": "max_requests_pricing"
        },
        {
          "language": "text",
          "content": "website_status"
        }
      ],
      "tables": [],
      "links": [
        {
          "text": "here",
          "href": "https://developers.deriv.com/docs/copy-trading"
        },
        {
          "text": "Copy Trading Statistics API",
          "href": "https://api.deriv.com/api-explorer#copytrading_statistics"
        },
        {
          "text": "Copy Trading",
          "href": "https://developers.deriv.com/docs/copy-trading"
        },
        {
          "text": "Deriv API documentation",
          "href": "https://developers.deriv.com/docs/create-account-using-api"
        },
        {
          "text": "document",
          "href": "https://docs.deriv.com/tnc/business-partners-api-user.pdf"
        },
        {
          "text": "Server_Status",
          "href": "https://api.deriv.com/api-explorer#website_status"
        },
        {
          "text": "WebSocket API documentation",
          "href": "https://developers.deriv.com/docs/websockets"
        },
        {
          "text": "website_status",
          "href": "https://api.deriv.com/api-explorer#website_status"
        },
        {
          "text": "Terms and Conditions",
          "href": "https://docs.deriv.com/tnc/business-partners-api-user.pdf"
        },
        {
          "text": "Terms and Conditions for API users",
          "href": "https://docs.deriv.com/tnc/business-partners-api-user.pdf"
        },
        {
          "text": "api-support@deriv.com",
          "href": "https://developers.deriv.com/docs/api-support@deriv.com"
        }
      ]
    },
    "Create account using API": {
      "title": "Steps to create a Deriv real account using API | Deriv API",
      "url": "https://developers.deriv.com/docs/create-account-using-api",
      "mainContent": "Follow these simple steps to create demo and real accounts using the Deriv API:\n\nVerify email\nMake a call to the verify_email endpoint.\nSet the type parameter to opening_account to indicate you‚Äôre opening a new account.\nYou will receive an email containing a verification code at the email address provided in the API call. This code is required for the next steps.\n\n\nCreate a Demo Account\n\nTo create a demo account:\n\nMake a call to the new_account_virtual endpoint.\nProvide the following information:\nResidence: The 2-letter country code. Obtain this from the residence_list call or check the list here.\nVerification Code: The email verification code you received from the verify_email call above.\n\nA demo account will be created with a starting balance of USD 10,000.\n\nCreate a Real Account\n\nTo set up a real account, follow these steps after logging into your demo account:\n\nFor users in the EU: Use the new_account_maltainvest endpoint.\n\nFor users outside the EU: Use the new_account_real endpoint.\n\nProvide the Following Details:\n\nResidence: The 2-letter country code. Obtain this from the residence_list call or check the list here.\n\nCurrency: Set the currency for the account. You can find the list of supported currencies using the payout_currencies call or view it here.\n\nOnce you complete these steps, you will have a real account ready for trading!\n\nCreate wallet accounts via API\n\nYou can create wallet accounts (demo and real) using the same API flow as trading accounts. The process varies slightly depending on your region (EU or Non-EU).\n\nCreate a demo wallet account\n\nThis creates a virtual wallet account funded with USD 10,000.\n\nCall verify_email endpoint\nJSON\n{\n  \"verify_email\": \"your_email@example.com\",\n  \"type\": \"account_opening\"\n}\n\n\nYou will receive a verification code by email.\n\n2Ô∏è‚É£ Call new_account_virtual endpoint\n\nUse the received verification code and your residence country code:\n\nJSON\n{\n\"new_account_virtual\":1,\n\"client_password\":\"Abcd1234\",\n\"verification_code\":\"7y0MXLQG\",\n\"type\":\"dynamic\",\n\"residence\":\"aq\",\n\"date_first_contact\":\"2025-07-30\",\n\"signup_device\":\"desktop\",\n\"req_id\":5\n}\n\n\nA demo wallet account with USD 10,000 will be created.\n\nCreate a real wallet account\n\nBased on your residence (EU or Non-EU), you‚Äôll use the same endpoint with different parameters.\n\nFor EU Residents\nCall new_account_wallet endpoint\nJSON\n{\n    \"new_account_wallet\": 1,\n    \"account_opening_reason\": \"Savings\",\n    \"address_city\": \"Cyberjaya\",\n    \"address_line_1\": \"Deriv HQ\",\n    \"address_postcode\": \"63000\",\n    \"address_state\": \"\",\n    \"citizen\": \"de\",\n    \"currency\": \"EUR\",\n    \"date_of_birth\": \"2007-08-04\",\n    \"employment_status\": \"Unemployed\",\n    \"salutation\": \"Mr\",\n    \"fatca_declaration\": 0,\n    \"tax_residence\": \"de\",\n    \"first_name\": \"Tay\",\n    \"last_name\": \"Suisin\",\n    \"phone\": \"234124124\",\n    \"place_of_birth\": \"de\",\n    \"residence\": \"de\",\n    \"account_type\": \"doughflow\",\n    \"landing_company_short\": \"maltainvest\",\n    \"non_pep_declaration\": 1,\n    \"tnc_acceptance\": 1,\n    \"financial_assessment\": {\n        \"employment_status\": \"Unemployed\",\n        \"occupation\": \"Manager\",\n        \"income_source\": \"Sale of art, antiques or other high value assets\",\n        \"net_income\": \"Over $500,000\",\n        \"source_of_wealth\": \"Proceeds of sale of crypto currency;Sale of art, antiques or high value assets\",\n        \"estimated_worth\": \"Over $500,000\",\n        \"investment_intention\": \"Over $500,000\",\n        \"financial_information_version\": \"v2\",\n        \"cfd_experience\": \"Over 3 years\",\n        \"cfd_frequency\": \"40 transactions or more in the past 12 months\",\n        \"cfd_trading_definition\": \"Place a bet on the price movement.\",\n        \"leverage_impact_trading\": \"Leverage lets you open larger positions for a fraction of the trade's value.\",\n        \"leverage_trading_high_risk_stop_loss\": \"Close your trade automatically when the loss is more than or equal to a specific amount.\",\n        \"required_initial_margin\": \"When opening a Leveraged CFD trade.\",\n        \"risk_tolerance\": \"Yes\",\n        \"source_of_experience\": \"I have an academic degree, professional certification, and/or work experience.\",\n        \"trading_experience_financial_instruments\": \"Over 3 years\",\n        \"trading_frequency_financial_instruments\": \"40 transactions or more in the past 12 months\"\n    },\n    \"tin_skipped\": 1,\n    \"calling_country_code\": \"49\",\n    \"loginid\": \"VRW1115\",\n    \"req_id\": 18\n}\n\n\n\nA new fiat wallet account will be created for EU users.\n\nFor Non-EU Residents\nCall new_account_wallet endpoint\nJSON\n{\n\"new_account_wallet\":1,\n\"currency\":\"USD\",\n\"first_name\":\"Tay\",\n\"last_name\":\"Suisin\",\n\"date_of_birth\":\"2007-07-27\",\n\"address_line_1\":\"Deriv HQ\",\n\"address_city\":\"Cyberjaya\",\n\"address_postcode\":\"63000\",\n\"fatca_declaration\":0,\n\"residence\":\"aq\",\n\"non_pep_declaration\":1,\n\"citizen\":\"aq\",\n\"phone\":\"123123123\",\n\"place_of_birth\":\"aq\",\n\"account_opening_reason\":\"Savings\",\n\"tax_residence\":\"aq\",\n\"employment_status\":\"Unemployed\",\n\"tnc_acceptance\":1,\n\"loginid\":\"VRW1244\",\n\"calling_country_code\":\"672\",\n\"account_type\":\"doughflow\",\n\"tin_skipped\":1,\n\"financial_assessment\":{\n\"financial_information_version\":\"v2\"\n},\n\"req_id\":19\n}\n\n\nA new wallet account will be created, supporting fiat and crypto based on your currency selection.\n\nüìò\n\nNotes\n\nUse the Residence API to determine the correct country code.\n\nEarn with Deriv‚Äôs Affiliate Program\n\nTo start earning commissions by referring new users to Deriv, make sure to include your affiliate_token and utm_campaign in the API request when creating new accounts using the following endpoints:\n\nnew_account_virtual\nnew_account_real\nnew_account_maltainvest\n\nBy using these APIs and your affiliate_tokenand utm_campaign, you'll ensure your referrals are tracked correctly, allowing you to earn commissions effortlessly.\n\nUpdated 28 days ago\n\nDid this page help you?\nYes\nNo",
      "headings": [
        {
          "level": "h2",
          "text": "Verify email"
        },
        {
          "level": "h2",
          "text": "Create a Demo Account"
        },
        {
          "level": "h2",
          "text": "Create a Real Account"
        },
        {
          "level": "h4",
          "text": "Provide the Following Details:"
        },
        {
          "level": "h1",
          "text": "Create wallet accounts via API"
        },
        {
          "level": "h2",
          "text": "Create a demo wallet account"
        },
        {
          "level": "h3",
          "text": "Call verify_email endpoint"
        },
        {
          "level": "h3",
          "text": "2Ô∏è‚É£ Call new_account_virtual endpoint"
        },
        {
          "level": "h2",
          "text": "Create a real wallet account"
        },
        {
          "level": "h2",
          "text": "For EU Residents"
        },
        {
          "level": "h3",
          "text": "Call new_account_wallet endpoint"
        },
        {
          "level": "h2",
          "text": "For Non-EU Residents"
        },
        {
          "level": "h3",
          "text": "Call new_account_wallet endpoint"
        },
        {
          "level": "h2",
          "text": "üìòNotes"
        },
        {
          "level": "h1",
          "text": "Earn with Deriv‚Äôs Affiliate Program"
        }
      ],
      "codeBlocks": [
        {
          "language": "text",
          "content": "type"
        },
        {
          "language": "text",
          "content": "opening_account"
        },
        {
          "language": "text",
          "content": "residence_list"
        },
        {
          "language": "text",
          "content": "verify_email"
        },
        {
          "language": "text",
          "content": "residence_list"
        },
        {
          "language": "text",
          "content": "payout_currencies"
        },
        {
          "language": "text",
          "content": "verify_email"
        },
        {
          "language": "text",
          "content": "{\n  \"verify_email\": \"your_email@example.com\",\n  \"type\": \"account_opening\"\n}"
        },
        {
          "language": "text",
          "content": "{\n  \"verify_email\": \"your_email@example.com\",\n  \"type\": \"account_opening\"\n}"
        },
        {
          "language": "text",
          "content": "{\n\"new_account_virtual\":1,\n\"client_password\":\"Abcd1234\",\n\"verification_code\":\"7y0MXLQG\",\n\"type\":\"dynamic\",\n\"residence\":\"aq\",\n\"date_first_contact\":\"2025-07-30\",\n\"signup_device\":\"desktop\",\n\"req_id\":5\n}"
        },
        {
          "language": "text",
          "content": "{\n\"new_account_virtual\":1,\n\"client_password\":\"Abcd1234\",\n\"verification_code\":\"7y0MXLQG\",\n\"type\":\"dynamic\",\n\"residence\":\"aq\",\n\"date_first_contact\":\"2025-07-30\",\n\"signup_device\":\"desktop\",\n\"req_id\":5\n}"
        },
        {
          "language": "text",
          "content": "{\n    \"new_account_wallet\": 1,\n    \"account_opening_reason\": \"Savings\",\n    \"address_city\": \"Cyberjaya\",\n    \"address_line_1\": \"Deriv HQ\",\n    \"address_postcode\": \"63000\",\n    \"address_state\": \"\",\n    \"citizen\": \"de\",\n    \"currency\": \"EUR\",\n    \"date_of_birth\": \"2007-08-04\",\n    \"employment_status\": \"Unemployed\",\n    \"salutation\": \"Mr\",\n    \"fatca_declaration\": 0,\n    \"tax_residence\": \"de\",\n    \"first_name\": \"Tay\",\n    \"last_name\": \"Suisin\",\n    \"phone\": \"234124124\",\n    \"place_of_birth\": \"de\",\n    \"residence\": \"de\",\n    \"account_type\": \"doughflow\",\n    \"landing_company_short\": \"maltainvest\",\n    \"non_pep_declaration\": 1,\n    \"tnc_acceptance\": 1,\n    \"financial_assessment\": {\n        \"employment_status\": \"Unemployed\",\n        \"occupation\": \"Manager\",\n        \"income_source\": \"Sale of art, antiques or other high value assets\",\n        \"net_income\": \"Over $500,000\",\n        \"source_of_wealth\": \"Proceeds of sale of crypto currency;Sale of art, antiques or high value assets\",\n        \"estimated_worth\": \"Over $500,000\",\n        \"investment_intention\": \"Over $500,000\",\n        \"financial_information_version\": \"v2\",\n        \"cfd_experience\": \"Over 3 years\",\n        \"cfd_frequency\": \"40 transactions or more in the past 12 months\",\n        \"cfd_trading_definition\": \"Place a bet on the price movement.\",\n        \"leverage_impact_trading\": \"Leverage lets you open larger positions for a fraction of the trade's value.\",\n        \"leverage_trading_high_risk_stop_loss\": \"Close your trade automatically when the loss is more than or equal to a specific amount.\",\n        \"required_initial_margin\": \"When opening a Leveraged CFD trade.\",\n        \"risk_tolerance\": \"Yes\",\n        \"source_of_experience\": \"I have an academic degree, professional certification, and/or work experience.\",\n        \"trading_experience_financial_instruments\": \"Over 3 years\",\n        \"trading_frequency_financial_instruments\": \"40 transactions or more in the past 12 months\"\n    },\n    \"tin_skipped\": 1,\n    \"calling_country_code\": \"49\",\n    \"loginid\": \"VRW1115\",\n    \"req_id\": 18\n}"
        },
        {
          "language": "text",
          "content": "{\n    \"new_account_wallet\": 1,\n    \"account_opening_reason\": \"Savings\",\n    \"address_city\": \"Cyberjaya\",\n    \"address_line_1\": \"Deriv HQ\",\n    \"address_postcode\": \"63000\",\n    \"address_state\": \"\",\n    \"citizen\": \"de\",\n    \"currency\": \"EUR\",\n    \"date_of_birth\": \"2007-08-04\",\n    \"employment_status\": \"Unemployed\",\n    \"salutation\": \"Mr\",\n    \"fatca_declaration\": 0,\n    \"tax_residence\": \"de\",\n    \"first_name\": \"Tay\",\n    \"last_name\": \"Suisin\",\n    \"phone\": \"234124124\",\n    \"place_of_birth\": \"de\",\n    \"residence\": \"de\",\n    \"account_type\": \"doughflow\",\n    \"landing_company_short\": \"maltainvest\",\n    \"non_pep_declaration\": 1,\n    \"tnc_acceptance\": 1,\n    \"financial_assessment\": {\n        \"employment_status\": \"Unemployed\",\n        \"occupation\": \"Manager\",\n        \"income_source\": \"Sale of art, antiques or other high value assets\",\n        \"net_income\": \"Over $500,000\",\n        \"source_of_wealth\": \"Proceeds of sale of crypto currency;Sale of art, antiques or high value assets\",\n        \"estimated_worth\": \"Over $500,000\",\n        \"investment_intention\": \"Over $500,000\",\n        \"financial_information_version\": \"v2\",\n        \"cfd_experience\": \"Over 3 years\",\n        \"cfd_frequency\": \"40 transactions or more in the past 12 months\",\n        \"cfd_trading_definition\": \"Place a bet on the price movement.\",\n        \"leverage_impact_trading\": \"Leverage lets you open larger positions for a fraction of the trade's value.\",\n        \"leverage_trading_high_risk_stop_loss\": \"Close your trade automatically when the loss is more than or equal to a specific amount.\",\n        \"required_initial_margin\": \"When opening a Leveraged CFD trade.\",\n        \"risk_tolerance\": \"Yes\",\n        \"source_of_experience\": \"I have an academic degree, professional certification, and/or work experience.\",\n        \"trading_experience_financial_instruments\": \"Over 3 years\",\n        \"trading_frequency_financial_instruments\": \"40 transactions or more in the past 12 months\"\n    },\n    \"tin_skipped\": 1,\n    \"calling_country_code\": \"49\",\n    \"loginid\": \"VRW1115\",\n    \"req_id\": 18\n}"
        },
        {
          "language": "text",
          "content": "{\n\"new_account_wallet\":1,\n\"currency\":\"USD\",\n\"first_name\":\"Tay\",\n\"last_name\":\"Suisin\",\n\"date_of_birth\":\"2007-07-27\",\n\"address_line_1\":\"Deriv HQ\",\n\"address_city\":\"Cyberjaya\",\n\"address_postcode\":\"63000\",\n\"fatca_declaration\":0,\n\"residence\":\"aq\",\n\"non_pep_declaration\":1,\n\"citizen\":\"aq\",\n\"phone\":\"123123123\",\n\"place_of_birth\":\"aq\",\n\"account_opening_reason\":\"Savings\",\n\"tax_residence\":\"aq\",\n\"employment_status\":\"Unemployed\",\n\"tnc_acceptance\":1,\n\"loginid\":\"VRW1244\",\n\"calling_country_code\":\"672\",\n\"account_type\":\"doughflow\",\n\"tin_skipped\":1,\n\"financial_assessment\":{\n\"financial_information_version\":\"v2\"\n},\n\"req_id\":19\n}"
        },
        {
          "language": "text",
          "content": "{\n\"new_account_wallet\":1,\n\"currency\":\"USD\",\n\"first_name\":\"Tay\",\n\"last_name\":\"Suisin\",\n\"date_of_birth\":\"2007-07-27\",\n\"address_line_1\":\"Deriv HQ\",\n\"address_city\":\"Cyberjaya\",\n\"address_postcode\":\"63000\",\n\"fatca_declaration\":0,\n\"residence\":\"aq\",\n\"non_pep_declaration\":1,\n\"citizen\":\"aq\",\n\"phone\":\"123123123\",\n\"place_of_birth\":\"aq\",\n\"account_opening_reason\":\"Savings\",\n\"tax_residence\":\"aq\",\n\"employment_status\":\"Unemployed\",\n\"tnc_acceptance\":1,\n\"loginid\":\"VRW1244\",\n\"calling_country_code\":\"672\",\n\"account_type\":\"doughflow\",\n\"tin_skipped\":1,\n\"financial_assessment\":{\n\"financial_information_version\":\"v2\"\n},\n\"req_id\":19\n}"
        },
        {
          "language": "text",
          "content": "affiliate_token"
        },
        {
          "language": "text",
          "content": "utm_campaign"
        },
        {
          "language": "text",
          "content": "affiliate_token"
        },
        {
          "language": "text",
          "content": "utm_campaign"
        }
      ],
      "tables": [],
      "links": [
        {
          "text": "verify_email",
          "href": "https://api.deriv.com/api-explorer#verify_email"
        },
        {
          "text": "new_account_virtual",
          "href": "https://api.deriv.com/api-explorer#new_account_virtual"
        },
        {
          "text": "residence_list",
          "href": "https://api.deriv.com/api-explorer#residence_list"
        },
        {
          "text": "here",
          "href": "https://developers.deriv.com/docs/country-list"
        },
        {
          "text": "new_account_maltainvest",
          "href": "https://api.deriv.com/api-explorer#new_account_maltainvest"
        },
        {
          "text": "new_account_real",
          "href": "https://api.deriv.com/api-explorer#new_account_real"
        },
        {
          "text": "residence_list",
          "href": "https://api.deriv.com/api-explorer#residence_list"
        },
        {
          "text": "here",
          "href": "https://developers.deriv.com/docs/country-list"
        },
        {
          "text": "here",
          "href": "https://api.deriv.com/api-explorer#payout_currencies"
        }
      ]
    },
    "Trade Options": {
      "title": "Trade Options",
      "url": "https://developers.deriv.com/docs/trade-using-accumalators",
      "mainContent": "Options: A financial derivative that gives the buyer the right, but not the obligation, to buy or sell an asset at a set price within a specific period. Options can be used for speculation or hedging.\n\nThe types of options supported on Deriv include:\n\nUpdated 10 months ago\n\nDid this page help you?\nYes\nNo",
      "headings": [],
      "codeBlocks": [],
      "tables": [],
      "links": []
    },
    "Digital Options": {
      "title": "Digital Options",
      "url": "https://developers.deriv.com/docs/digital-options",
      "mainContent": "Digital Options allow you to predict the outcome from two possible results and earn a fixed payout if your prediction is correct. Following are the types of Digital Options supported on Deriv:\n\nTrading flow\n\nThe trading flow remains similar for all the options, with some minor tweaks in each of them.\n\nUpdated 10 months ago\n\nDid this page help you?\nYes\nNo",
      "headings": [
        {
          "level": "h1",
          "text": "Trading flow"
        }
      ],
      "codeBlocks": [],
      "tables": [],
      "links": []
    },
    "Rise/Fall": {
      "title": "Rise/Fall",
      "url": "https://developers.deriv.com/docs/risefall",
      "mainContent": "Predict if the market price will rise above or fall below the entry price at the end of the contract.\n\nIf you select \"Rise\", you win the Payout if the Exit spot is strictly higher than the Entry spot.\n\nIf you select \"Fall\", you win the Payout if the Exit spot is strictly lower than the Entry spot.\n\nIf you select \"Allow equals\", you win the Payout if Exit spot is higher than or equal to Entry spot for \"Rise\". Similarly, you win the Payout if Exit spot is lower than or equal to Entry spot for \"Fall\".\n\nTrading Flow\n\nAuthorize using your token: Call authorize API using your token. Ensure that the token has the trading scope enabled.\n\nFetch Available Instruments: Use the active_symbols API to retrieve a list of all trading instruments offered on Deriv.\n\nGet Contract Details: Using the contracts_for API, obtain a list of contracts available for a specific instrument.\n\nRequest a Price: Use the proposal API to get a quote. This will return an ID for the proposed trade.\nFor the Rise/Fall options, set the contract_type:\n\nFor Rise, use: \"PUT\"\n\nFor Fall, use: \"CALL\"\n\nIf you want to select \"Allow Equals\" where you win Payoutif Exit spott is also equal to Entry spot, then set the contract_type:\n\nFor Rise, use: \"PUTE\"\nFor Fall, use: \"CALLE\"\n\nBuy the Contract: Execute the trade by using the buy API with the ID from the proposal response. This action returns a unique contract_id.\n\nMonitor the Contract Status: Check the contract‚Äôs progress or outcome using the proposal_open_contract API with the contract_id.\n\nClose the Contract Early (if Needed): If you want to exit before the contract‚Äôs expiration, use the sell API with the contract_id.\n\nUpdated 4 months ago\n\nDid this page help you?\nYes\nNo",
      "headings": [
        {
          "level": "h2",
          "text": "Trading Flow"
        }
      ],
      "codeBlocks": [
        {
          "language": "text",
          "content": "contract_type"
        },
        {
          "language": "text",
          "content": "contract_type"
        },
        {
          "language": "text",
          "content": "contract_id"
        },
        {
          "language": "text",
          "content": "contract_id"
        },
        {
          "language": "text",
          "content": "contract_id"
        }
      ],
      "tables": [],
      "links": [
        {
          "text": "authorize",
          "href": "https://api.deriv.com/api-explorer/#authorize"
        },
        {
          "text": "active_symbols",
          "href": "https://api.deriv.com/api-explorer/#active_symbols"
        },
        {
          "text": "contracts_for",
          "href": "https://api.deriv.com/api-explorer/#contracts_for"
        },
        {
          "text": "proposal",
          "href": "https://api.deriv.com/api-explorer/#proposal"
        },
        {
          "text": "buy",
          "href": "https://api.deriv.com/api-explorer/#buy"
        },
        {
          "text": "proposal_open_contract",
          "href": "https://api.deriv.com/api-explorer/#proposal_open_contract"
        }
      ]
    },
    "Higher/Lower": {
      "title": "Higher/Lower",
      "url": "https://developers.deriv.com/docs/higherlower",
      "mainContent": "Choose a target price (Barrier) and predict if the market price will be higher or lower than the target at the end of the contract.\n\nIf you select \"Higher\", you win the Payout if the Exit spot is strictly higher than the Barrier.\n\nIf you select \"Lower\", you win the Payout if the Exit spotis strictly lower than the Barrier.\n\nIf the Exit spot is equal to the Barrier, you don't win the Payout.\n\nTrading Flow\n\nAuthorize using your token: Call authorize API using your token. Ensure that the token has the trading scope enabled.\n\nFetch Available Instruments: Use the active_symbols API to retrieve a list of all trading instruments offered on Deriv.\n\nGet Contract Details: Using the contracts_for API, obtain a list of contracts available for a specific instrument.\n\nRequest a Price: Use the proposal API to get a quote. This will return an ID for the proposed trade.\nFor the Higher/Lower options:\n\nUse the the contract_type:\nFor Higher, use: \"CALL\"\nFor Lower, use: \"PUT\"\nSet the Barrier. Eg: barrier: \"+0.37\"\n\nBuy the Contract: Execute the trade by using the buy API with the ID from the proposal response. This action returns a unique contract_id.\n\nMonitor the Contract Status: Check the contract‚Äôs progress or outcome using the proposal_open_contract API with the contract_id.\n\nClose the Contract Early (if Needed): If you want to exit before the contract‚Äôs expiration, use the sell API with the contract_id.\n\nUpdated 4 months ago\n\nDid this page help you?\nYes\nNo",
      "headings": [
        {
          "level": "h2",
          "text": "Trading Flow"
        }
      ],
      "codeBlocks": [
        {
          "language": "text",
          "content": "contract_type"
        },
        {
          "language": "text",
          "content": "barrier: \"+0.37\""
        },
        {
          "language": "text",
          "content": "contract_id"
        },
        {
          "language": "text",
          "content": "contract_id"
        },
        {
          "language": "text",
          "content": "contract_id"
        }
      ],
      "tables": [],
      "links": [
        {
          "text": "authorize",
          "href": "https://api.deriv.com/api-explorer/#authorize"
        },
        {
          "text": "active_symbols",
          "href": "https://api.deriv.com/api-explorer/#active_symbols"
        },
        {
          "text": "contracts_for",
          "href": "https://api.deriv.com/api-explorer/#contracts_for"
        },
        {
          "text": "proposal",
          "href": "https://api.deriv.com/api-explorer/#proposal"
        },
        {
          "text": "buy",
          "href": "https://api.deriv.com/api-explorer/#buy"
        },
        {
          "text": "proposal_open_contract",
          "href": "https://api.deriv.com/api-explorer/#proposal_open_contract"
        }
      ]
    },
    "Ends Between": {
      "title": "Ends Between",
      "url": "https://developers.deriv.com/docs/ends-between",
      "mainContent": "Choose a price range (upper and lower barriers) and predict if the market price will end between or end outside the range at the end of the contract.\n\nIf you select \"Ends Between\", you win the Payout if the Exit spot is strictly higher than the Low Barrier AND strictly lower than the High Barrier.\n\nIf you select \"Ends Outside\", you win the Payout if the Exit spot is EITHER strictly higher than the High Barrier, OR strictly lower than the Low Barrier.\n\nIf the Exit spot is equal to either the Low Barrier or the High Barrier, you don‚Äôt win the Payout.\n\nTrading Flow\n\nAuthorize using your token: Call [authorize API using your token. Ensure that the token has the trading scope enabled.\n\nFetch Available Instruments: Use the active_symbols API to retrieve a list of all trading instruments offered on Deriv.\n\nGet Contract Details: Using the contracts_for API, obtain a list of contracts available for a specific instrument.\n\nRequest a Price: Use the proposal API to get a quote. This will return an ID for the proposed trade.\nFor the Ends Between/Outside options, use the following:\n\nSet contract_type:\n\nFor Ends Between, use: \"EXPIRYRANGE\"\nFor Ends Outside, use: \"EXPIRYMISS\"\n\nFor the High Barrier Offset: set the barrier Eg: barrier: \"+1.51\"\n\nFor the Low Barrier Offset: set the barrier2 Eg: barrier: \"-1.51\"\n\nüëç\n\nAdd +/- to define a barrier offset. For example, +0.005 means a Barrier that's 0.005 higher than the Entry spot.\n\nBuy the Contract: Execute the trade by using the buy API with the ID from the proposal response. This action returns a unique contract_id.\n\nMonitor the Contract Status: Check the contract‚Äôs progress or outcome using the proposal_open_contract API with the contract_id.\n\nClose the Contract Early (if Needed): If you want to exit before the contract‚Äôs expiration, use the sell API with the contract_id.\n\nUpdated 4 months ago\n\nDid this page help you?\nYes\nNo",
      "headings": [
        {
          "level": "h2",
          "text": "Trading Flow"
        },
        {
          "level": "h2",
          "text": "üëçAdd +/- to define a barrier offset. For example, +0.005 means a Barrier that's 0.005 higher than the Entry spot."
        }
      ],
      "codeBlocks": [
        {
          "language": "text",
          "content": "contract_type"
        },
        {
          "language": "text",
          "content": "EXPIRYRANGE"
        },
        {
          "language": "text",
          "content": "EXPIRYMISS"
        },
        {
          "language": "text",
          "content": "barrier"
        },
        {
          "language": "text",
          "content": "barrier: \"+1.51\""
        },
        {
          "language": "text",
          "content": "barrier2"
        },
        {
          "language": "text",
          "content": "barrier: \"-1.51\""
        },
        {
          "language": "text",
          "content": "contract_id"
        },
        {
          "language": "text",
          "content": "contract_id"
        },
        {
          "language": "text",
          "content": "contract_id"
        }
      ],
      "tables": [],
      "links": [
        {
          "text": "authorize",
          "href": "https://api.deriv.com/api-explorer/#authorize"
        },
        {
          "text": "active_symbols",
          "href": "https://api.deriv.com/api-explorer/#active_symbols"
        },
        {
          "text": "contracts_for",
          "href": "https://api.deriv.com/api-explorer/#contracts_for"
        },
        {
          "text": "proposal",
          "href": "https://api.deriv.com/api-explorer/#proposal"
        },
        {
          "text": "buy",
          "href": "https://api.deriv.com/api-explorer/#buy"
        },
        {
          "text": "proposal_open_contract",
          "href": "https://api.deriv.com/api-explorer/#proposal_open_contract"
        }
      ]
    },
    "Stays Between": {
      "title": "Stays Between",
      "url": "https://developers.deriv.com/docs/stays-between",
      "mainContent": "Choose a price range (upper and lower barriers) and predict if the market price will stay between or go outside the range during the contract period.\n\nIf you select \"Stays Between\", you win the Payout if the market stays between (does not touch) either the High Barrier or the Low Barrier at any time during the Contract period.\n\nIf you select \"Goes Outside\", you win the Payout if the market touches either the High Barrier or the Low Barrier at any time during the Contract period.\n\nTrading Flow\n\nAuthorize using your token: Call authorize API using your token. Ensure that the token has the trading scope enabled.\n\nFetch Available Instruments: Use the active_symbols API to retrieve a list of all trading instruments offered on Deriv.\n\nGet Contract Details: Using the contracts_for API, obtain a list of contracts available for a specific instrument.\n\nRequest a Price: Use the proposal API to get a quote. This will return an ID for the proposed trade.\nFor the Stays Between/ Goes Outside options, use the following:\n\nSet contract_type:\n\nFor Stay Between, use: \"RANGE\"\nFor Goes Outside, use: \"UPORDOWN\"\n\nFor the High Barrier Offset: set the barrier Eg: barrier: \"+1.51\"\n\nFor the Low Barrier Offset: set the barrier2 Eg: barrier: \"-1.51\"\n\nüëç\n\nAdd +/- to define a barrier offset. For example, +0.005 means a Barrier that's 0.005 higher than the Entry spot.\n\nBuy the Contract: Execute the trade by using the buy API with the ID from the proposal response. This action returns a unique contract_id.\n\nMonitor the Contract Status: Check the contract‚Äôs progress or outcome using the proposal_open_contract API with the contract_id.\n\nClose the Contract Early (if Needed): If you want to exit before the contract‚Äôs expiration, use the sell API with the contract_id.\n\nUpdated 4 months ago\n\nDid this page help you?\nYes\nNo",
      "headings": [
        {
          "level": "h2",
          "text": "Trading Flow"
        },
        {
          "level": "h2",
          "text": "üëçAdd +/- to define a barrier offset. For example, +0.005 means a Barrier that's 0.005 higher than the Entry spot."
        }
      ],
      "codeBlocks": [
        {
          "language": "text",
          "content": "contract_type"
        },
        {
          "language": "text",
          "content": "RANGE"
        },
        {
          "language": "text",
          "content": "UPORDOWN"
        },
        {
          "language": "text",
          "content": "barrier"
        },
        {
          "language": "text",
          "content": "barrier: \"+1.51\""
        },
        {
          "language": "text",
          "content": "barrier2"
        },
        {
          "language": "text",
          "content": "barrier: \"-1.51\""
        },
        {
          "language": "text",
          "content": "contract_id"
        },
        {
          "language": "text",
          "content": "contract_id"
        },
        {
          "language": "text",
          "content": "contract_id"
        }
      ],
      "tables": [],
      "links": [
        {
          "text": "authorize",
          "href": "https://api.deriv.com/api-explorer/#authorize"
        },
        {
          "text": "active_symbols",
          "href": "https://api.deriv.com/api-explorer/#active_symbols"
        },
        {
          "text": "contracts_for",
          "href": "https://api.deriv.com/api-explorer/#contracts_for"
        },
        {
          "text": "proposal",
          "href": "https://api.deriv.com/api-explorer/#proposal"
        },
        {
          "text": "buy",
          "href": "https://api.deriv.com/api-explorer/#buy"
        },
        {
          "text": "proposal_open_contract",
          "href": "https://api.deriv.com/api-explorer/#proposal_open_contract"
        }
      ]
    },
    "Lookbacks": {
      "title": "Lookbacks",
      "url": "https://developers.deriv.com/docs/lookbacks",
      "mainContent": "Choose an amount you want to earn per point of movement. There are three types of lookbacks:\n\nHigh-Close: The highest market price during the contract period minus the price at the contract end.\nHigh-Low: The highest market price minus the lowest market price during the contract period.\nClose-Low: The market price at the contract end minus the lowest market price during the contract period.\nHigh-Close\n\nBy purchasing the \"High-Close\" contract, you'll win the multiplier times the difference between the High and Close over the duration of the contract.\n\nTrading Flow\n\nAuthorize using your token: Call authorize API using your token. Ensure that the token has the trading scope enabled.\n\nFetch Available Instruments: Use active_symbols API to retrieve a list of all trading instruments offered on Deriv.\n\nGet Contract Details: Using the contracts_for API, obtain a list of contracts available for a specific instrument.\n\nRequest a Price: Use the proposal API to get a quote. This will return an ID for the proposed trade.\nFor the High-Close Lookback:\n\nUse the contract_type as: \"LBFLOATPUT\"\n\nSet the multiplier. Eg: Use multiplier: 1\n\nBuy the Contract: Execute the trade by using the buy API with the ID from the proposal response. This action returns a unique contract_id.\n\nMonitor the Contract Status: Check the contract‚Äôs progress or outcome using the proposal_open_contract API with the contract_id.\n\nClose the Contract Early (if Needed): If you want to exit before the contract‚Äôs expiration, use the sell API with the contract_id.\n\nHigh-Low\n\nBy purchasing the \"High-Low\" contract, you'll win the multiplier times the difference between the High and Low over the duration of the contract.\n\nTrading Flow\n\nAuthorize using your token: Call authorize API using your token. Ensure that the token has the trading scope enabled.\n\nFetch Available Instruments: Use the active_symbols API to retrieve a list of all trading instruments offered on Deriv.\n\nGet Contract Details: Using the contracts_for API, obtain a list of contracts available for a specific instrument.\n\nRequest a Price: Use the proposal API to get a quote. This will return an ID for the proposed trade.\nFor the High-Low Lookback:\n\nUse the contract_type as: \"LBHIGHLOW\"\n\nSet the multiplier. Eg: Use multiplier: 1\n\nBuy the Contract: Execute the trade by using the buy API with the ID from the proposal response. This action returns a unique contract_id.\n\nMonitor the Contract Status: Check the contract‚Äôs progress or outcome using the proposal_open_contract API with the contract_id.\n\nClose the Contract Early (if Needed): If you want to exit before the contract‚Äôs expiration, use the sell API with the contract_id.\n\nClose-Low\n\nBy purchasing the \"Close-Low\" contract, you'll win the multiplier times the difference between the Close and Low over the duration of the contract.\n\nTrading Flow\n\nAuthorize using your token: Call authorize API using your token. Ensure that the token has the trading scope enabled.\n\nFetch Available Instruments: Use the active_symbols API to retrieve a list of all trading instruments offered on Deriv.\n\nGet Contract Details: Using the contracts_for API, obtain a list of contracts available for a specific instrument.\n\nRequest a Price: Use the proposal API to get a quote. This will return an ID for the proposed trade.\nFor the Close-Low Lookback:\n\nUse the contract_type as: \"LBFLOATCALL\"\n\nSet the multiplier. Eg: Use multiplier: 1\n\nBuy the Contract: Execute the trade by using the buy API with the ID from the proposal response. This action returns a unique contract_id.\n\nMonitor the Contract Status: Check the contract‚Äôs progress or outcome using the proposal_open_contract API with the contract_id.\n\nClose the Contract Early (if Needed): If you want to exit before the contract‚Äôs expiration, use the sell API with the contract_id.\n\nUpdated 4 months ago\n\nDid this page help you?\nYes\nNo",
      "headings": [
        {
          "level": "h1",
          "text": "High-Close"
        },
        {
          "level": "h2",
          "text": "Trading Flow"
        },
        {
          "level": "h1",
          "text": "High-Low"
        },
        {
          "level": "h2",
          "text": "Trading Flow"
        },
        {
          "level": "h1",
          "text": "Close-Low"
        },
        {
          "level": "h2",
          "text": "Trading Flow"
        }
      ],
      "codeBlocks": [
        {
          "language": "text",
          "content": "contract_type"
        },
        {
          "language": "text",
          "content": "LBFLOATPUT"
        },
        {
          "language": "text",
          "content": "multiplier: 1"
        },
        {
          "language": "text",
          "content": "contract_id"
        },
        {
          "language": "text",
          "content": "contract_id"
        },
        {
          "language": "text",
          "content": "contract_id"
        },
        {
          "language": "text",
          "content": "contract_type"
        },
        {
          "language": "text",
          "content": "LBHIGHLOW"
        },
        {
          "language": "text",
          "content": "multiplier: 1"
        },
        {
          "language": "text",
          "content": "contract_id"
        },
        {
          "language": "text",
          "content": "contract_id"
        },
        {
          "language": "text",
          "content": "contract_id"
        },
        {
          "language": "text",
          "content": "contract_type"
        },
        {
          "language": "text",
          "content": "LBFLOATCALL"
        },
        {
          "language": "text",
          "content": "multiplier: 1"
        },
        {
          "language": "text",
          "content": "contract_id"
        },
        {
          "language": "text",
          "content": "contract_id"
        },
        {
          "language": "text",
          "content": "contract_id"
        }
      ],
      "tables": [],
      "links": [
        {
          "text": "authorize",
          "href": "https://api.deriv.com/api-explorer/#authorize"
        },
        {
          "text": "active_symbols",
          "href": "https://api.deriv.com/api-explorer/#active_symbols"
        },
        {
          "text": "contracts_for",
          "href": "https://api.deriv.com/api-explorer/#contracts_for"
        },
        {
          "text": "proposal",
          "href": "https://api.deriv.com/api-explorer/#proposal"
        },
        {
          "text": "buy",
          "href": "https://api.deriv.com/api-explorer/#buy"
        },
        {
          "text": "proposal_open_contract",
          "href": "https://api.deriv.com/api-explorer/#proposal_open_contract"
        },
        {
          "text": "authorize",
          "href": "https://api.deriv.com/api-explorer/#authorize"
        },
        {
          "text": "active_symbols",
          "href": "https://api.deriv.com/api-explorer/#active_symbols"
        },
        {
          "text": "contracts_for",
          "href": "https://api.deriv.com/api-explorer/#contracts_for"
        },
        {
          "text": "proposal",
          "href": "https://api.deriv.com/api-explorer/#proposal"
        },
        {
          "text": "buy",
          "href": "https://api.deriv.com/api-explorer/#buy"
        },
        {
          "text": "proposal_open_contract",
          "href": "https://api.deriv.com/api-explorer/#proposal_open_contract"
        },
        {
          "text": "authorize",
          "href": "https://api.deriv.com/api-explorer/#authorize"
        },
        {
          "text": "active_symbols",
          "href": "https://api.deriv.com/api-explorer/#active_symbols"
        },
        {
          "text": "contracts_for",
          "href": "https://api.deriv.com/api-explorer/#contracts_for"
        },
        {
          "text": "proposal",
          "href": "https://api.deriv.com/api-explorer/#proposal"
        },
        {
          "text": "buy",
          "href": "https://api.deriv.com/api-explorer/#buy"
        },
        {
          "text": "proposal_open_contract",
          "href": "https://api.deriv.com/api-explorer/#proposal_open_contract"
        }
      ]
    },
    "Touch/No Touch": {
      "title": "Touch/No Touch",
      "url": "https://developers.deriv.com/docs/touchno-touch",
      "mainContent": "Choose a target price (Barrier) and predict if the market price will touch or not touch the target during the contract period.\n\nIf you select \"Touch\", you win the Payout if the market touches the Barrier at any time during the contract period.\n\nIf you select \"No Touch\", you win the Payout if the market never touches the Barrier at any time during the contract period.\n\nTrading Flow\n\nAuthorize using your token: Call authorize API using your token. Ensure that the token has the trading scope enabled.\n\nFetch Available Instruments: Use the active_symbols API to retrieve a list of all trading instruments offered on Deriv.\n\nGet Contract Details: Using the contracts_for API, obtain a list of contracts available for a specific instrument.\n\nRequest a Price: Use the proposal API to get a quote. This will return an ID for the proposed trade.\nFor the Touch/No Touch options:\n\nUse the the contract_type:\n\nFor Touch, use: \"ONETOUCH\"\nFor No Touch, use: \"NOTOUCH\"\n\nSet the Barrier. Eg: barrier: \"+1.37\"\n\nBuy the Contract: Execute the trade by using the buy API with the ID from the proposal response. This action returns a unique contract_id.\n\nMonitor the Contract Status: Check the contract‚Äôs progress or outcome using the proposal_open_contract API with the contract_id.\n\nClose the Contract Early (if Needed): If you want to exit before the contract‚Äôs expiration, use the sell API with the contract_id.\n\nUpdated 4 months ago\n\nDid this page help you?\nYes\nNo",
      "headings": [
        {
          "level": "h2",
          "text": "Trading Flow"
        }
      ],
      "codeBlocks": [
        {
          "language": "text",
          "content": "contract_type"
        },
        {
          "language": "text",
          "content": "ONETOUCH"
        },
        {
          "language": "text",
          "content": "NOTOUCH"
        },
        {
          "language": "text",
          "content": "barrier: \"+1.37\""
        },
        {
          "language": "text",
          "content": "contract_id"
        },
        {
          "language": "text",
          "content": "contract_id"
        },
        {
          "language": "text",
          "content": "contract_id"
        }
      ],
      "tables": [],
      "links": [
        {
          "text": "authorize",
          "href": "https://api.deriv.com/api-explorer/#authorize"
        },
        {
          "text": "active_symbols",
          "href": "https://api.deriv.com/api-explorer/#active_symbols"
        },
        {
          "text": "contracts_for",
          "href": "https://api.deriv.com/api-explorer/#contracts_for"
        },
        {
          "text": "proposal",
          "href": "https://api.deriv.com/api-explorer/#proposal"
        },
        {
          "text": "buy",
          "href": "https://api.deriv.com/api-explorer/#buy"
        },
        {
          "text": "proposal_open_contract",
          "href": "https://api.deriv.com/api-explorer/#proposal_open_contract"
        }
      ]
    },
    "Only Ups/Only Downs": {
      "title": "Only Ups/Only Downs",
      "url": "https://developers.deriv.com/docs/only-upsonly-downs",
      "mainContent": "Predict if the market price will go only up or only down during the contract period.\n\nIf you select \"Only Ups\", you win the Payout if consecutive ticks rise successively after the Entry spot. No payout if any tick falls or is equal to any of the previous ticks.\n\nIf you select \"Only Downs\", you win the Payout if consecutive ticks fall successively after the Entry spot. No payout if any tick rises or is equal to any of the previous ticks.\n\nTrading Flow\n\nAuthorize using your token: Call authorize API using your token. Ensure that the token has the trading scope enabled.\n\nFetch Available Instruments: Use the active_symbols API to retrieve a list of all trading instruments offered on Deriv.\n\nGet Contract Details: Using the contracts_for API, obtain a list of contracts available for a specific instrument.\n\nRequest a Price: Use the proposal API to get a quote. This will return an ID for the proposed trade.\nFor the Only Ups/Downs options:\n\nUse the the contract_type:\nFor Only Ups , use: \"RUNHIGH\"\nFor Only Downs, use: \"RUNLOW\"\n\nBuy the Contract: Execute the trade by using the buy API with the ID from the proposal response. This action returns a unique contract_id.\n\nMonitor the Contract Status: Check the contract‚Äôs progress or outcome using the proposal_open_contract API with the contract_id.\n\nClose the Contract Early (if Needed): If you want to exit before the contract‚Äôs expiration, use the sell API with the contract_id.\n\nUpdated 4 months ago\n\nDid this page help you?\nYes\nNo",
      "headings": [
        {
          "level": "h2",
          "text": "Trading Flow"
        }
      ],
      "codeBlocks": [
        {
          "language": "text",
          "content": "contract_type"
        },
        {
          "language": "text",
          "content": "RUNHIGH"
        },
        {
          "language": "text",
          "content": "RUNLOW"
        },
        {
          "language": "text",
          "content": "contract_id"
        },
        {
          "language": "text",
          "content": "contract_id"
        },
        {
          "language": "text",
          "content": "contract_id"
        }
      ],
      "tables": [],
      "links": [
        {
          "text": "authorize",
          "href": "https://api.deriv.com/api-explorer/#authorize"
        },
        {
          "text": "active_symbols",
          "href": "https://api.deriv.com/api-explorer/#active_symbols"
        },
        {
          "text": "contracts_for",
          "href": "https://api.deriv.com/api-explorer/#contracts_for"
        },
        {
          "text": "proposal",
          "href": "https://api.deriv.com/api-explorer/#proposal"
        },
        {
          "text": "buy",
          "href": "https://api.deriv.com/api-explorer/#buy"
        },
        {
          "text": "proposal_open_contract",
          "href": "https://api.deriv.com/api-explorer/#proposal_open_contract"
        }
      ]
    },
    "Highest/Lowest Tick": {
      "title": "Highest/Lowest Tick",
      "url": "https://developers.deriv.com/docs/highestlowest-tick",
      "mainContent": "Predict which of the next 5 ticks will see the highest or lowest market price.\n\nIf you select \"High Tick\", you win the Payout if the selected tick is the highest among the next five ticks.\n\nIf you select \"Low Tick\", you win the Payout if the selected tick is the lowest among the next five ticks.\n\nTrading Flow\n\nAuthorize using your token: Call authorize API using your token. Ensure that the token has the trading scope enabled.\n\nFetch Available Instruments: Use the active_symbols API to retrieve a list of all trading instruments offered on Deriv.\n\nGet Contract Details: Using the contracts_for API, obtain a list of contracts available for a specific instrument.\n\nRequest a Price: Use the proposal API to get a quote. This will return an ID for the proposed trade.\nFor the High/Low Tick options:\n\nUse the the contract_type:\nFor High Tick, use: \"TICKHIGH\"\nFor Low Tick, use: \"TICKLOW\"\n\nBuy the Contract: Execute the trade by using the buy API with the ID from the proposal response. This action returns a unique contract_id.\n\nMonitor the Contract Status: Check the contract‚Äôs progress or outcome using the proposal_open_contract API with the contract_id.\n\nClose the Contract Early (if Needed): If you want to exit before the contract‚Äôs expiration, use the sell API with the contract_id.\n\nUpdated 4 months ago\n\nDid this page help you?\nYes\nNo",
      "headings": [
        {
          "level": "h2",
          "text": "Trading Flow"
        }
      ],
      "codeBlocks": [
        {
          "language": "text",
          "content": "contract_type"
        },
        {
          "language": "text",
          "content": "TICKHIGH"
        },
        {
          "language": "text",
          "content": "TICKLOW"
        },
        {
          "language": "text",
          "content": "contract_id"
        },
        {
          "language": "text",
          "content": "contract_id"
        },
        {
          "language": "text",
          "content": "contract_id"
        }
      ],
      "tables": [],
      "links": [
        {
          "text": "authorize",
          "href": "https://api.deriv.com/api-explorer/#authorize"
        },
        {
          "text": "active_symbols",
          "href": "https://api.deriv.com/api-explorer/#active_symbols"
        },
        {
          "text": "contracts_for",
          "href": "https://api.deriv.com/api-explorer/#contracts_for"
        },
        {
          "text": "proposal",
          "href": "https://api.deriv.com/api-explorer/#proposal"
        },
        {
          "text": "buy",
          "href": "https://api.deriv.com/api-explorer/#buy"
        },
        {
          "text": "proposal_open_contract",
          "href": "https://api.deriv.com/api-explorer/#proposal_open_contract"
        }
      ]
    },
    "Reset Call/Put": {
      "title": "Reset Call/Put",
      "url": "https://developers.deriv.com/docs/reset-callput",
      "mainContent": "Predict if the market price will be higher (Call) or lower (Put) than the entry price or the reset price at the end of the contract. A 'reset' is triggered if the market moves against your prediction around the midpoint of the contract, setting the reset price to the market‚Äôs current level.\n\n\n\n\nIf you select \"Reset-Call\", you win the Payout if the Exit spot is strictly higher than either the Entry spot or the spot at Reset time.\n\nIf you select \"Reset-Put\", you win the Payout if the Exit spot is strictly lower than either the Entry spot or the spot at Reset time.\n\nIf the Exit spot is equal to the Barrier or the new Barrier (if a reset occurs), you don't win the Payout.\n\nTrading Flow\n\nAuthorize using your token: Call authorize API using your token. Ensure that the token has the trading scope enabled.\n\nFetch Available Instruments: Use the active_symbols API to retrieve a list of all trading instruments offered on Deriv.\n\nGet Contract Details: Using the contracts_for API, obtain a list of contracts available for a specific instrument.\n\nRequest a Price: Use the proposal API to get a quote. This will return an ID for the proposed trade.\nFor the Reset Call/Put options:\n\nUse the the contract_type:\nFor Reset Call, use: \"RESETCALL\"\nFor Reset Put, use: \"RESETPUT\"\n\nBuy the Contract: Execute the trade by using the buy API with the ID from the proposal response. This action returns a unique contract_id.\n\nMonitor the Contract Status: Check the contract‚Äôs progress or outcome using the proposal_open_contract API with the contract_id.\n\nClose the Contract Early (if Needed): If you want to exit before the contract‚Äôs expiration, use the sell API with the contract_id.\n\nUpdated 4 months ago\n\nDid this page help you?\nYes\nNo",
      "headings": [
        {
          "level": "h2",
          "text": "Trading Flow"
        }
      ],
      "codeBlocks": [
        {
          "language": "text",
          "content": "contract_type"
        },
        {
          "language": "text",
          "content": "RESETCALL"
        },
        {
          "language": "text",
          "content": "RESETPUT"
        },
        {
          "language": "text",
          "content": "contract_id"
        },
        {
          "language": "text",
          "content": "contract_id"
        },
        {
          "language": "text",
          "content": "contract_id"
        }
      ],
      "tables": [],
      "links": [
        {
          "text": "authorize",
          "href": "https://api.deriv.com/api-explorer/#authorize"
        },
        {
          "text": "active_symbols",
          "href": "https://api.deriv.com/api-explorer/#active_symbols"
        },
        {
          "text": "contracts_for",
          "href": "https://api.deriv.com/api-explorer/#contracts_for"
        },
        {
          "text": "proposal",
          "href": "https://api.deriv.com/api-explorer/#proposal"
        },
        {
          "text": "buy",
          "href": "https://api.deriv.com/api-explorer/#buy"
        },
        {
          "text": "proposal_open_contract",
          "href": "https://api.deriv.com/api-explorer/#proposal_open_contract"
        }
      ]
    },
    "Asian Up/Down": {
      "title": "Asian Up/Down",
      "url": "https://developers.deriv.com/docs/asian-updown",
      "mainContent": "Asian options settle by comparing the last tick with the average spot over the period.\n\nIf you select \"Asian Up\", you will win the Payout if the last tick is higher than the averageof the ticks.\n\nIf you select \"Asian Down\", you will win the Payout if the last tick is lower than the average of the ticks.\n\nIf the last tick is equal to the average of the ticks, you don't win the Payout.\n\nTrading Flow\nAuthorize using your token: Call authorize API using your token. Ensure that the token has the trading scope enabled.\nFetch Available Instruments: Use the active_symbols API to retrieve a list of all trading instruments offered on Deriv.\nGet Contract Details: Using the contracts_for API, obtain a list of contracts available for a specific instrument.\nRequest a Price: Use the proposal API to get a quote. This will return an ID for the proposed trade.\nFor the Asian Up/Down options, set the the contract_type:\nFor Up, use: \"ASIANU\"\nFor Down, use: \"ASIAND\"\nBuy the Contract: Execute the trade by using the buy API with the ID from the proposal response. This action returns a unique contract_id.\nMonitor the Contract Status: Check the contract‚Äôs progress or outcome using the proposal_open_contract API with the contract_id.\nClose the Contract Early (if Needed): If you want to exit before the contract‚Äôs expiration, use the sell API with the contract_id.\n\nUpdated 4 months ago\n\nDid this page help you?\nYes\nNo",
      "headings": [
        {
          "level": "h2",
          "text": "Trading Flow"
        }
      ],
      "codeBlocks": [
        {
          "language": "text",
          "content": "contract_type"
        },
        {
          "language": "text",
          "content": "ASIANU"
        },
        {
          "language": "text",
          "content": "ASIAND"
        },
        {
          "language": "text",
          "content": "contract_id"
        },
        {
          "language": "text",
          "content": "contract_id"
        },
        {
          "language": "text",
          "content": "contract_id"
        }
      ],
      "tables": [],
      "links": [
        {
          "text": "authorize",
          "href": "https://api.deriv.com/api-explorer/#authorize"
        },
        {
          "text": "active_symbols",
          "href": "https://api.deriv.com/api-explorer/#active_symbols"
        },
        {
          "text": "contracts_for",
          "href": "https://api.deriv.com/api-explorer/#contracts_for"
        },
        {
          "text": "proposal",
          "href": "https://api.deriv.com/api-explorer/#proposal"
        },
        {
          "text": "buy",
          "href": "https://api.deriv.com/api-explorer/#buy"
        },
        {
          "text": "proposal_open_contract",
          "href": "https://api.deriv.com/api-explorer/#proposal_open_contract"
        }
      ]
    },
    "Digit Matches/Differs": {
      "title": "Digit Matches/Differs",
      "url": "https://developers.deriv.com/docs/digit-matchesdiffers",
      "mainContent": "If you select \"Matches\", you will win the payout if the last digit of the last tick is the same as your prediction.\n\nIf you select \"Differs\", you will win the payout if the last digit of the last tick is not the same as your prediction.\n\nTrading Flow\n\nAuthorize using your token: Call authorize API using your token. Ensure that the token has the trading scope enabled.\n\nFetch Available Instruments: Use the active_symbols API to retrieve a list of all trading instruments offered on Deriv.\n\nGet Contract Details: Using the contracts_for API, obtain a list of contracts available for a specific instrument.\n\nRequest a Price: Use the proposal API to get a quote. This will return an ID for the proposed trade.\nFor the Matches/Differs options, use the following:\n\nSet contract_type:\n\nFor Matches, use: \"DIGITMATCH\"\nFor Differs, use: \"DIGITDIFF\"\n\nFor the Last Digit Prediction: set the barrier between 0-9. Eg: barrier: \"9\"\n\nBuy the Contract: Execute the trade by using the buy API with the ID from the proposal response. This action returns a unique contract_id.\n\nMonitor the Contract Status: Check the contract‚Äôs progress or outcome using the proposal_open_contract API with the contract_id.\n\nClose the Contract Early (if Needed): If you want to exit before the contract‚Äôs expiration, use the sell API with the contract_id.\n\nUpdated 4 months ago\n\nDid this page help you?\nYes\nNo",
      "headings": [
        {
          "level": "h2",
          "text": "Trading Flow"
        }
      ],
      "codeBlocks": [
        {
          "language": "text",
          "content": "contract_type"
        },
        {
          "language": "text",
          "content": "DIGITMATCH"
        },
        {
          "language": "text",
          "content": "DIGITDIFF"
        },
        {
          "language": "text",
          "content": "barrier"
        },
        {
          "language": "text",
          "content": "barrier: \"9\""
        },
        {
          "language": "text",
          "content": "contract_id"
        },
        {
          "language": "text",
          "content": "contract_id"
        },
        {
          "language": "text",
          "content": "contract_id"
        }
      ],
      "tables": [],
      "links": [
        {
          "text": "authorize",
          "href": "https://api.deriv.com/api-explorer/#authorize"
        },
        {
          "text": "active_symbols",
          "href": "https://api.deriv.com/api-explorer/#active_symbols"
        },
        {
          "text": "contracts_for",
          "href": "https://api.deriv.com/api-explorer/#contracts_for"
        },
        {
          "text": "proposal",
          "href": "https://api.deriv.com/api-explorer/#proposal"
        },
        {
          "text": "buy",
          "href": "https://api.deriv.com/api-explorer/#buy"
        },
        {
          "text": "proposal_open_contract",
          "href": "https://api.deriv.com/api-explorer/#proposal_open_contract"
        }
      ]
    },
    "Digit Even/Odd": {
      "title": "Digit Even/Odd",
      "url": "https://developers.deriv.com/docs/digit-evenodd",
      "mainContent": "If you select \"Even\", you will win the Payout if the last digit of the last tick is an even number (i.e., 2, 4, 6, 8, or 0).\n\nIf you select \"Odd\", you will win the Payout if the last digit of the last tick is an odd number (i.e., 1, 3, 5, 7, or 9).\n\nTrading Flow\n\nAuthorize using your token: Call authorize API using your token. Ensure that the token has the trading scope enabled.\n\nFetch Available Instruments: Use the active_symbols API to retrieve a list of all trading instruments offered on Deriv.\n\nGet Contract Details: Using the contracts_for API, obtain a list of contracts available for a specific instrument.\n\nRequest a Price: Use the proposal API to get a quote. This will return an ID for the proposed trade.\nFor the digit Even/Odd options, use the following the contract_type:\n\nFor Even: \"DIGITEVEN\"\nFor Odd: \"DIGITODD\"\n\nBuy the Contract: Execute the trade by using the buy API with the ID from the proposal response. This action returns a unique contract_id.\n\nMonitor the Contract Status: Check the contract‚Äôs progress or outcome using the proposal_open_contract API with the contract_id.\n\nClose the Contract Early (if Needed): If you want to exit before the contract‚Äôs expiration, use the sell API with the contract_id.\n\nUpdated 4 months ago\n\nDid this page help you?\nYes\nNo",
      "headings": [
        {
          "level": "h2",
          "text": "Trading Flow"
        }
      ],
      "codeBlocks": [
        {
          "language": "text",
          "content": "contract_type"
        },
        {
          "language": "text",
          "content": "DIGITEVEN"
        },
        {
          "language": "text",
          "content": "DIGITODD"
        },
        {
          "language": "text",
          "content": "contract_id"
        },
        {
          "language": "text",
          "content": "contract_id"
        },
        {
          "language": "text",
          "content": "contract_id"
        }
      ],
      "tables": [],
      "links": [
        {
          "text": "authorize",
          "href": "https://api.deriv.com/api-explorer/#authorize"
        },
        {
          "text": "active_symbols",
          "href": "https://api.deriv.com/api-explorer/#active_symbols"
        },
        {
          "text": "contracts_for",
          "href": "https://api.deriv.com/api-explorer/#contracts_for"
        },
        {
          "text": "proposal",
          "href": "https://api.deriv.com/api-explorer/#proposal"
        },
        {
          "text": "buy",
          "href": "https://api.deriv.com/api-explorer/#buy"
        },
        {
          "text": "proposal_open_contract",
          "href": "https://api.deriv.com/api-explorer/#proposal_open_contract"
        }
      ]
    },
    "Digit Over/Under": {
      "title": "Digit Over/Under",
      "url": "https://developers.deriv.com/docs/digit-overunder",
      "mainContent": "If you select \"Over\", you will win the Payout if the last digit of the last tick is greater than your prediction.\n\nIf you select \"Under\", you will win the Payout if the last digit of the last tick is less than your prediction.\n\nTrading Flow\n\nAuthorize using your token: Call authorize API using your token. Ensure that the token has the trading scope enabled.\n\nFetch Available Instruments: Use the active_symbols API to retrieve a list of all trading instruments offered on Deriv.\n\nGet Contract Details: Using the contracts_for API, obtain a list of contracts available for a specific instrument.\n\nRequest a Price: Use the proposal API to get a quote. This will return an ID for the proposed trade.\nFor the Digit Over/Under options, use the following\n\nSet contract_type:\n\nFor Over, use: \"DIGITMATCH\"\nFor Under, use: \"DIGITUNDER\"\n\nFor the Last Digit Prediction: set the barrier between 0-9. Eg: barrier: \"6\"\n\nBuy the Contract: Execute the trade by using the buy API with the ID from the proposal response. This action returns a unique contract_id.\n\nMonitor the Contract Status: Check the contract‚Äôs progress or outcome using the proposal_open_contract API with the contract_id.\n\nClose the Contract Early (if Needed): If you want to exit before the contract‚Äôs expiration, use the sell API with the contract_id.\n\nUpdated 4 months ago\n\nDid this page help you?\nYes\nNo",
      "headings": [
        {
          "level": "h2",
          "text": "Trading Flow"
        }
      ],
      "codeBlocks": [
        {
          "language": "text",
          "content": "contract_type"
        },
        {
          "language": "text",
          "content": "DIGITMATCH"
        },
        {
          "language": "text",
          "content": "DIGITUNDER"
        },
        {
          "language": "text",
          "content": "barrier"
        },
        {
          "language": "text",
          "content": "barrier: \"6\""
        },
        {
          "language": "text",
          "content": "contract_id"
        },
        {
          "language": "text",
          "content": "contract_id"
        },
        {
          "language": "text",
          "content": "contract_id"
        }
      ],
      "tables": [],
      "links": [
        {
          "text": "authorize",
          "href": "https://api.deriv.com/api-explorer/#authorize"
        },
        {
          "text": "active_symbols",
          "href": "https://api.deriv.com/api-explorer/#active_symbols"
        },
        {
          "text": "contracts_for",
          "href": "https://api.deriv.com/api-explorer/#contracts_for"
        },
        {
          "text": "proposal",
          "href": "https://api.deriv.com/api-explorer/#proposal"
        },
        {
          "text": "buy",
          "href": "https://api.deriv.com/api-explorer/#buy"
        },
        {
          "text": "proposal_open_contract",
          "href": "https://api.deriv.com/api-explorer/#proposal_open_contract"
        }
      ]
    },
    "Accumulator Options": {
      "title": "Accumulator Options",
      "url": "https://developers.deriv.com/docs/accumulator-options",
      "mainContent": "Amplify potential profits with up to 5% compounding growth per tick with Accumulator Options.\n\nChoose a growth rate (1-5%) within a specified price range and predict if the market price will stay within the range. Your Payout grows at a compounding rate for each tick, and the market price stays in the range.\n\nTrading Flow\nAuthorize using your token: Call authorize API using your token. Ensure that the token has the trading scope enabled.\nFetch Available Instruments: Use the active_symbols API to retrieve a list of all trading instruments offered on Deriv.\nGet Contract Details: Using the contracts_for API, obtain a list of contracts available for a specific instrument.\nRequest a Price: Use the proposal API to get a quote. This will return an ID for the proposed trade.\nFor the accumulator options,\nUse the contract_type: \"ACCU\"\nGrowth Rate: You can choose a growth rate with values of 1%(0.01), 2%(0.02), 3%(0.03), 4%(0.04), and 5%(0.05). Eg: Set growth_rate: 0.03\nTake Profit: If you select this feature, your trade will be closed automatically when the value of the contract reaches a specific profit.\nEg: Set limit_order as:\"\n\nlimit_order : { take_profit: 150 }\n\nBuy the Contract: Execute the trade by using the buy API with the ID from the proposal response. This action returns a unique contract_id.\nMonitor the Contract Status: Check the contract‚Äôs progress or outcome using the proposal_open_contract API with the contract_id.\nClose the Contract Early (if Needed): If you want to exit before the contract‚Äôs expiration, use the sell API with the contract_id.\n\nUpdated 4 months ago\n\nDid this page help you?\nYes\nNo",
      "headings": [
        {
          "level": "h2",
          "text": "Trading Flow"
        }
      ],
      "codeBlocks": [
        {
          "language": "text",
          "content": "contract_type"
        },
        {
          "language": "text",
          "content": "\"ACCU\""
        },
        {
          "language": "text",
          "content": "growth_rate: 0.03"
        },
        {
          "language": "text",
          "content": "limit_order"
        },
        {
          "language": "text",
          "content": "limit_order : {       take_profit: 150 }"
        },
        {
          "language": "text",
          "content": "contract_id"
        },
        {
          "language": "text",
          "content": "contract_id"
        },
        {
          "language": "text",
          "content": "contract_id"
        }
      ],
      "tables": [],
      "links": [
        {
          "text": "authorize",
          "href": "https://api.deriv.com/api-explorer/#authorize"
        },
        {
          "text": "active_symbols",
          "href": "https://api.deriv.com/api-explorer/#active_symbols"
        },
        {
          "text": "contracts_for",
          "href": "https://api.deriv.com/api-explorer/#contracts_for"
        },
        {
          "text": "proposal",
          "href": "https://api.deriv.com/api-explorer/#proposal"
        },
        {
          "text": "buy",
          "href": "https://api.deriv.com/api-explorer/#buy"
        },
        {
          "text": "proposal_open_contract",
          "href": "https://api.deriv.com/api-explorer/#proposal_open_contract"
        }
      ]
    },
    "Vanilla Options": {
      "title": "Vanilla Options",
      "url": "https://developers.deriv.com/docs/vanilla-options",
      "mainContent": "Earn a potentially high payout with Vanilla Options if your predictions are right within a timed contract based on market conditions.\n\nVanilla options allow you to predict an upward (bullish) or downward (bearish) direction of the underlying asset by purchasing a \"Call\" or a \"Put\".\n\nIf you select \"Call\", you'll earn a Payout if the Final price is above the Strike price at Expiry. Otherwise, you won't receive a payout.\nIf you select \"Put\", you'll earn a Payout if the Final price is below the Strike price at Expiry. Otherwise, you won't receive a payout.\n\nYour Payout is equal to the Payout per point multiplied by the difference between the Final price and the Strike price. You will only earn a profit if your Payout is higher than your initial stake.\n\nYou may sell the contract up until 60 seconds before Expiry. If you do, we'll pay you the Contract value.\n\nTrading Flow\nAuthorize using your token: Call authorize API using your token. Ensure that the token has the trading scope enabled.\nFetch Available Instruments: Use the active_symbols API to retrieve a list of all trading instruments offered on Deriv.\nGet Contract Details: Using the contracts_for API, obtain a list of contracts available for a specific instrument.\nRequest a Price: Use the proposal API to get a quote. This will return an ID for the proposed trade.\nFor the vanilla options, use the following:\nSet contract_type:\nFor Vanilla Call, use:\"VANILLALONGCALL\"\nFor Vanilla Put, use: \"VANILLALONGPUT\"\nStrike price: The strike price can have the following values: \"+2.20\", \"+1.10\", \"+0.00\", \"-1.10\", \"-2.00\". Eg: To define the strike price set barrier: \"+0.00\"\nBuy the Contract: Execute the trade by using the buy API with the ID from the proposal response. This action returns a unique contract_id.\nMonitor the Contract Status: Check the contract‚Äôs progress or outcome using the proposal_open_contract API with the contract_id.\nClose the Contract Early (if Needed): If you want to exit before the contract‚Äôs expiration, use the sell API with the contract_id.\n\nUpdated 4 months ago\n\nDid this page help you?\nYes\nNo",
      "headings": [
        {
          "level": "h2",
          "text": "Trading Flow"
        }
      ],
      "codeBlocks": [
        {
          "language": "text",
          "content": "contract_type"
        },
        {
          "language": "text",
          "content": "\"VANILLALONGCALL\""
        },
        {
          "language": "text",
          "content": "\"VANILLALONGPUT\""
        },
        {
          "language": "text",
          "content": "barrier: \"+0.00\""
        },
        {
          "language": "text",
          "content": "contract_id"
        },
        {
          "language": "text",
          "content": "contract_id"
        },
        {
          "language": "text",
          "content": "contract_id"
        }
      ],
      "tables": [],
      "links": [
        {
          "text": "authorize",
          "href": "https://api.deriv.com/api-explorer/#authorize"
        },
        {
          "text": "active_symbols",
          "href": "https://api.deriv.com/api-explorer/#active_symbols"
        },
        {
          "text": "contracts_for",
          "href": "https://api.deriv.com/api-explorer/#contracts_for"
        },
        {
          "text": "proposal",
          "href": "https://api.deriv.com/api-explorer/#proposal"
        },
        {
          "text": "buy",
          "href": "https://api.deriv.com/api-explorer/#buy"
        },
        {
          "text": "proposal_open_contract",
          "href": "https://api.deriv.com/api-explorer/#proposal_open_contract"
        }
      ]
    },
    "Turbo Options": {
      "title": "Turbo Options",
      "url": "https://developers.deriv.com/docs/turbo-options",
      "mainContent": "With Turbo Options, you can earn a payout if your predictions are right and if the spot price does not touch or breach a predetermined barrier.\n\nTurbo options allow you to predict the direction of the underlying asset's movements.\n\nYou receive a Payout at Expiry if the spot price never breaches the Barrier during the contract period. If it does, your contract will be terminated early.\n\nIf you select \"Up\", you'll earn a Payout if the spot price never drops below the Barrier.\n\nIf you select \"Down\", you'll earn a Payout if the spot price never rises above the Barrier.\n\nYour payout is equal to the Payout per point multiplied by the distance between the Final price and the Barrier. You will only earn a profit if your Payout is higher than your initial stake.\n\nYou may sell the contract up to 15 seconds before expiry. If you do, we'll pay you the Contract value.\nIf you choose your duration in number of ticks, you won't be able to terminate your contract early.\n\nTrading Flow\nAuthorize using your token: Call authorize API using your token. Ensure that the token has the trading scope enabled.\nFetch Available Instruments: Use the active_symbols API to retrieve a list of all trading instruments offered on Deriv.\nGet Contract Details: Using the contracts_for API, obtain a list of contracts available for a specific instrument.\nRequest a Price: Use the proposal API to get a quote. This will return an ID for the proposed trade.\nFor the turbo options, use the following:\nSet contract_type as:\nFor Turbo Up, use:\"TURBOSLONG\"\nFor Turbo Down, use: \"TURBOSSHORT\"\nTake profit: If you select this feature, your trade will be closed automatically when the value of the contract reaches a specific profit.\nEg: Set limit_order as:\n\nlimit_order : { take_profit: 150 }\n\nBuy the Contract: Execute the trade by using the buy API with the ID from the proposal response. This action returns a unique contract_id.\nMonitor the Contract Status: Check the contract‚Äôs progress or outcome using the proposal_open_contract API with the contract_id.\nClose the Contract Early (if Needed): If you want to exit before the contract‚Äôs expiration, use the sell API with the contract_id.\n\nUpdated 4 months ago\n\nDid this page help you?\nYes\nNo",
      "headings": [
        {
          "level": "h2",
          "text": "Trading Flow"
        }
      ],
      "codeBlocks": [
        {
          "language": "text",
          "content": "contract_type"
        },
        {
          "language": "text",
          "content": "\"TURBOSLONG\""
        },
        {
          "language": "text",
          "content": "\"TURBOSSHORT\""
        },
        {
          "language": "text",
          "content": "limit_order"
        },
        {
          "language": "text",
          "content": "limit_order : {       take_profit: 150 }"
        },
        {
          "language": "text",
          "content": "contract_id"
        },
        {
          "language": "text",
          "content": "contract_id"
        },
        {
          "language": "text",
          "content": "contract_id"
        }
      ],
      "tables": [],
      "links": [
        {
          "text": "authorize",
          "href": "https://api.deriv.com/api-explorer/#authorize"
        },
        {
          "text": "active_symbols",
          "href": "https://api.deriv.com/api-explorer/#active_symbols"
        },
        {
          "text": "contracts_for",
          "href": "https://api.deriv.com/api-explorer/#contracts_for"
        },
        {
          "text": "proposal",
          "href": "https://api.deriv.com/api-explorer/#proposal"
        },
        {
          "text": "buy",
          "href": "https://api.deriv.com/api-explorer/#buy"
        },
        {
          "text": "proposal_open_contract",
          "href": "https://api.deriv.com/api-explorer/#proposal_open_contract"
        }
      ]
    },
    "Multipliers": {
      "title": "Multipliers",
      "url": "https://developers.deriv.com/docs/multipliers",
      "mainContent": "Multiply your potential profit by up to 2,000x if the market moves in your favour. Losses are limited only to your initial capital.\n\nChoose a multiplier (up to 2,000x) and predict if the market price will go up(bullish)or down (bearish) compared to the entry price. Your potential payout grows as the market price moves in your predicted direction, boosted by the multiplier. Losses are limited to the initial amount you put into the contract.\n\nIf you select \"Up\", your total profit/loss will be the percentage increase in the underlying asset price, times the multiplier and stake, minus commissions.\nIf you select \"Down\", your total profit/loss will be the percentage decrease in the underlying asset price, times the multiplier and stake, minus commissions.\n\nYour contract will be closed when the Stop out level is reached.\n\nAdditional features are available to manage your positions: Take profit, Stop loss and Deal cancellation allow you to adjust your level of risk aversion.\n\nYou can close your trade anytime.\n\nTrading Flow\nAuthorize using your token: Call authorize API using your token. Ensure that the token has the trading scope enabled.\nFetch Available Instruments: Use the active_symbols API to retrieve a list of all trading instruments offered on Deriv.\nGet Contract Details: Using the contracts_for API, obtain a list of contracts available for a specific instrument.\nRequest a Price: Use the proposal API to get a quote. This will return an ID for the proposed trade.\nFor the multiplier, use the following:\nSet contract_type:\nUp:\"MULTUP\"\nDown: \"MULTDOWN\"\nTake profit: If you select this feature, your trade will be closed automatically when the value of the contract reaches a specific profit.\nEg: Set limit_order as:\n\nlimit_order : { take_profit: 150 }\n\nStop loss: When your loss reaches or exceeds this amount, your trade will be closed automatically.\nEg: Set limit_order as:\n\nlimit_order : { take_profit: 150, stop_loss:130 }\n\nDeal cancellation: When this is active, you can cancel your trade within the chosen time frame. Your stake will be returned without loss. Possible values 5 minutes(5m), 10 minutes(10m), 15 minutes(15m), 30 minutes(30m), 60 minutes(60m). Eg: Set cancellation: 60m\nBuy the Contract: Execute the trade by using the buy API with the ID from the proposal response. This action returns a unique contract_id.\nMonitor the Contract Status: Check the contract‚Äôs progress or outcome using the proposal_open_contract API with the contract_id.\nClose the Contract Early (if Needed): If you want to exit before the contract‚Äôs expiration, use the sell API with the contract_id.\n\nUpdated 4 months ago\n\nDid this page help you?\nYes\nNo",
      "headings": [
        {
          "level": "h2",
          "text": "Trading Flow"
        }
      ],
      "codeBlocks": [
        {
          "language": "text",
          "content": "contract_type"
        },
        {
          "language": "text",
          "content": "\"MULTUP\""
        },
        {
          "language": "text",
          "content": "\"MULTDOWN\""
        },
        {
          "language": "text",
          "content": "limit_order"
        },
        {
          "language": "text",
          "content": "limit_order : {       take_profit: 150 }"
        },
        {
          "language": "text",
          "content": "limit_order"
        },
        {
          "language": "text",
          "content": "limit_order : {       take_profit: 150, stop_loss:130 }"
        },
        {
          "language": "text",
          "content": "cancellation: 60m"
        },
        {
          "language": "text",
          "content": "contract_id"
        },
        {
          "language": "text",
          "content": "contract_id"
        },
        {
          "language": "text",
          "content": "contract_id"
        }
      ],
      "tables": [],
      "links": [
        {
          "text": "authorize",
          "href": "https://api.deriv.com/api-explorer/#authorize"
        },
        {
          "text": "active_symbols",
          "href": "https://api.deriv.com/api-explorer/#active_symbols"
        },
        {
          "text": "contracts_for",
          "href": "https://api.deriv.com/api-explorer/#contracts_for"
        },
        {
          "text": "proposal",
          "href": "https://api.deriv.com/api-explorer/#proposal"
        },
        {
          "text": "buy",
          "href": "https://api.deriv.com/api-explorer/#buy"
        },
        {
          "text": "proposal_open_contract",
          "href": "https://api.deriv.com/api-explorer/#proposal_open_contract"
        }
      ]
    },
    "Keep connection live": {
      "title": "Easy steps to keep your websocket connection live | Deriv API",
      "url": "https://developers.deriv.com/docs/keep-connection-live",
      "mainContent": "Follow these steps to maintain a live WebSocket connection with the Deriv API:\n\nImport the Deriv API library\n\nImport the DerivAPIBasic library, which provides an interface to interact with the Deriv WebSocket API:\n\nimport DerivAPIBasic from 'https://cdn.skypack.dev/@deriv/deriv-api/dist/DerivAPIBasic';\n\nEstablish a WebSocket connection\n\nCreate a WebSocket connection using your app_id and the API URL:\n\n(wss://ws.derivws.com/websockets/v3?app_id=${app_id}).\n\nThis connection will be used to send and receive messages from the Deriv API.\n\nconst connection = new WebSocket(wss://ws.derivws.com/websockets/v3?app_id=${app_id});\n\nCreate an API object\n\nCreate an instance of DerivAPIBasic, passing the WebSocket connection as a parameter.\n\nThis object interacts with the API, such as subscribing to proposals and sending pings.\n\nconst api = new DerivAPIBasic({ connection });\n\nSend a proposal subscription\n\nThe proposal() function subscribes to a proposal and sends details such as the trade amount, currency, contract type, duration, and asset symbol.\n\nAfter this subscription, the API will send real-time updates about the proposal (market data).\n\nJSON\nconst proposal = () => {  \n  api.subscribe({  \n    proposal: 1,  \n    subscribe: 1,  \n    amount: 10,  \n    basis: 'payout',  \n    contract_type: 'CALL',  \n    currency: 'USD',  \n    duration: 1,  \n    duration_unit: 'm',  \n    symbol: 'R_100',  \n    barrier: '+0.1',  \n  });  \n};\n\nSend ping to keep the connection alive\n\nThe ping() function sends a \"ping\" message every 30 seconds using setInterval.\n\nThis ensures that the WebSocket connection remains active, as WebSocket servers may close idle connections.\n\nJavaScript\nconst ping = () => {\n  setInterval(() => {\n    api.ping();\n  }, 30000);\n};\n\nHandle WebSocket responses\n\nThe wsResponse() function processes incoming WebSocket messages and handles:\n\nErrors: Logs errors and disconnects the WebSocket if an error is received.\nProposal Messages: Logs proposal details (e.g., ask price, payout).\nPing Messages: Logs ping responses from the server.\nJavaScript\nconst wsResponse = async (res) => {\n  const data = JSON.parse(res.data);\n  if (data.error !== undefined) {\n    console.log('Error: %s ', data.error.message);\n    connection.removeEventListener('message', wsResponse, false);\n    await api.disconnect();\n  } else if (data.msg_type === 'proposal') {\n    console.log('Details: %s', data.proposal.longcode);\n    console.log('Ask Price: %s', data.proposal.display_value);\n    console.log('Payout: %f', data.proposal.payout);\n    console.log('Spot: %f', data.proposal.spot);\n  } else if (data.msg_type === 'ping') {\n    console.log('ping');\n  }\n};\n\nStart the signal processing\n\nThe checkSignal() function starts the signal processing by:\n\nproposal(): Subscribes to market data.\nping(): Starts sending pings.\nconnection.addEventListener('message', wsResponse): Listens for messages from the WebSocket server and processing them using wsResponse().\nJavaScript\nconst checkSignal = () => {\n  proposal();\n  ping();\n  connection.addEventListener('message', wsResponse);\n};\n\nEnd the WebSocket subscription\n\nThe endCall() function stops receiving proposal updates by:\n\nRemoving the WebSocket message listener.\nCalling unsubscribe() on the proposal()to stop the subscription.\nJavaScript\nconst endCall = () => {\n  connection.removeEventListener('message', wsResponse, false);\n  proposal().unsubscribe();\n};\n\n\nThese steps outline how the code works to establish a WebSocket connection, subscribe to proposals, keep the connection alive with pings, handle responses, and eventually unsubscribe from the proposals.\n\nJavaScript\nimport DerivAPIBasic from '@deriv/deriv-api/dist/DerivAPIBasic.js';\n\nconst app_id = app_id; // Replace with your app_id if different.\nconst connection = new WebSocket(`wss://ws.derivws.com/websockets/v3?app_id=${app_id}`);\nconst api = new DerivAPIBasic({ connection });\n\nconst proposal = () => {\n  api.subscribe({\n    proposal: 1,\n    subscribe: 1,\n    amount: 10,\n    basis: 'payout',\n    contract_type: 'CALL',\n    currency: 'USD',\n    duration: 1,\n    duration_unit: 'm',\n    symbol: 'R_100',\n    barrier: '+0.1',\n  });\n};\n\nconst ping = () => {\n  setInterval(() => {\n    api.ping();\n  }, 30000); // Sends a ping message every 30 seconds\n};\n\nconst wsResponse = async (res) => {\n  const data = JSON.parse(res.data);\n  if (data.error !== undefined) {\n    console.log('Error:', data.error.message);\n    connection.removeEventListener('message', wsResponse);\n    await api.disconnect();\n  } else if (data.msg_type === 'proposal') {\n    console.log('Details:', data.proposal.longcode);\n    console.log('Ask Price:', data.proposal.display_value);\n    console.log('Payout:', data.proposal.payout);\n    console.log('Spot:', data.proposal.spot);\n  } else if (data.msg_type === 'ping') {\n    console.log('ping');\n  }\n};\n\nconst checkSignal = () => {\n  proposal();\n  ping();\n  connection.addEventListener('message', wsResponse);\n};\n\n// Browser-specific functionality\nif (typeof document !== 'undefined') {\n  const keep_alive_button = document.querySelector('#keep_alive');\n  const end_call_button = document.querySelector('#end_call');\n\n  keep_alive_button.addEventListener('click', checkSignal);\n  end_call_button.addEventListener('click', () => {\n    connection.removeEventListener('message', wsResponse);\n    proposal().unsubscribe();\n  });\n} else {\n  // For Node.js environment: start the signal check immediately\n  checkSignal();\n}\n\n/*\nInstructions:\n\n1. **Install Node.js**: Ensure you have Node.js installed from https://nodejs.org/.\n2. **Install Deriv API Package**: Use npm to install the Deriv API package by running:\nnpm install @deriv/deriv-api\n3. **Save the Code**: Save the code in a file, e.g., `websocket_example.js`.\n4. **Run in Node.js**:\n- In your terminal, navigate to the directory where you saved the file.\n- Run the script using:\n  ```\n  node websocket_example.js\n  ```\n5. **Run in a Browser**:\n- Include the script in your HTML page, and ensure there are two buttons with IDs `keep_alive` and `end_call`.\n- Use the `keep_alive` button to start the signal check and the `end_call` button to unsubscribe from the proposal and stop receiving messages.\n\nReplace the `app_id` in the URL if you have a different app ID.\n*/\n\nSwift\nRust\nPHP\nimport Foundation\n\n// Make webSocketTask a global variable to keep the connection open\nvar webSocketTask: URLSessionWebSocketTask?\n\n// Function to create and handle WebSocket connection\nfunc connectWebSocket() {\n    let appID = app_id // Replace with your app_id.\n    let url = URL(string: \"wss://ws.derivws.com/websockets/v3?app_id=\\(appID)\")! // WebSocket URL with the app_id\n    let request = URLRequest(url: url)\n    \n    // Initialize webSocketTask with URLSession\n    webSocketTask = URLSession.shared.webSocketTask(with: request)\n    \n    // Start the WebSocket connection\n    webSocketTask?.resume()\n    print(\"[open] Connection established\")\n    \n    // Function to send a proposal subscription request\n    func sendProposalSubscription() {\n        let proposalRequest = [\n            \"proposal\": 1,\n            \"subscribe\": 1,\n            \"amount\": 10,\n            \"basis\": \"payout\",\n            \"contract_type\": \"CALL\",\n            \"currency\": \"USD\",\n            \"duration\": 1,\n            \"duration_unit\": \"m\",\n            \"symbol\": \"R_100\",\n            \"barrier\": \"+0.1\"\n        ] as [String: Any]\n        \n        if let proposalData = try? JSONSerialization.data(withJSONObject: proposalRequest, options: []) {\n            let message = URLSessionWebSocketTask.Message.data(proposalData)\n            webSocketTask?.send(message) { error in\n                if let error = error {\n                    print(\"[error] Failed to send proposal subscription: \\(error.localizedDescription)\")\n                } else {\n                    print(\"Proposal subscription sent.\")\n                }\n            }\n        }\n    }\n    \n    // Function to send a ping message every 30 seconds\n    func startPing() {\n        Timer.scheduledTimer(withTimeInterval: 30.0, repeats: true) { _ in\n            let pingMessage = URLSessionWebSocketTask.Message.string(\"{\\\"ping\\\": 1}\")\n            webSocketTask?.send(pingMessage) { error in\n                if let error = error {\n                    print(\"[error] Failed to send ping: \\(error.localizedDescription)\")\n                } else {\n                    print(\"Ping sent to keep connection alive.\")\n                }\n            }\n        }\n    }\n    \n    // Function to receive messages from the server\n    func receiveMessage() {\n        webSocketTask?.receive { result in\n            switch result {\n            case .success(let message):\n                switch message {\n                case .string(let text):\n                    if let data = text.data(using: .utf8),\n                       let json = try? JSONSerialization.jsonObject(with: data, options: []) as? [String: Any] {\n                        handleServerMessage(json)\n                    }\n                case .data(let data):\n                    print(\"[message] Binary data received: \\(data)\")\n                @unknown default:\n                    print(\"[message] Received unknown message type\")\n                }\n                \n                // Continue to receive messages\n                receiveMessage()\n                \n            case .failure(let error):\n                print(\"[error] Failed to receive message: \\(error.localizedDescription)\")\n            }\n        }\n    }\n    \n    // Function to handle the proposal and ping response from server\n    func handleServerMessage(_ data: [String: Any]) {\n        if let error = data[\"error\"] as? [String: Any], let message = error[\"message\"] as? String {\n            print(\"[Error] \\(message)\")\n        } else if data[\"msg_type\"] as? String == \"proposal\", let proposal = data[\"proposal\"] as? [String: Any] {\n            print(\"Details: \\(proposal[\"longcode\"] ?? \"\")\")\n            print(\"Ask Price: \\(proposal[\"display_value\"] ?? \"\")\")\n            print(\"Payout: \\(proposal[\"payout\"] ?? \"\")\")\n            print(\"Spot: \\(proposal[\"spot\"] ?? \"\")\")\n        } else if data[\"msg_type\"] as? String == \"ping\" {\n            print(\"[Ping] Ping response received.\")\n        }\n    }\n    \n    // Start sending the proposal subscription and pinging the server\n    sendProposalSubscription()\n    startPing()\n    receiveMessage()\n}\n\n// Function to close the WebSocket connection\nfunc closeWebSocketConnection() {\n    webSocketTask?.cancel(with: .normalClosure, reason: nil)\n    print(\"[close] Connection closed cleanly\")\n}\n\n// Start WebSocket connection\nconnectWebSocket()\n\n// Keep the program running to wait for messages\nRunLoop.main.run()\n\n/*\n * Instructions to Run:\n * 1. Ensure Swift is installed on your machine.\n * 2. Save this code in a file, for example, `WebSocketClient.swift`.\n * 3. Open a terminal, navigate to the directory where you saved the file, and run:\n *      swift WebSocketClient.swift\n * 4. The script connects to the WebSocket server, sends a proposal subscription, and sends a ping every 30 seconds to keep the connection alive.\n */\n\nGo\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"log\"\n\t\"time\"\n\n\t\"nhooyr.io/websocket\"\n\t\"nhooyr.io/websocket/wsjson\"\n)\n\n// Define constants\nconst (\n\twebSocketURL = \"wss://ws.derivws.com/websockets/v3?app_id=app_id\"//Replace with your app_id\n)\n\n// ProposalRequest defines the structure of the proposal subscription request\ntype ProposalRequest struct {\n\tProposal      int    `json:\"proposal\"`\n\tSubscribe     int    `json:\"subscribe\"`\n\tAmount        int    `json:\"amount\"`\n\tBasis         string `json:\"basis\"`\n\tContractType  string `json:\"contract_type\"`\n\tCurrency      string `json:\"currency\"`\n\tDuration      int    `json:\"duration\"`\n\tDurationUnit  string `json:\"duration_unit\"`\n\tSymbol        string `json:\"symbol\"`\n\tBarrier       string `json:\"barrier\"`\n}\n\nfunc main() {\n\t// Set up WebSocket connection context\n\tctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)\n\tdefer cancel()\n\n\t// Establish a WebSocket connection\n\tconn, _, err := websocket.Dial(ctx, webSocketURL, nil)\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to connect to WebSocket: %v\", err)\n\t}\n\tdefer conn.Close(websocket.StatusNormalClosure, \"normal closure\")\n\tfmt.Println(\"WebSocket connection established.\")\n\n\t// Send initial proposal subscription request\n\terr = sendProposalRequest(ctx, conn)\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to send proposal request: %v\", err)\n\t}\n\n\t// Start keep-alive ping\n\tgo keepAlivePing(ctx, conn)\n\n\t// Handle incoming messages\n\thandleResponses(ctx, conn)\n}\n\n// sendProposalRequest sends a proposal subscription request to the WebSocket server\nfunc sendProposalRequest(ctx context.Context, conn *websocket.Conn) error {\n\t// Construct proposal subscription request\n\tproposal := ProposalRequest{\n\t\tProposal:     1,\n\t\tSubscribe:    1,\n\t\tAmount:       10,\n\t\tBasis:        \"payout\",\n\t\tContractType: \"CALL\",\n\t\tCurrency:     \"USD\",\n\t\tDuration:     1,\n\t\tDurationUnit: \"m\",\n\t\tSymbol:       \"R_100\",\n\t\tBarrier:      \"+0.1\",\n\t}\n\tfmt.Println(\"Sending proposal subscription...\")\n\n\treturn wsjson.Write(ctx, conn, proposal)\n}\n\n// keepAlivePing sends a ping message every 30 seconds to keep the connection alive\nfunc keepAlivePing(ctx context.Context, conn *websocket.Conn) {\n\tticker := time.NewTicker(30 * time.Second)\n\tdefer ticker.Stop()\n\n\tfor {\n\t\tselect {\n\t\tcase <-ticker.C:\n\t\t\t// Send ping message\n\t\t\tpingMsg := map[string]int{\"ping\": 1}\n\t\t\terr := wsjson.Write(ctx, conn, pingMsg)\n\t\t\tif err != nil {\n\t\t\t\tlog.Printf(\"Ping failed: %v\", err)\n\t\t\t\treturn\n\t\t\t}\n\t\t\tfmt.Println(\"Ping sent.\")\n\t\tcase <-ctx.Done():\n\t\t\treturn\n\t\t}\n\t}\n}\n\n// handleResponses listens for and processes messages received from the WebSocket server\nfunc handleResponses(ctx context.Context, conn *websocket.Conn) {\n\tfor {\n\t\tvar response map[string]interface{}\n\t\terr := wsjson.Read(ctx, conn, &response)\n\t\tif err != nil {\n\t\t\tlog.Fatalf(\"Error reading message: %v\", err)\n\t\t}\n\n\t\t// Process response messages\n\t\tmsgType := response[\"msg_type\"]\n\t\tswitch msgType {\n\t\tcase \"proposal\":\n\t\t\t// Print proposal details\n\t\t\tproposal := response[\"proposal\"].(map[string]interface{})\n\t\t\tfmt.Printf(\"Details: %v\\n\", proposal[\"longcode\"])\n\t\t\tfmt.Printf(\"Ask Price: %v\\n\", proposal[\"display_value\"])\n\t\t\tfmt.Printf(\"Payout: %v\\n\", proposal[\"payout\"])\n\t\t\tfmt.Printf(\"Spot: %v\\n\", proposal[\"spot\"])\n\t\tcase \"ping\":\n\t\t\tfmt.Println(\"[Ping] Ping response received.\")\n\t\tdefault:\n\t\t\tfmt.Printf(\"Received message: %v\\n\", response)\n\t\t}\n\t}\n}\n\n/*\nInstructions to run the code locally:\n\n1. Install Go: Ensure you have Go installed on your machine. You can download it from https://golang.org/dl/.\n\n2. Save the code:\n   - Save this code into a file named `connect.go`.\n\n3. Initialize a Go module:\n   - Open a terminal in the directory containing `connect.go`.\n   - Run `go mod init app` to initialize a new Go module.\n   - Run `go get nhooyr.io/websocket` to install the WebSocket package dependency.\n\n4. Run the code:\n   - Execute the code using the command `go run connect.go`.\n   - Alternatively, you can build and run the executable:\n     ```\n     go build -o connect connect.go\n     ./connect\n     ```\n5. Replace `app_id=1089` with your actual app_id if needed.\n*/\n\nC#\nC\nusing System;\nusing System.Net.WebSockets;\nusing System.Text;\nusing System.Text.Json;\nusing System.Threading;\nusing System.Threading.Tasks;\n\nclass WebSocketExample\n{\n    private static readonly Uri uri = new Uri(\"wss://ws.derivws.com/websockets/v3?app_id=app_id\"); // Replace with your app_id if needed\n    private static readonly int pingInterval = 30000; // Ping every 30 seconds\n\n    public static async Task Main(string[] args)\n    {\n        using (ClientWebSocket webSocket = new ClientWebSocket())\n        {\n            Console.WriteLine(\"Attempting to connect to WebSocket...\");\n\n            await webSocket.ConnectAsync(uri, CancellationToken.None);\n            Console.WriteLine(\"WebSocket connection established.\");\n\n            // Send initial proposal subscription request\n            await SendProposalSubscription(webSocket);\n\n            // Start a task to send pings to keep connection alive\n            Task keepAlivePingTask = KeepAlivePing(webSocket);\n\n            // Handle responses from the server\n            await HandleResponses(webSocket);\n\n            // Ensure the keep-alive ping task finishes\n            await keepAlivePingTask;\n        }\n    }\n\n    private static async Task SendProposalSubscription(ClientWebSocket webSocket)\n    {\n        var proposalRequest = new\n        {\n            proposal = 1,\n            subscribe = 1,\n            amount = 10,\n            basis = \"payout\",\n            contract_type = \"CALL\",\n            currency = \"USD\",\n            duration = 1,\n            duration_unit = \"m\",\n            symbol = \"R_100\",\n            barrier = \"+0.1\"\n        };\n\n        string requestJson = JsonSerializer.Serialize(proposalRequest);\n        var bytes = Encoding.UTF8.GetBytes(requestJson);\n        await webSocket.SendAsync(new ArraySegment<byte>(bytes), WebSocketMessageType.Text, true, CancellationToken.None);\n        Console.WriteLine(\"Proposal subscription sent.\");\n    }\n\n    private static async Task KeepAlivePing(ClientWebSocket webSocket)\n    {\n        while (webSocket.State == WebSocketState.Open)\n        {\n            await Task.Delay(pingInterval);\n\n            var pingRequest = new { ping = 1 };\n            string pingJson = JsonSerializer.Serialize(pingRequest);\n            var pingBytes = Encoding.UTF8.GetBytes(pingJson);\n            await webSocket.SendAsync(new ArraySegment<byte>(pingBytes), WebSocketMessageType.Text, true, CancellationToken.None);\n            Console.WriteLine(\"Ping sent to keep connection alive.\");\n        }\n    }\n\nprivate static async Task HandleResponses(ClientWebSocket webSocket)\n{\n    var buffer = new byte[1024 * 4];\n\n    while (webSocket.State == WebSocketState.Open)\n    {\n        var result = await webSocket.ReceiveAsync(new ArraySegment<byte>(buffer), CancellationToken.None);\n\n        if (result.MessageType == WebSocketMessageType.Close)\n        {\n            Console.WriteLine(\"WebSocket connection closed by server.\");\n            await webSocket.CloseAsync(WebSocketCloseStatus.NormalClosure, \"Closing\", CancellationToken.None);\n        }\n        else\n        {\n            string response = Encoding.UTF8.GetString(buffer, 0, result.Count);\n            var data = JsonSerializer.Deserialize<JsonElement>(response);\n\n            if (data.TryGetProperty(\"error\", out var error))\n            {\n                Console.WriteLine($\"[Error] {error.GetProperty(\"message\").GetString()}\");\n                await webSocket.CloseAsync(WebSocketCloseStatus.NormalClosure, \"Closing due to error\", CancellationToken.None);\n                break;\n            }\n\n            if (data.TryGetProperty(\"msg_type\", out var msgType))\n            {\n                if (msgType.GetString() == \"proposal\")\n                {\n                    var proposal = data.GetProperty(\"proposal\");\n\n                    // Extract proposal details with type-checking\n                    string longcode = proposal.GetProperty(\"longcode\").GetString();\n                    Console.WriteLine($\"Details: {longcode}\");\n\n                    string displayValue = proposal.GetProperty(\"display_value\").GetRawText();\n                    Console.WriteLine($\"Ask Price: {displayValue}\");\n\n                    string payout = proposal.GetProperty(\"payout\").GetRawText();\n                    Console.WriteLine($\"Payout: {payout}\");\n\n                    string spot = proposal.GetProperty(\"spot\").GetRawText();\n                    Console.WriteLine($\"Spot: {spot}\");\n                }\n                else if (msgType.GetString() == \"ping\")\n                {\n                    Console.WriteLine(\"[Ping] Ping response received.\");\n                }\n            }\n        }\n    }\n}\n}\n\n/*\nInstructions to run the code locally:\n\n1. Ensure you have .NET SDK installed. You can download it from https://dotnet.microsoft.com/download.\n\n2. Save the code to a file named `WebSocketExample.cs`.\n\n3. Open a terminal in the directory containing `WebSocketExample.cs`.\n\n4. If using the .NET CLI, you can run the code with:\n   - `dotnet new console -o WebSocketExample` (if creating a new project)\n   - Move `WebSocketExample.cs` into the project directory `WebSocketExample`.\n   - Navigate to the project directory: `cd WebSocketExample`.\n   - Run `dotnet add package System.Net.WebSockets.Client` to add the WebSocket client dependency.\n   - Run the code: `dotnet run`.\n\n5. Alternatively, you can use an IDE like Visual Studio to create a console application, add the `System.Net.WebSockets.Client` package, and then run the application.\n\n6. Replace `app_id=1089` in the URL with your actual app_id if needed.\n*/\n\nPython\nimport asyncio\nfrom deriv_api import DerivAPI\nfrom deriv_api.subscription_manager import SubscriptionManager\n\n# Replace with your actual app_id\napp_id = app_id\n\nasync def main():\n    # Initialize the DerivAPI instance\n    api = DerivAPI(app_id=app_id)\n\n    # Initialize the SubscriptionManager\n    subscription_manager = SubscriptionManager(api)\n\n    # Define the proposal request\n    proposal_request = {\n        \"proposal\": 1,\n        \"amount\": 10,\n        \"basis\": \"payout\",\n        \"contract_type\": \"CALL\",\n        \"currency\": \"USD\",\n        \"duration\": 1,\n        \"duration_unit\": \"m\",\n        \"symbol\": \"R_100\",\n        \"barrier\": \"+0.1\"\n    }\n\n    # Subscribe to the proposal stream\n    try:\n        proposal_stream = await subscription_manager.subscribe(proposal_request)\n        print(\"Subscribed to proposal stream\")\n\n        # Handle incoming messages and print formatted proposal details\n        proposal_stream.subscribe(\n            on_next=lambda message: print_proposal_details(message),\n            on_error=lambda e: print(f\"Error: {e}\"),\n            on_completed=lambda: print(\"Subscription completed\")\n        )\n\n        # Function to send a ping every 30 seconds\n        async def keep_alive():\n            while True:\n                await api.ping()  # Send a ping message\n                print(\"Sent ping to keep connection alive\")\n                await asyncio.sleep(30)  # Ping every 30 seconds\n\n        # Run the keep-alive ping loop and proposal subscription concurrently\n        await asyncio.gather(keep_alive())\n\n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n\n    finally:\n        # Disconnect from the API\n        await api.disconnect()\n        print(\"Disconnected from Deriv API\")\n\n# Helper function to format and print proposal details\ndef print_proposal_details(message):\n    data = message.get(\"proposal\", {})\n    if data:\n        print(f\"Details: {data.get('longcode', 'N/A')}\")\n        print(f\"Ask Price: {data.get('display_value', 'N/A')}\")\n        print(f\"Payout: {data.get('payout', 'N/A')}\")\n        print(f\"Spot: {data.get('spot', 'N/A')}\")\n\n# Run the main function\nif __name__ == \"__main__\":\n    asyncio.run(main())\n\n\"\"\"\nInstructions to run this code:\n\n1. **Install the Required Library**:\n   - Ensure that `python-deriv-api` is installed. If not, install it using:\n     ```\n     pip install python-deriv-api\n     ```\n2. **Save and Run the Code**:\n   - Save this code to a file, e.g., `connect.py`.\n   - Run the script using:\n     ```\n     python connect.py\n     ```\n3. **Configuration**:\n   - Replace the `app_id` variable with your actual Deriv app ID if needed.\n\nThis script will connect to the Deriv API WebSocket, subscribe to a proposal stream, print proposal details, and send a ping every 30 seconds to keep the connection active. \n\"\"\"\n\nPerl\n#!/usr/bin/env perl\nuse strict;\nuse warnings;\nuse v5.014;\nuse AnyEvent;\nuse AnyEvent::WebSocket::Client;\nuse JSON;\n\n# WebSocket URL and app_id\nmy $app_id = app_id;\nmy $url = \"wss://ws.derivws.com/websockets/v3?app_id=$app_id\";\n\n# Create WebSocket client and connection\nmy $client = AnyEvent::WebSocket::Client->new;\n$| = 1;  # Flush output immediately for real-time logging\n\n# Define a ping interval in seconds\nmy $ping_interval = 30;\n\n# Function to send a proposal subscription request\nsub send_proposal {\n    my $connection = shift;\n    my $proposal_request = encode_json({\n        proposal       => 1,\n        subscribe      => 1,\n        amount         => 10,\n        basis          => 'payout',\n        contract_type  => 'CALL',\n        currency       => 'USD',\n        duration       => 1,\n        duration_unit  => 'm',\n        symbol         => 'R_100',\n        barrier        => '+0.1'\n    });\n    $connection->send($proposal_request);\n    say \"Proposal subscription sent.\";\n}\n\n# Establish WebSocket connection\n$client->connect($url)->cb(sub {\n    my $connection = eval { shift->recv };\n    if (!$connection) {\n        die \"Connection error: $@\";\n    }\n    say \"WebSocket connection established.\";\n\n    # Set up a repeating timer to send ping every 30 seconds\n    my $ping_timer = AnyEvent->timer(\n        after    => $ping_interval,\n        interval => $ping_interval,\n        cb       => sub {\n            $connection->send(encode_json({ ping => 1 }));\n            say \"Ping sent to keep connection alive.\";\n        }\n    );\n\n    # Send the initial proposal subscription\n    send_proposal($connection);\n\n    # Handle incoming messages\n    $connection->on(each_message => sub {\n        my ($connection, $message) = @_;\n        my $data = decode_json($message->body);\n\n        # Handle errors\n        if ($data->{error}) {\n            say \"[Error] \" . $data->{error}{message};\n            $connection->close;\n            return;\n        }\n\n        # Handle proposal messages\n        if ($data->{msg_type} && $data->{msg_type} eq 'proposal') {\n            my $proposal = $data->{proposal};\n            say \"Details: $proposal->{longcode}\";\n            say \"Ask Price: $proposal->{display_value}\";\n            say \"Payout: $proposal->{payout}\";\n            say \"Spot: $proposal->{spot}\";\n        } elsif ($data->{msg_type} && $data->{msg_type} eq 'ping') {\n            say \"[Ping] Ping response received.\";\n        }\n    });\n\n    # Handle connection close\n    $connection->on(finish => sub {\n        say \"WebSocket connection closed.\";\n        $ping_timer = undef;  # Stop the ping timer\n    });\n});\n\n# Start the AnyEvent event loop\nAnyEvent->condvar->recv;\n\n# Instructions to run the code on a local machine:\n# 1. Ensure you have Perl installed on your machine.\n# 2. Install the necessary Perl modules using the following commands:\n#      cpanm AnyEvent AnyEvent::WebSocket::Client JSON\n#    If `cpanm` is not installed, install it using `cpan App::cpanminus`.\n# 3. Save this script to a file, e.g., `connect.pl`.\n# 4. Run the script using the command:\n#      perl connect.pl\n# This script will connect to the Deriv WebSocket API, subscribe to a proposal, and send a ping every 30 seconds to keep the connection alive.\n\n\nUpdated 9 months ago\n\nDid this page help you?\nYes\nNo",
      "headings": [
        {
          "level": "h3",
          "text": "Import the Deriv API library"
        },
        {
          "level": "h3",
          "text": "Establish a WebSocket connection"
        },
        {
          "level": "h3",
          "text": "Create an API object"
        },
        {
          "level": "h3",
          "text": "Send a proposal subscription"
        },
        {
          "level": "h3",
          "text": "Send ping to keep the connection alive"
        },
        {
          "level": "h3",
          "text": "Handle WebSocket responses"
        },
        {
          "level": "h3",
          "text": "Start the signal processing"
        },
        {
          "level": "h3",
          "text": "End the WebSocket subscription"
        }
      ],
      "codeBlocks": [
        {
          "language": "text",
          "content": "DerivAPIBasic"
        },
        {
          "language": "text",
          "content": "import DerivAPIBasic from 'https://cdn.skypack.dev/@deriv/deriv-api/dist/DerivAPIBasic';"
        },
        {
          "language": "text",
          "content": "app_id"
        },
        {
          "language": "text",
          "content": "wss://ws.derivws.com/websockets/v3?app_id=${app_id}"
        },
        {
          "language": "text",
          "content": "const connection = new WebSocket("
        },
        {
          "language": "text",
          "content": ");"
        },
        {
          "language": "text",
          "content": "DerivAPIBasic"
        },
        {
          "language": "text",
          "content": "const api = new DerivAPIBasic({ connection });"
        },
        {
          "language": "text",
          "content": "proposal()"
        },
        {
          "language": "text",
          "content": "const proposal = () => {  \n  api.subscribe({  \n    proposal: 1,  \n    subscribe: 1,  \n    amount: 10,  \n    basis: 'payout',  \n    contract_type: 'CALL',  \n    currency: 'USD',  \n    duration: 1,  \n    duration_unit: 'm',  \n    symbol: 'R_100',  \n    barrier: '+0.1',  \n  });  \n};"
        },
        {
          "language": "text",
          "content": "const proposal = () => {  \n  api.subscribe({  \n    proposal: 1,  \n    subscribe: 1,  \n    amount: 10,  \n    basis: 'payout',  \n    contract_type: 'CALL',  \n    currency: 'USD',  \n    duration: 1,  \n    duration_unit: 'm',  \n    symbol: 'R_100',  \n    barrier: '+0.1',  \n  });  \n};"
        },
        {
          "language": "text",
          "content": "ping()"
        },
        {
          "language": "text",
          "content": "ping"
        },
        {
          "language": "text",
          "content": "setInterval"
        },
        {
          "language": "text",
          "content": "const ping = () => {\n  setInterval(() => {\n    api.ping();\n  }, 30000);\n};"
        },
        {
          "language": "text",
          "content": "const ping = () => {\n  setInterval(() => {\n    api.ping();\n  }, 30000);\n};"
        },
        {
          "language": "text",
          "content": "wsResponse()"
        },
        {
          "language": "text",
          "content": "const wsResponse = async (res) => {\n  const data = JSON.parse(res.data);\n  if (data.error !== undefined) {\n    console.log('Error: %s ', data.error.message);\n    connection.removeEventListener('message', wsResponse, false);\n    await api.disconnect();\n  } else if (data.msg_type === 'proposal') {\n    console.log('Details: %s', data.proposal.longcode);\n    console.log('Ask Price: %s', data.proposal.display_value);\n    console.log('Payout: %f', data.proposal.payout);\n    console.log('Spot: %f', data.proposal.spot);\n  } else if (data.msg_type === 'ping') {\n    console.log('ping');\n  }\n};"
        },
        {
          "language": "text",
          "content": "const wsResponse = async (res) => {\n  const data = JSON.parse(res.data);\n  if (data.error !== undefined) {\n    console.log('Error: %s ', data.error.message);\n    connection.removeEventListener('message', wsResponse, false);\n    await api.disconnect();\n  } else if (data.msg_type === 'proposal') {\n    console.log('Details: %s', data.proposal.longcode);\n    console.log('Ask Price: %s', data.proposal.display_value);\n    console.log('Payout: %f', data.proposal.payout);\n    console.log('Spot: %f', data.proposal.spot);\n  } else if (data.msg_type === 'ping') {\n    console.log('ping');\n  }\n};"
        },
        {
          "language": "text",
          "content": "checkSignal()"
        },
        {
          "language": "text",
          "content": "proposal()"
        },
        {
          "language": "text",
          "content": "ping()"
        },
        {
          "language": "text",
          "content": "connection.addEventListener('message', wsResponse)"
        },
        {
          "language": "text",
          "content": "wsResponse()"
        },
        {
          "language": "text",
          "content": "const checkSignal = () => {\n  proposal();\n  ping();\n  connection.addEventListener('message', wsResponse);\n};"
        },
        {
          "language": "text",
          "content": "const checkSignal = () => {\n  proposal();\n  ping();\n  connection.addEventListener('message', wsResponse);\n};"
        },
        {
          "language": "text",
          "content": "endCall()"
        },
        {
          "language": "text",
          "content": "unsubscribe()"
        },
        {
          "language": "text",
          "content": "proposal()"
        },
        {
          "language": "text",
          "content": "const endCall = () => {\n  connection.removeEventListener('message', wsResponse, false);\n  proposal().unsubscribe();\n};"
        },
        {
          "language": "text",
          "content": "const endCall = () => {\n  connection.removeEventListener('message', wsResponse, false);\n  proposal().unsubscribe();\n};"
        },
        {
          "language": "text",
          "content": "import DerivAPIBasic from '@deriv/deriv-api/dist/DerivAPIBasic.js';\n\nconst app_id = app_id; // Replace with your app_id if different.\nconst connection = new WebSocket(`wss://ws.derivws.com/websockets/v3?app_id=${app_id}`);\nconst api = new DerivAPIBasic({ connection });\n\nconst proposal = () => {\n  api.subscribe({\n    proposal: 1,\n    subscribe: 1,\n    amount: 10,\n    basis: 'payout',\n    contract_type: 'CALL',\n    currency: 'USD',\n    duration: 1,\n    duration_unit: 'm',\n    symbol: 'R_100',\n    barrier: '+0.1',\n  });\n};\n\nconst ping = () => {\n  setInterval(() => {\n    api.ping();\n  }, 30000); // Sends a ping message every 30 seconds\n};\n\nconst wsResponse = async (res) => {\n  const data = JSON.parse(res.data);\n  if (data.error !== undefined) {\n    console.log('Error:', data.error.message);\n    connection.removeEventListener('message', wsResponse);\n    await api.disconnect();\n  } else if (data.msg_type === 'proposal') {\n    console.log('Details:', data.proposal.longcode);\n    console.log('Ask Price:', data.proposal.display_value);\n    console.log('Payout:', data.proposal.payout);\n    console.log('Spot:', data.proposal.spot);\n  } else if (data.msg_type === 'ping') {\n    console.log('ping');\n  }\n};\n\nconst checkSignal = () => {\n  proposal();\n  ping();\n  connection.addEventListener('message', wsResponse);\n};\n\n// Browser-specific functionality\nif (typeof document !== 'undefined') {\n  const keep_alive_button = document.querySelector('#keep_alive');\n  const end_call_button = document.querySelector('#end_call');\n\n  keep_alive_button.addEventListener('click', checkSignal);\n  end_call_button.addEventListener('click', () => {\n    connection.removeEventListener('message', wsResponse);\n    proposal().unsubscribe();\n  });\n} else {\n  // For Node.js environment: start the signal check immediately\n  checkSignal();\n}\n\n/*\nInstructions:\n\n1. **Install Node.js**: Ensure you have Node.js installed from https://nodejs.org/.\n2. **Install Deriv API Package**: Use npm to install the Deriv API package by running:\nnpm install @deriv/deriv-api\n3. **Save the Code**: Save the code in a file, e.g., `websocket_example.js`.\n4. **Run in Node.js**:\n- In your terminal, navigate to the directory where you saved the file.\n- Run the script using:\n  ```\n  node websocket_example.js\n  ```\n5. **Run in a Browser**:\n- Include the script in your HTML page, and ensure there are two buttons with IDs `keep_alive` and `end_call`.\n- Use the `keep_alive` button to start the signal check and the `end_call` button to unsubscribe from the proposal and stop receiving messages.\n\nReplace the `app_id` in the URL if you have a different app ID.\n*/"
        },
        {
          "language": "text",
          "content": "import DerivAPIBasic from '@deriv/deriv-api/dist/DerivAPIBasic.js';\n\nconst app_id = app_id; // Replace with your app_id if different.\nconst connection = new WebSocket(`wss://ws.derivws.com/websockets/v3?app_id=${app_id}`);\nconst api = new DerivAPIBasic({ connection });\n\nconst proposal = () => {\n  api.subscribe({\n    proposal: 1,\n    subscribe: 1,\n    amount: 10,\n    basis: 'payout',\n    contract_type: 'CALL',\n    currency: 'USD',\n    duration: 1,\n    duration_unit: 'm',\n    symbol: 'R_100',\n    barrier: '+0.1',\n  });\n};\n\nconst ping = () => {\n  setInterval(() => {\n    api.ping();\n  }, 30000); // Sends a ping message every 30 seconds\n};\n\nconst wsResponse = async (res) => {\n  const data = JSON.parse(res.data);\n  if (data.error !== undefined) {\n    console.log('Error:', data.error.message);\n    connection.removeEventListener('message', wsResponse);\n    await api.disconnect();\n  } else if (data.msg_type === 'proposal') {\n    console.log('Details:', data.proposal.longcode);\n    console.log('Ask Price:', data.proposal.display_value);\n    console.log('Payout:', data.proposal.payout);\n    console.log('Spot:', data.proposal.spot);\n  } else if (data.msg_type === 'ping') {\n    console.log('ping');\n  }\n};\n\nconst checkSignal = () => {\n  proposal();\n  ping();\n  connection.addEventListener('message', wsResponse);\n};\n\n// Browser-specific functionality\nif (typeof document !== 'undefined') {\n  const keep_alive_button = document.querySelector('#keep_alive');\n  const end_call_button = document.querySelector('#end_call');\n\n  keep_alive_button.addEventListener('click', checkSignal);\n  end_call_button.addEventListener('click', () => {\n    connection.removeEventListener('message', wsResponse);\n    proposal().unsubscribe();\n  });\n} else {\n  // For Node.js environment: start the signal check immediately\n  checkSignal();\n}\n\n/*\nInstructions:\n\n1. **Install Node.js**: Ensure you have Node.js installed from https://nodejs.org/.\n2. **Install Deriv API Package**: Use npm to install the Deriv API package by running:\nnpm install @deriv/deriv-api\n3. **Save the Code**: Save the code in a file, e.g., `websocket_example.js`.\n4. **Run in Node.js**:\n- In your terminal, navigate to the directory where you saved the file.\n- Run the script using:\n  ```\n  node websocket_example.js\n  ```\n5. **Run in a Browser**:\n- Include the script in your HTML page, and ensure there are two buttons with IDs `keep_alive` and `end_call`.\n- Use the `keep_alive` button to start the signal check and the `end_call` button to unsubscribe from the proposal and stop receiving messages.\n\nReplace the `app_id` in the URL if you have a different app ID.\n*/"
        },
        {
          "language": "text",
          "content": "import Foundation\n\n// Make webSocketTask a global variable to keep the connection open\nvar webSocketTask: URLSessionWebSocketTask?\n\n// Function to create and handle WebSocket connection\nfunc connectWebSocket() {\n    let appID = app_id // Replace with your app_id.\n    let url = URL(string: \"wss://ws.derivws.com/websockets/v3?app_id=\\(appID)\")! // WebSocket URL with the app_id\n    let request = URLRequest(url: url)\n    \n    // Initialize webSocketTask with URLSession\n    webSocketTask = URLSession.shared.webSocketTask(with: request)\n    \n    // Start the WebSocket connection\n    webSocketTask?.resume()\n    print(\"[open] Connection established\")\n    \n    // Function to send a proposal subscription request\n    func sendProposalSubscription() {\n        let proposalRequest = [\n            \"proposal\": 1,\n            \"subscribe\": 1,\n            \"amount\": 10,\n            \"basis\": \"payout\",\n            \"contract_type\": \"CALL\",\n            \"currency\": \"USD\",\n            \"duration\": 1,\n            \"duration_unit\": \"m\",\n            \"symbol\": \"R_100\",\n            \"barrier\": \"+0.1\"\n        ] as [String: Any]\n        \n        if let proposalData = try? JSONSerialization.data(withJSONObject: proposalRequest, options: []) {\n            let message = URLSessionWebSocketTask.Message.data(proposalData)\n            webSocketTask?.send(message) { error in\n                if let error = error {\n                    print(\"[error] Failed to send proposal subscription: \\(error.localizedDescription)\")\n                } else {\n                    print(\"Proposal subscription sent.\")\n                }\n            }\n        }\n    }\n    \n    // Function to send a ping message every 30 seconds\n    func startPing() {\n        Timer.scheduledTimer(withTimeInterval: 30.0, repeats: true) { _ in\n            let pingMessage = URLSessionWebSocketTask.Message.string(\"{\\\"ping\\\": 1}\")\n            webSocketTask?.send(pingMessage) { error in\n                if let error = error {\n                    print(\"[error] Failed to send ping: \\(error.localizedDescription)\")\n                } else {\n                    print(\"Ping sent to keep connection alive.\")\n                }\n            }\n        }\n    }\n    \n    // Function to receive messages from the server\n    func receiveMessage() {\n        webSocketTask?.receive { result in\n            switch result {\n            case .success(let message):\n                switch message {\n                case .string(let text):\n                    if let data = text.data(using: .utf8),\n                       let json = try? JSONSerialization.jsonObject(with: data, options: []) as? [String: Any] {\n                        handleServerMessage(json)\n                    }\n                case .data(let data):\n                    print(\"[message] Binary data received: \\(data)\")\n                @unknown default:\n                    print(\"[message] Received unknown message type\")\n                }\n                \n                // Continue to receive messages\n                receiveMessage()\n                \n            case .failure(let error):\n                print(\"[error] Failed to receive message: \\(error.localizedDescription)\")\n            }\n        }\n    }\n    \n    // Function to handle the proposal and ping response from server\n    func handleServerMessage(_ data: [String: Any]) {\n        if let error = data[\"error\"] as? [String: Any], let message = error[\"message\"] as? String {\n            print(\"[Error] \\(message)\")\n        } else if data[\"msg_type\"] as? String == \"proposal\", let proposal = data[\"proposal\"] as? [String: Any] {\n            print(\"Details: \\(proposal[\"longcode\"] ?? \"\")\")\n            print(\"Ask Price: \\(proposal[\"display_value\"] ?? \"\")\")\n            print(\"Payout: \\(proposal[\"payout\"] ?? \"\")\")\n            print(\"Spot: \\(proposal[\"spot\"] ?? \"\")\")\n        } else if data[\"msg_type\"] as? String == \"ping\" {\n            print(\"[Ping] Ping response received.\")\n        }\n    }\n    \n    // Start sending the proposal subscription and pinging the server\n    sendProposalSubscription()\n    startPing()\n    receiveMessage()\n}\n\n// Function to close the WebSocket connection\nfunc closeWebSocketConnection() {\n    webSocketTask?.cancel(with: .normalClosure, reason: nil)\n    print(\"[close] Connection closed cleanly\")\n}\n\n// Start WebSocket connection\nconnectWebSocket()\n\n// Keep the program running to wait for messages\nRunLoop.main.run()\n\n/*\n * Instructions to Run:\n * 1. Ensure Swift is installed on your machine.\n * 2. Save this code in a file, for example, `WebSocketClient.swift`.\n * 3. Open a terminal, navigate to the directory where you saved the file, and run:\n *      swift WebSocketClient.swift\n * 4. The script connects to the WebSocket server, sends a proposal subscription, and sends a ping every 30 seconds to keep the connection alive.\n */"
        },
        {
          "language": "text",
          "content": "import Foundation\n\n// Make webSocketTask a global variable to keep the connection open\nvar webSocketTask: URLSessionWebSocketTask?\n\n// Function to create and handle WebSocket connection\nfunc connectWebSocket() {\n    let appID = app_id // Replace with your app_id.\n    let url = URL(string: \"wss://ws.derivws.com/websockets/v3?app_id=\\(appID)\")! // WebSocket URL with the app_id\n    let request = URLRequest(url: url)\n    \n    // Initialize webSocketTask with URLSession\n    webSocketTask = URLSession.shared.webSocketTask(with: request)\n    \n    // Start the WebSocket connection\n    webSocketTask?.resume()\n    print(\"[open] Connection established\")\n    \n    // Function to send a proposal subscription request\n    func sendProposalSubscription() {\n        let proposalRequest = [\n            \"proposal\": 1,\n            \"subscribe\": 1,\n            \"amount\": 10,\n            \"basis\": \"payout\",\n            \"contract_type\": \"CALL\",\n            \"currency\": \"USD\",\n            \"duration\": 1,\n            \"duration_unit\": \"m\",\n            \"symbol\": \"R_100\",\n            \"barrier\": \"+0.1\"\n        ] as [String: Any]\n        \n        if let proposalData = try? JSONSerialization.data(withJSONObject: proposalRequest, options: []) {\n            let message = URLSessionWebSocketTask.Message.data(proposalData)\n            webSocketTask?.send(message) { error in\n                if let error = error {\n                    print(\"[error] Failed to send proposal subscription: \\(error.localizedDescription)\")\n                } else {\n                    print(\"Proposal subscription sent.\")\n                }\n            }\n        }\n    }\n    \n    // Function to send a ping message every 30 seconds\n    func startPing() {\n        Timer.scheduledTimer(withTimeInterval: 30.0, repeats: true) { _ in\n            let pingMessage = URLSessionWebSocketTask.Message.string(\"{\\\"ping\\\": 1}\")\n            webSocketTask?.send(pingMessage) { error in\n                if let error = error {\n                    print(\"[error] Failed to send ping: \\(error.localizedDescription)\")\n                } else {\n                    print(\"Ping sent to keep connection alive.\")\n                }\n            }\n        }\n    }\n    \n    // Function to receive messages from the server\n    func receiveMessage() {\n        webSocketTask?.receive { result in\n            switch result {\n            case .success(let message):\n                switch message {\n                case .string(let text):\n                    if let data = text.data(using: .utf8),\n                       let json = try? JSONSerialization.jsonObject(with: data, options: []) as? [String: Any] {\n                        handleServerMessage(json)\n                    }\n                case .data(let data):\n                    print(\"[message] Binary data received: \\(data)\")\n                @unknown default:\n                    print(\"[message] Received unknown message type\")\n                }\n                \n                // Continue to receive messages\n                receiveMessage()\n                \n            case .failure(let error):\n                print(\"[error] Failed to receive message: \\(error.localizedDescription)\")\n            }\n        }\n    }\n    \n    // Function to handle the proposal and ping response from server\n    func handleServerMessage(_ data: [String: Any]) {\n        if let error = data[\"error\"] as? [String: Any], let message = error[\"message\"] as? String {\n            print(\"[Error] \\(message)\")\n        } else if data[\"msg_type\"] as? String == \"proposal\", let proposal = data[\"proposal\"] as? [String: Any] {\n            print(\"Details: \\(proposal[\"longcode\"] ?? \"\")\")\n            print(\"Ask Price: \\(proposal[\"display_value\"] ?? \"\")\")\n            print(\"Payout: \\(proposal[\"payout\"] ?? \"\")\")\n            print(\"Spot: \\(proposal[\"spot\"] ?? \"\")\")\n        } else if data[\"msg_type\"] as? String == \"ping\" {\n            print(\"[Ping] Ping response received.\")\n        }\n    }\n    \n    // Start sending the proposal subscription and pinging the server\n    sendProposalSubscription()\n    startPing()\n    receiveMessage()\n}\n\n// Function to close the WebSocket connection\nfunc closeWebSocketConnection() {\n    webSocketTask?.cancel(with: .normalClosure, reason: nil)\n    print(\"[close] Connection closed cleanly\")\n}\n\n// Start WebSocket connection\nconnectWebSocket()\n\n// Keep the program running to wait for messages\nRunLoop.main.run()\n\n/*\n * Instructions to Run:\n * 1. Ensure Swift is installed on your machine.\n * 2. Save this code in a file, for example, `WebSocketClient.swift`.\n * 3. Open a terminal, navigate to the directory where you saved the file, and run:\n *      swift WebSocketClient.swift\n * 4. The script connects to the WebSocket server, sends a proposal subscription, and sends a ping every 30 seconds to keep the connection alive.\n */"
        },
        {
          "language": "text",
          "content": "use tokio_tungstenite::connect_async;\nuse tokio_tungstenite::tungstenite::protocol::Message;\nuse futures_util::{SinkExt, StreamExt};\nuse tokio::{time::interval, sync::Mutex, task::spawn};\nuse std::sync::Arc;\nuse serde_json::json;\nuse url::Url;\nuse std::time::Duration;\n\n#[tokio::main]\nasync fn main() {\n    let app_id = app_id;//Replace with your app_id\n    let url = format!(\"wss://ws.derivws.com/websockets/v3?app_id={}\", app_id);\n    let url = Url::parse(&url).expect(\"Invalid URL\");\n\n    // Connect to the WebSocket server and wrap `socket` in Arc<Mutex<_>>\n    let (socket, _) = connect_async(url).await.expect(\"Failed to connect\");\n    let socket = Arc::new(Mutex::new(socket));\n\n    println!(\"[open] Connection established\");\n\n    // Proposal request JSON\n    let proposal_request = json!({\n        \"proposal\": 1,\n        \"subscribe\": 1,\n        \"amount\": 10,\n        \"basis\": \"payout\",\n        \"contract_type\": \"CALL\",\n        \"currency\": \"USD\",\n        \"duration\": 1,\n        \"duration_unit\": \"m\",\n        \"symbol\": \"R_100\",\n        \"barrier\": \"+0.1\"\n    });\n\n    // Clone `socket` for the ping task and start pinging every 30 seconds\n    let ping_socket = Arc::clone(&socket);\n    let ping_task = spawn(async move {\n        let mut interval = interval(Duration::from_secs(30));\n        loop {\n            interval.tick().await;\n            let mut socket = ping_socket.lock().await;\n            if socket.send(Message::Text(json!({ \"ping\": 1 }).to_string())).await.is_ok() {\n                println!(\"[ping] Ping sent to keep connection alive.\");\n            }\n        }\n    });\n\n    // Clone `socket` for sending the proposal\n    let send_socket = Arc::clone(&socket);\n    let send_task = spawn(async move {\n        let mut socket = send_socket.lock().await;\n        if socket.send(Message::Text(proposal_request.to_string())).await.is_ok() {\n            println!(\"Proposal subscription sent.\");\n        }\n    });\n\n    // Task to handle incoming messages\n    let receive_socket = Arc::clone(&socket);\n    let receive_task = spawn(async move {\n        let mut socket = receive_socket.lock().await;\n        while let Some(Ok(msg)) = socket.next().await {\n            match msg {\n                Message::Text(text) => {\n                    let data: serde_json::Value = serde_json::from_str(&text).unwrap_or_else(|_| json!({}));\n                    if let Some(proposal) = data.get(\"proposal\") {\n                        println!(\"Details: {}\", proposal[\"longcode\"]);\n                        println!(\"Ask Price: {}\", proposal[\"display_value\"]);\n                        println!(\"Payout: {}\", proposal[\"payout\"]);\n                        println!(\"Spot: {}\", proposal[\"spot\"]);\n                    } else if data.get(\"msg_type\").unwrap_or(&json!(\"\")) == \"ping\" {\n                        println!(\"[Ping] Ping response received.\");\n                    } else if let Some(error) = data.get(\"error\") {\n                        println!(\"[Error] {}\", error[\"message\"]);\n                    }\n                }\n                _ => {}\n            }\n        }\n    });\n\n    // Await all tasks to complete\n    let _ = tokio::try_join!(ping_task, send_task, receive_task);\n\n    // Close the WebSocket connection\n    let mut socket = socket.lock().await;\n    socket.close(None).await.expect(\"Failed to close connection\");\n    println!(\"[close] Connection closed.\");\n}\n\n/*\nInstructions to run the code:\n\n1. Ensure Rust and Cargo are installed on your machine. You can download them from https://www.rust-lang.org/.\n2. Add the necessary dependencies to `Cargo.toml`:\n\n   [dependencies]\n   tokio = { version = \"1\", features = [\"full\"] }\n   tokio-tungstenite = \"0.16\"\n   futures-util = \"0.3\"\n   serde_json = \"1.0\"\n   url = \"2.2\"\n\n3. Build the project:\n\n   cargo build --release\n\n4. Run the project:\n\n   cargo run --release\n\nNote: Replace `app_id` with your actual app_id if needed.\n*/"
        },
        {
          "language": "text",
          "content": "use tokio_tungstenite::connect_async;\nuse tokio_tungstenite::tungstenite::protocol::Message;\nuse futures_util::{SinkExt, StreamExt};\nuse tokio::{time::interval, sync::Mutex, task::spawn};\nuse std::sync::Arc;\nuse serde_json::json;\nuse url::Url;\nuse std::time::Duration;\n\n#[tokio::main]\nasync fn main() {\n    let app_id = app_id;//Replace with your app_id\n    let url = format!(\"wss://ws.derivws.com/websockets/v3?app_id={}\", app_id);\n    let url = Url::parse(&url).expect(\"Invalid URL\");\n\n    // Connect to the WebSocket server and wrap `socket` in Arc<Mutex<_>>\n    let (socket, _) = connect_async(url).await.expect(\"Failed to connect\");\n    let socket = Arc::new(Mutex::new(socket));\n\n    println!(\"[open] Connection established\");\n\n    // Proposal request JSON\n    let proposal_request = json!({\n        \"proposal\": 1,\n        \"subscribe\": 1,\n        \"amount\": 10,\n        \"basis\": \"payout\",\n        \"contract_type\": \"CALL\",\n        \"currency\": \"USD\",\n        \"duration\": 1,\n        \"duration_unit\": \"m\",\n        \"symbol\": \"R_100\",\n        \"barrier\": \"+0.1\"\n    });\n\n    // Clone `socket` for the ping task and start pinging every 30 seconds\n    let ping_socket = Arc::clone(&socket);\n    let ping_task = spawn(async move {\n        let mut interval = interval(Duration::from_secs(30));\n        loop {\n            interval.tick().await;\n            let mut socket = ping_socket.lock().await;\n            if socket.send(Message::Text(json!({ \"ping\": 1 }).to_string())).await.is_ok() {\n                println!(\"[ping] Ping sent to keep connection alive.\");\n            }\n        }\n    });\n\n    // Clone `socket` for sending the proposal\n    let send_socket = Arc::clone(&socket);\n    let send_task = spawn(async move {\n        let mut socket = send_socket.lock().await;\n        if socket.send(Message::Text(proposal_request.to_string())).await.is_ok() {\n            println!(\"Proposal subscription sent.\");\n        }\n    });\n\n    // Task to handle incoming messages\n    let receive_socket = Arc::clone(&socket);\n    let receive_task = spawn(async move {\n        let mut socket = receive_socket.lock().await;\n        while let Some(Ok(msg)) = socket.next().await {\n            match msg {\n                Message::Text(text) => {\n                    let data: serde_json::Value = serde_json::from_str(&text).unwrap_or_else(|_| json!({}));\n                    if let Some(proposal) = data.get(\"proposal\") {\n                        println!(\"Details: {}\", proposal[\"longcode\"]);\n                        println!(\"Ask Price: {}\", proposal[\"display_value\"]);\n                        println!(\"Payout: {}\", proposal[\"payout\"]);\n                        println!(\"Spot: {}\", proposal[\"spot\"]);\n                    } else if data.get(\"msg_type\").unwrap_or(&json!(\"\")) == \"ping\" {\n                        println!(\"[Ping] Ping response received.\");\n                    } else if let Some(error) = data.get(\"error\") {\n                        println!(\"[Error] {}\", error[\"message\"]);\n                    }\n                }\n                _ => {}\n            }\n        }\n    });\n\n    // Await all tasks to complete\n    let _ = tokio::try_join!(ping_task, send_task, receive_task);\n\n    // Close the WebSocket connection\n    let mut socket = socket.lock().await;\n    socket.close(None).await.expect(\"Failed to close connection\");\n    println!(\"[close] Connection closed.\");\n}\n\n/*\nInstructions to run the code:\n\n1. Ensure Rust and Cargo are installed on your machine. You can download them from https://www.rust-lang.org/.\n2. Add the necessary dependencies to `Cargo.toml`:\n\n   [dependencies]\n   tokio = { version = \"1\", features = [\"full\"] }\n   tokio-tungstenite = \"0.16\"\n   futures-util = \"0.3\"\n   serde_json = \"1.0\"\n   url = \"2.2\"\n\n3. Build the project:\n\n   cargo build --release\n\n4. Run the project:\n\n   cargo run --release\n\nNote: Replace `app_id` with your actual app_id if needed.\n*/"
        },
        {
          "language": "text",
          "content": "<?php\n\nrequire 'vendor/autoload.php';\n\nuse WebSocket\\Client;\n\n// Replace with your app_id\n$app_id = app_id;\n$uri = \"wss://ws.derivws.com/websockets/v3?app_id=$app_id\";\n\n// Create a new WebSocket client\n$client = new Client($uri);\n\ntry {\n    echo \"[open] WebSocket connection established.\\n\";\n\n    // Send a proposal subscription request\n    $proposal_request = json_encode([\n        \"proposal\" => 1,\n        \"subscribe\" => 1,\n        \"amount\" => 10,\n        \"basis\" => \"payout\",\n        \"contract_type\" => \"CALL\",\n        \"currency\" => \"USD\",\n        \"duration\" => 1,\n        \"duration_unit\" => \"m\",\n        \"symbol\" => \"R_100\",\n        \"barrier\" => \"+0.1\"\n    ]);\n    $client->send($proposal_request);\n    echo \"[sent] Proposal subscription sent.\\n\";\n\n    // Ping function to keep connection alive\n    $ping_interval = 30; // in seconds\n    $last_ping_time = time();\n\n    // Main loop to handle responses and send ping messages\n    while (true) {\n        // Check if it's time to send a ping\n        if (time() - $last_ping_time >= $ping_interval) {\n            $client->send(json_encode([\"ping\" => 1]));\n            echo \"[ping] Ping sent to keep connection alive.\\n\";\n            $last_ping_time = time();\n        }\n\n        // Receive response from WebSocket\n        $response = $client->receive();\n        $data = json_decode($response, true);\n\n        if (isset($data[\"error\"])) {\n            echo \"[error] \" . $data[\"error\"][\"message\"] . \"\\n\";\n            break;\n        } elseif ($data[\"msg_type\"] === \"proposal\") {\n            $proposal = $data[\"proposal\"];\n            echo \"[proposal] Details: {$proposal['longcode']}\\n\";\n            echo \"[proposal] Ask Price: {$proposal['display_value']}\\n\";\n            echo \"[proposal] Payout: {$proposal['payout']}\\n\";\n            echo \"[proposal] Spot: {$proposal['spot']}\\n\";\n        } elseif ($data[\"msg_type\"] === \"ping\") {\n            echo \"[ping] Ping response received.\\n\";\n        }\n\n        // Sleep briefly to prevent continuous loop\n        usleep(500000); // 500ms\n    }\n\n    // Close the WebSocket connection\n    $client->close();\n    echo \"[close] WebSocket connection closed.\\n\";\n\n} catch (Exception $e) {\n    echo \"[error] \" . $e->getMessage() . \"\\n\";\n}\n\n/*\nInstructions to run the code:\n\n1. Ensure PHP is installed on your machine. You can download it from https://www.php.net/.\n2. Install Composer if you haven't already, by downloading it from https://getcomposer.org/.\n3. Create a `composer.json` file in the same directory as your PHP script with the following content:\n\n   {\n     \"require\": {\n       \"textalk/websocket\": \"^1.5\"\n     }\n   }\n\n4. Run the following command to install the WebSocket library:\n\n   composer install\n\n5. Save the code above to a PHP file, e.g., `websocket_client.php`.\n6. Run the code from the command line:\n\n   php websocket_client.php\n\nNote: Replace `app_id` with your actual app_id if needed.\n*/"
        },
        {
          "language": "text",
          "content": "<?php\n\nrequire 'vendor/autoload.php';\n\nuse WebSocket\\Client;\n\n// Replace with your app_id\n$app_id = app_id;\n$uri = \"wss://ws.derivws.com/websockets/v3?app_id=$app_id\";\n\n// Create a new WebSocket client\n$client = new Client($uri);\n\ntry {\n    echo \"[open] WebSocket connection established.\\n\";\n\n    // Send a proposal subscription request\n    $proposal_request = json_encode([\n        \"proposal\" => 1,\n        \"subscribe\" => 1,\n        \"amount\" => 10,\n        \"basis\" => \"payout\",\n        \"contract_type\" => \"CALL\",\n        \"currency\" => \"USD\",\n        \"duration\" => 1,\n        \"duration_unit\" => \"m\",\n        \"symbol\" => \"R_100\",\n        \"barrier\" => \"+0.1\"\n    ]);\n    $client->send($proposal_request);\n    echo \"[sent] Proposal subscription sent.\\n\";\n\n    // Ping function to keep connection alive\n    $ping_interval = 30; // in seconds\n    $last_ping_time = time();\n\n    // Main loop to handle responses and send ping messages\n    while (true) {\n        // Check if it's time to send a ping\n        if (time() - $last_ping_time >= $ping_interval) {\n            $client->send(json_encode([\"ping\" => 1]));\n            echo \"[ping] Ping sent to keep connection alive.\\n\";\n            $last_ping_time = time();\n        }\n\n        // Receive response from WebSocket\n        $response = $client->receive();\n        $data = json_decode($response, true);\n\n        if (isset($data[\"error\"])) {\n            echo \"[error] \" . $data[\"error\"][\"message\"] . \"\\n\";\n            break;\n        } elseif ($data[\"msg_type\"] === \"proposal\") {\n            $proposal = $data[\"proposal\"];\n            echo \"[proposal] Details: {$proposal['longcode']}\\n\";\n            echo \"[proposal] Ask Price: {$proposal['display_value']}\\n\";\n            echo \"[proposal] Payout: {$proposal['payout']}\\n\";\n            echo \"[proposal] Spot: {$proposal['spot']}\\n\";\n        } elseif ($data[\"msg_type\"] === \"ping\") {\n            echo \"[ping] Ping response received.\\n\";\n        }\n\n        // Sleep briefly to prevent continuous loop\n        usleep(500000); // 500ms\n    }\n\n    // Close the WebSocket connection\n    $client->close();\n    echo \"[close] WebSocket connection closed.\\n\";\n\n} catch (Exception $e) {\n    echo \"[error] \" . $e->getMessage() . \"\\n\";\n}\n\n/*\nInstructions to run the code:\n\n1. Ensure PHP is installed on your machine. You can download it from https://www.php.net/.\n2. Install Composer if you haven't already, by downloading it from https://getcomposer.org/.\n3. Create a `composer.json` file in the same directory as your PHP script with the following content:\n\n   {\n     \"require\": {\n       \"textalk/websocket\": \"^1.5\"\n     }\n   }\n\n4. Run the following command to install the WebSocket library:\n\n   composer install\n\n5. Save the code above to a PHP file, e.g., `websocket_client.php`.\n6. Run the code from the command line:\n\n   php websocket_client.php\n\nNote: Replace `app_id` with your actual app_id if needed.\n*/"
        },
        {
          "language": "text",
          "content": "package main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"log\"\n\t\"time\"\n\n\t\"nhooyr.io/websocket\"\n\t\"nhooyr.io/websocket/wsjson\"\n)\n\n// Define constants\nconst (\n\twebSocketURL = \"wss://ws.derivws.com/websockets/v3?app_id=app_id\"//Replace with your app_id\n)\n\n// ProposalRequest defines the structure of the proposal subscription request\ntype ProposalRequest struct {\n\tProposal      int    `json:\"proposal\"`\n\tSubscribe     int    `json:\"subscribe\"`\n\tAmount        int    `json:\"amount\"`\n\tBasis         string `json:\"basis\"`\n\tContractType  string `json:\"contract_type\"`\n\tCurrency      string `json:\"currency\"`\n\tDuration      int    `json:\"duration\"`\n\tDurationUnit  string `json:\"duration_unit\"`\n\tSymbol        string `json:\"symbol\"`\n\tBarrier       string `json:\"barrier\"`\n}\n\nfunc main() {\n\t// Set up WebSocket connection context\n\tctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)\n\tdefer cancel()\n\n\t// Establish a WebSocket connection\n\tconn, _, err := websocket.Dial(ctx, webSocketURL, nil)\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to connect to WebSocket: %v\", err)\n\t}\n\tdefer conn.Close(websocket.StatusNormalClosure, \"normal closure\")\n\tfmt.Println(\"WebSocket connection established.\")\n\n\t// Send initial proposal subscription request\n\terr = sendProposalRequest(ctx, conn)\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to send proposal request: %v\", err)\n\t}\n\n\t// Start keep-alive ping\n\tgo keepAlivePing(ctx, conn)\n\n\t// Handle incoming messages\n\thandleResponses(ctx, conn)\n}\n\n// sendProposalRequest sends a proposal subscription request to the WebSocket server\nfunc sendProposalRequest(ctx context.Context, conn *websocket.Conn) error {\n\t// Construct proposal subscription request\n\tproposal := ProposalRequest{\n\t\tProposal:     1,\n\t\tSubscribe:    1,\n\t\tAmount:       10,\n\t\tBasis:        \"payout\",\n\t\tContractType: \"CALL\",\n\t\tCurrency:     \"USD\",\n\t\tDuration:     1,\n\t\tDurationUnit: \"m\",\n\t\tSymbol:       \"R_100\",\n\t\tBarrier:      \"+0.1\",\n\t}\n\tfmt.Println(\"Sending proposal subscription...\")\n\n\treturn wsjson.Write(ctx, conn, proposal)\n}\n\n// keepAlivePing sends a ping message every 30 seconds to keep the connection alive\nfunc keepAlivePing(ctx context.Context, conn *websocket.Conn) {\n\tticker := time.NewTicker(30 * time.Second)\n\tdefer ticker.Stop()\n\n\tfor {\n\t\tselect {\n\t\tcase <-ticker.C:\n\t\t\t// Send ping message\n\t\t\tpingMsg := map[string]int{\"ping\": 1}\n\t\t\terr := wsjson.Write(ctx, conn, pingMsg)\n\t\t\tif err != nil {\n\t\t\t\tlog.Printf(\"Ping failed: %v\", err)\n\t\t\t\treturn\n\t\t\t}\n\t\t\tfmt.Println(\"Ping sent.\")\n\t\tcase <-ctx.Done():\n\t\t\treturn\n\t\t}\n\t}\n}\n\n// handleResponses listens for and processes messages received from the WebSocket server\nfunc handleResponses(ctx context.Context, conn *websocket.Conn) {\n\tfor {\n\t\tvar response map[string]interface{}\n\t\terr := wsjson.Read(ctx, conn, &response)\n\t\tif err != nil {\n\t\t\tlog.Fatalf(\"Error reading message: %v\", err)\n\t\t}\n\n\t\t// Process response messages\n\t\tmsgType := response[\"msg_type\"]\n\t\tswitch msgType {\n\t\tcase \"proposal\":\n\t\t\t// Print proposal details\n\t\t\tproposal := response[\"proposal\"].(map[string]interface{})\n\t\t\tfmt.Printf(\"Details: %v\\n\", proposal[\"longcode\"])\n\t\t\tfmt.Printf(\"Ask Price: %v\\n\", proposal[\"display_value\"])\n\t\t\tfmt.Printf(\"Payout: %v\\n\", proposal[\"payout\"])\n\t\t\tfmt.Printf(\"Spot: %v\\n\", proposal[\"spot\"])\n\t\tcase \"ping\":\n\t\t\tfmt.Println(\"[Ping] Ping response received.\")\n\t\tdefault:\n\t\t\tfmt.Printf(\"Received message: %v\\n\", response)\n\t\t}\n\t}\n}\n\n/*\nInstructions to run the code locally:\n\n1. Install Go: Ensure you have Go installed on your machine. You can download it from https://golang.org/dl/.\n\n2. Save the code:\n   - Save this code into a file named `connect.go`.\n\n3. Initialize a Go module:\n   - Open a terminal in the directory containing `connect.go`.\n   - Run `go mod init app` to initialize a new Go module.\n   - Run `go get nhooyr.io/websocket` to install the WebSocket package dependency.\n\n4. Run the code:\n   - Execute the code using the command `go run connect.go`.\n   - Alternatively, you can build and run the executable:\n     ```\n     go build -o connect connect.go\n     ./connect\n     ```\n5. Replace `app_id=1089` with your actual app_id if needed.\n*/"
        },
        {
          "language": "text",
          "content": "package main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"log\"\n\t\"time\"\n\n\t\"nhooyr.io/websocket\"\n\t\"nhooyr.io/websocket/wsjson\"\n)\n\n// Define constants\nconst (\n\twebSocketURL = \"wss://ws.derivws.com/websockets/v3?app_id=app_id\"//Replace with your app_id\n)\n\n// ProposalRequest defines the structure of the proposal subscription request\ntype ProposalRequest struct {\n\tProposal      int    `json:\"proposal\"`\n\tSubscribe     int    `json:\"subscribe\"`\n\tAmount        int    `json:\"amount\"`\n\tBasis         string `json:\"basis\"`\n\tContractType  string `json:\"contract_type\"`\n\tCurrency      string `json:\"currency\"`\n\tDuration      int    `json:\"duration\"`\n\tDurationUnit  string `json:\"duration_unit\"`\n\tSymbol        string `json:\"symbol\"`\n\tBarrier       string `json:\"barrier\"`\n}\n\nfunc main() {\n\t// Set up WebSocket connection context\n\tctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)\n\tdefer cancel()\n\n\t// Establish a WebSocket connection\n\tconn, _, err := websocket.Dial(ctx, webSocketURL, nil)\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to connect to WebSocket: %v\", err)\n\t}\n\tdefer conn.Close(websocket.StatusNormalClosure, \"normal closure\")\n\tfmt.Println(\"WebSocket connection established.\")\n\n\t// Send initial proposal subscription request\n\terr = sendProposalRequest(ctx, conn)\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to send proposal request: %v\", err)\n\t}\n\n\t// Start keep-alive ping\n\tgo keepAlivePing(ctx, conn)\n\n\t// Handle incoming messages\n\thandleResponses(ctx, conn)\n}\n\n// sendProposalRequest sends a proposal subscription request to the WebSocket server\nfunc sendProposalRequest(ctx context.Context, conn *websocket.Conn) error {\n\t// Construct proposal subscription request\n\tproposal := ProposalRequest{\n\t\tProposal:     1,\n\t\tSubscribe:    1,\n\t\tAmount:       10,\n\t\tBasis:        \"payout\",\n\t\tContractType: \"CALL\",\n\t\tCurrency:     \"USD\",\n\t\tDuration:     1,\n\t\tDurationUnit: \"m\",\n\t\tSymbol:       \"R_100\",\n\t\tBarrier:      \"+0.1\",\n\t}\n\tfmt.Println(\"Sending proposal subscription...\")\n\n\treturn wsjson.Write(ctx, conn, proposal)\n}\n\n// keepAlivePing sends a ping message every 30 seconds to keep the connection alive\nfunc keepAlivePing(ctx context.Context, conn *websocket.Conn) {\n\tticker := time.NewTicker(30 * time.Second)\n\tdefer ticker.Stop()\n\n\tfor {\n\t\tselect {\n\t\tcase <-ticker.C:\n\t\t\t// Send ping message\n\t\t\tpingMsg := map[string]int{\"ping\": 1}\n\t\t\terr := wsjson.Write(ctx, conn, pingMsg)\n\t\t\tif err != nil {\n\t\t\t\tlog.Printf(\"Ping failed: %v\", err)\n\t\t\t\treturn\n\t\t\t}\n\t\t\tfmt.Println(\"Ping sent.\")\n\t\tcase <-ctx.Done():\n\t\t\treturn\n\t\t}\n\t}\n}\n\n// handleResponses listens for and processes messages received from the WebSocket server\nfunc handleResponses(ctx context.Context, conn *websocket.Conn) {\n\tfor {\n\t\tvar response map[string]interface{}\n\t\terr := wsjson.Read(ctx, conn, &response)\n\t\tif err != nil {\n\t\t\tlog.Fatalf(\"Error reading message: %v\", err)\n\t\t}\n\n\t\t// Process response messages\n\t\tmsgType := response[\"msg_type\"]\n\t\tswitch msgType {\n\t\tcase \"proposal\":\n\t\t\t// Print proposal details\n\t\t\tproposal := response[\"proposal\"].(map[string]interface{})\n\t\t\tfmt.Printf(\"Details: %v\\n\", proposal[\"longcode\"])\n\t\t\tfmt.Printf(\"Ask Price: %v\\n\", proposal[\"display_value\"])\n\t\t\tfmt.Printf(\"Payout: %v\\n\", proposal[\"payout\"])\n\t\t\tfmt.Printf(\"Spot: %v\\n\", proposal[\"spot\"])\n\t\tcase \"ping\":\n\t\t\tfmt.Println(\"[Ping] Ping response received.\")\n\t\tdefault:\n\t\t\tfmt.Printf(\"Received message: %v\\n\", response)\n\t\t}\n\t}\n}\n\n/*\nInstructions to run the code locally:\n\n1. Install Go: Ensure you have Go installed on your machine. You can download it from https://golang.org/dl/.\n\n2. Save the code:\n   - Save this code into a file named `connect.go`.\n\n3. Initialize a Go module:\n   - Open a terminal in the directory containing `connect.go`.\n   - Run `go mod init app` to initialize a new Go module.\n   - Run `go get nhooyr.io/websocket` to install the WebSocket package dependency.\n\n4. Run the code:\n   - Execute the code using the command `go run connect.go`.\n   - Alternatively, you can build and run the executable:\n     ```\n     go build -o connect connect.go\n     ./connect\n     ```\n5. Replace `app_id=1089` with your actual app_id if needed.\n*/"
        },
        {
          "language": "text",
          "content": "using System;\nusing System.Net.WebSockets;\nusing System.Text;\nusing System.Text.Json;\nusing System.Threading;\nusing System.Threading.Tasks;\n\nclass WebSocketExample\n{\n    private static readonly Uri uri = new Uri(\"wss://ws.derivws.com/websockets/v3?app_id=app_id\"); // Replace with your app_id if needed\n    private static readonly int pingInterval = 30000; // Ping every 30 seconds\n\n    public static async Task Main(string[] args)\n    {\n        using (ClientWebSocket webSocket = new ClientWebSocket())\n        {\n            Console.WriteLine(\"Attempting to connect to WebSocket...\");\n\n            await webSocket.ConnectAsync(uri, CancellationToken.None);\n            Console.WriteLine(\"WebSocket connection established.\");\n\n            // Send initial proposal subscription request\n            await SendProposalSubscription(webSocket);\n\n            // Start a task to send pings to keep connection alive\n            Task keepAlivePingTask = KeepAlivePing(webSocket);\n\n            // Handle responses from the server\n            await HandleResponses(webSocket);\n\n            // Ensure the keep-alive ping task finishes\n            await keepAlivePingTask;\n        }\n    }\n\n    private static async Task SendProposalSubscription(ClientWebSocket webSocket)\n    {\n        var proposalRequest = new\n        {\n            proposal = 1,\n            subscribe = 1,\n            amount = 10,\n            basis = \"payout\",\n            contract_type = \"CALL\",\n            currency = \"USD\",\n            duration = 1,\n            duration_unit = \"m\",\n            symbol = \"R_100\",\n            barrier = \"+0.1\"\n        };\n\n        string requestJson = JsonSerializer.Serialize(proposalRequest);\n        var bytes = Encoding.UTF8.GetBytes(requestJson);\n        await webSocket.SendAsync(new ArraySegment<byte>(bytes), WebSocketMessageType.Text, true, CancellationToken.None);\n        Console.WriteLine(\"Proposal subscription sent.\");\n    }\n\n    private static async Task KeepAlivePing(ClientWebSocket webSocket)\n    {\n        while (webSocket.State == WebSocketState.Open)\n        {\n            await Task.Delay(pingInterval);\n\n            var pingRequest = new { ping = 1 };\n            string pingJson = JsonSerializer.Serialize(pingRequest);\n            var pingBytes = Encoding.UTF8.GetBytes(pingJson);\n            await webSocket.SendAsync(new ArraySegment<byte>(pingBytes), WebSocketMessageType.Text, true, CancellationToken.None);\n            Console.WriteLine(\"Ping sent to keep connection alive.\");\n        }\n    }\n\nprivate static async Task HandleResponses(ClientWebSocket webSocket)\n{\n    var buffer = new byte[1024 * 4];\n\n    while (webSocket.State == WebSocketState.Open)\n    {\n        var result = await webSocket.ReceiveAsync(new ArraySegment<byte>(buffer), CancellationToken.None);\n\n        if (result.MessageType == WebSocketMessageType.Close)\n        {\n            Console.WriteLine(\"WebSocket connection closed by server.\");\n            await webSocket.CloseAsync(WebSocketCloseStatus.NormalClosure, \"Closing\", CancellationToken.None);\n        }\n        else\n        {\n            string response = Encoding.UTF8.GetString(buffer, 0, result.Count);\n            var data = JsonSerializer.Deserialize<JsonElement>(response);\n\n            if (data.TryGetProperty(\"error\", out var error))\n            {\n                Console.WriteLine($\"[Error] {error.GetProperty(\"message\").GetString()}\");\n                await webSocket.CloseAsync(WebSocketCloseStatus.NormalClosure, \"Closing due to error\", CancellationToken.None);\n                break;\n            }\n\n            if (data.TryGetProperty(\"msg_type\", out var msgType))\n            {\n                if (msgType.GetString() == \"proposal\")\n                {\n                    var proposal = data.GetProperty(\"proposal\");\n\n                    // Extract proposal details with type-checking\n                    string longcode = proposal.GetProperty(\"longcode\").GetString();\n                    Console.WriteLine($\"Details: {longcode}\");\n\n                    string displayValue = proposal.GetProperty(\"display_value\").GetRawText();\n                    Console.WriteLine($\"Ask Price: {displayValue}\");\n\n                    string payout = proposal.GetProperty(\"payout\").GetRawText();\n                    Console.WriteLine($\"Payout: {payout}\");\n\n                    string spot = proposal.GetProperty(\"spot\").GetRawText();\n                    Console.WriteLine($\"Spot: {spot}\");\n                }\n                else if (msgType.GetString() == \"ping\")\n                {\n                    Console.WriteLine(\"[Ping] Ping response received.\");\n                }\n            }\n        }\n    }\n}\n}\n\n/*\nInstructions to run the code locally:\n\n1. Ensure you have .NET SDK installed. You can download it from https://dotnet.microsoft.com/download.\n\n2. Save the code to a file named `WebSocketExample.cs`.\n\n3. Open a terminal in the directory containing `WebSocketExample.cs`.\n\n4. If using the .NET CLI, you can run the code with:\n   - `dotnet new console -o WebSocketExample` (if creating a new project)\n   - Move `WebSocketExample.cs` into the project directory `WebSocketExample`.\n   - Navigate to the project directory: `cd WebSocketExample`.\n   - Run `dotnet add package System.Net.WebSockets.Client` to add the WebSocket client dependency.\n   - Run the code: `dotnet run`.\n\n5. Alternatively, you can use an IDE like Visual Studio to create a console application, add the `System.Net.WebSockets.Client` package, and then run the application.\n\n6. Replace `app_id=1089` in the URL with your actual app_id if needed.\n*/"
        },
        {
          "language": "text",
          "content": "using System;\nusing System.Net.WebSockets;\nusing System.Text;\nusing System.Text.Json;\nusing System.Threading;\nusing System.Threading.Tasks;\n\nclass WebSocketExample\n{\n    private static readonly Uri uri = new Uri(\"wss://ws.derivws.com/websockets/v3?app_id=app_id\"); // Replace with your app_id if needed\n    private static readonly int pingInterval = 30000; // Ping every 30 seconds\n\n    public static async Task Main(string[] args)\n    {\n        using (ClientWebSocket webSocket = new ClientWebSocket())\n        {\n            Console.WriteLine(\"Attempting to connect to WebSocket...\");\n\n            await webSocket.ConnectAsync(uri, CancellationToken.None);\n            Console.WriteLine(\"WebSocket connection established.\");\n\n            // Send initial proposal subscription request\n            await SendProposalSubscription(webSocket);\n\n            // Start a task to send pings to keep connection alive\n            Task keepAlivePingTask = KeepAlivePing(webSocket);\n\n            // Handle responses from the server\n            await HandleResponses(webSocket);\n\n            // Ensure the keep-alive ping task finishes\n            await keepAlivePingTask;\n        }\n    }\n\n    private static async Task SendProposalSubscription(ClientWebSocket webSocket)\n    {\n        var proposalRequest = new\n        {\n            proposal = 1,\n            subscribe = 1,\n            amount = 10,\n            basis = \"payout\",\n            contract_type = \"CALL\",\n            currency = \"USD\",\n            duration = 1,\n            duration_unit = \"m\",\n            symbol = \"R_100\",\n            barrier = \"+0.1\"\n        };\n\n        string requestJson = JsonSerializer.Serialize(proposalRequest);\n        var bytes = Encoding.UTF8.GetBytes(requestJson);\n        await webSocket.SendAsync(new ArraySegment<byte>(bytes), WebSocketMessageType.Text, true, CancellationToken.None);\n        Console.WriteLine(\"Proposal subscription sent.\");\n    }\n\n    private static async Task KeepAlivePing(ClientWebSocket webSocket)\n    {\n        while (webSocket.State == WebSocketState.Open)\n        {\n            await Task.Delay(pingInterval);\n\n            var pingRequest = new { ping = 1 };\n            string pingJson = JsonSerializer.Serialize(pingRequest);\n            var pingBytes = Encoding.UTF8.GetBytes(pingJson);\n            await webSocket.SendAsync(new ArraySegment<byte>(pingBytes), WebSocketMessageType.Text, true, CancellationToken.None);\n            Console.WriteLine(\"Ping sent to keep connection alive.\");\n        }\n    }\n\nprivate static async Task HandleResponses(ClientWebSocket webSocket)\n{\n    var buffer = new byte[1024 * 4];\n\n    while (webSocket.State == WebSocketState.Open)\n    {\n        var result = await webSocket.ReceiveAsync(new ArraySegment<byte>(buffer), CancellationToken.None);\n\n        if (result.MessageType == WebSocketMessageType.Close)\n        {\n            Console.WriteLine(\"WebSocket connection closed by server.\");\n            await webSocket.CloseAsync(WebSocketCloseStatus.NormalClosure, \"Closing\", CancellationToken.None);\n        }\n        else\n        {\n            string response = Encoding.UTF8.GetString(buffer, 0, result.Count);\n            var data = JsonSerializer.Deserialize<JsonElement>(response);\n\n            if (data.TryGetProperty(\"error\", out var error))\n            {\n                Console.WriteLine($\"[Error] {error.GetProperty(\"message\").GetString()}\");\n                await webSocket.CloseAsync(WebSocketCloseStatus.NormalClosure, \"Closing due to error\", CancellationToken.None);\n                break;\n            }\n\n            if (data.TryGetProperty(\"msg_type\", out var msgType))\n            {\n                if (msgType.GetString() == \"proposal\")\n                {\n                    var proposal = data.GetProperty(\"proposal\");\n\n                    // Extract proposal details with type-checking\n                    string longcode = proposal.GetProperty(\"longcode\").GetString();\n                    Console.WriteLine($\"Details: {longcode}\");\n\n                    string displayValue = proposal.GetProperty(\"display_value\").GetRawText();\n                    Console.WriteLine($\"Ask Price: {displayValue}\");\n\n                    string payout = proposal.GetProperty(\"payout\").GetRawText();\n                    Console.WriteLine($\"Payout: {payout}\");\n\n                    string spot = proposal.GetProperty(\"spot\").GetRawText();\n                    Console.WriteLine($\"Spot: {spot}\");\n                }\n                else if (msgType.GetString() == \"ping\")\n                {\n                    Console.WriteLine(\"[Ping] Ping response received.\");\n                }\n            }\n        }\n    }\n}\n}\n\n/*\nInstructions to run the code locally:\n\n1. Ensure you have .NET SDK installed. You can download it from https://dotnet.microsoft.com/download.\n\n2. Save the code to a file named `WebSocketExample.cs`.\n\n3. Open a terminal in the directory containing `WebSocketExample.cs`.\n\n4. If using the .NET CLI, you can run the code with:\n   - `dotnet new console -o WebSocketExample` (if creating a new project)\n   - Move `WebSocketExample.cs` into the project directory `WebSocketExample`.\n   - Navigate to the project directory: `cd WebSocketExample`.\n   - Run `dotnet add package System.Net.WebSockets.Client` to add the WebSocket client dependency.\n   - Run the code: `dotnet run`.\n\n5. Alternatively, you can use an IDE like Visual Studio to create a console application, add the `System.Net.WebSockets.Client` package, and then run the application.\n\n6. Replace `app_id=1089` in the URL with your actual app_id if needed.\n*/"
        },
        {
          "language": "text",
          "content": "#include <libwebsockets.h>\n#include <string.h>\n#include <signal.h>\n#include <time.h>\n\n// Set up WebSocket context and connection details\nstatic struct lws_context *context;\nstatic int interrupted = 0, port = 443, ssl_connection = LCCSCF_USE_SSL;\nstatic const char *server_address = \"ws.derivws.com\";\nstatic const char *path = \"/websockets/v3?app_id=app_id\";//replace with your app_id\nstatic const char *pro = \"lws-minimal-client\";\n\n// Interval for the ping in seconds\nstatic const int ping_interval = 30;\nstatic time_t last_ping_time = 0;\n\n// Signal handler for graceful shutdown\nstatic void sigint_handler(int sig) {\n    interrupted = 1;\n}\n\n// Function to send a ping message\nvoid send_ping(struct lws *wsi) {\n    const char *ping_msg = \"{\\\"ping\\\": 1}\";\n    unsigned char buf[LWS_PRE + 20];\n    memcpy(&buf[LWS_PRE], ping_msg, strlen(ping_msg));\n    lws_write(wsi, &buf[LWS_PRE], strlen(ping_msg), LWS_WRITE_TEXT);\n    lwsl_user(\"Ping sent\\n\");\n}\n\n// Function to send a proposal subscription message\nvoid send_proposal(struct lws *wsi) {\n    const char *proposal_msg = \"{\\\"proposal\\\": 1, \\\"subscribe\\\": 1, \\\"amount\\\": 10, \\\"basis\\\": \\\"payout\\\", \\\"contract_type\\\": \\\"CALL\\\", \\\"currency\\\": \\\"USD\\\", \\\"duration\\\": 1, \\\"duration_unit\\\": \\\"m\\\", \\\"symbol\\\": \\\"R_100\\\", \\\"barrier\\\": \\\"+0.1\\\"}\";\n    unsigned char buf[LWS_PRE + 256];\n    memcpy(&buf[LWS_PRE], proposal_msg, strlen(proposal_msg));\n    lws_write(wsi, &buf[LWS_PRE], strlen(proposal_msg), LWS_WRITE_TEXT);\n    lwsl_user(\"Proposal subscription sent\\n\");\n}\n\n// Callback function for WebSocket events\nstatic int callback_minimal(struct lws *wsi, enum lws_callback_reasons reason,\n                            void *user, void *in, size_t len) {\n    switch (reason) {\n    case LWS_CALLBACK_CLIENT_CONNECTION_ERROR:\n        lwsl_err(\"CLIENT_CONNECTION_ERROR: %s\\n\", in ? (char *)in : \"(null)\");\n        interrupted = 1;\n        break;\n\n    case LWS_CALLBACK_CLIENT_ESTABLISHED:\n        lwsl_user(\"Connection established\\n\");\n        send_proposal(wsi);  // Send proposal on connection\n        lws_callback_on_writable(wsi); // Request writable callback\n        break;\n\n    case LWS_CALLBACK_CLIENT_WRITEABLE:\n        if (time(NULL) - last_ping_time >= ping_interval) {\n            send_ping(wsi);  // Send periodic ping\n            last_ping_time = time(NULL);\n        }\n        break;\n\n    case LWS_CALLBACK_CLIENT_RECEIVE:\n        lwsl_hexdump_notice(in, len); // Log received message\n        break;\n\n    case LWS_CALLBACK_CLIENT_CLOSED:\n        lwsl_user(\"Connection closed\\n\");\n        interrupted = 1;\n        break;\n\n    default:\n        break;\n    }\n\n    return 0;\n}\n\n// Define supported protocols for the WebSocket\nstatic const struct lws_protocols protocols[] = {\n    { \"lws-minimal-client\", callback_minimal, 0, 0, 0, NULL, 0 },\n    LWS_PROTOCOL_LIST_TERM\n};\n\n// Main function to set up and manage the WebSocket client\nint main(int argc, const char **argv) {\n    struct lws_context_creation_info info;\n    struct lws_client_connect_info i;\n\n    // Handle Ctrl+C interrupt for graceful shutdown\n    signal(SIGINT, sigint_handler);\n    memset(&info, 0, sizeof info);\n    memset(&i, 0, sizeof(i));\n\n    lwsl_user(\"LWS Deriv ws client\\n\");\n\n    info.options = LWS_SERVER_OPTION_DO_SSL_GLOBAL_INIT;\n    info.port = CONTEXT_PORT_NO_LISTEN;\n    info.protocols = protocols;\n    info.fd_limit_per_thread = 1 + 1 + 1;\n\n    context = lws_create_context(&info);\n    if (!context) {\n        lwsl_err(\"lws init failed\\n\");\n        return 1;\n    }\n\n    i.context = context;\n    i.port = port;\n    i.address = server_address;\n    i.path = path;\n    i.host = i.address;\n    i.origin = i.address;\n    i.ssl_connection = ssl_connection;\n    i.protocol = pro;\n    i.local_protocol_name = \"lws-minimal-client\";\n\n    if (!lws_client_connect_via_info(&i)) {\n        lwsl_err(\"Failed to initiate connection\\n\");\n        return 1;\n    }\n\n    // Run the WebSocket client event loop\n    while (!interrupted)\n        lws_service(context, 0);\n\n    lws_context_destroy(context);\n    lwsl_user(\"Completed\\n\");\n\n    return 0;\n}\n\n/*\n * Instructions:\n * 1. Install the libwebsockets library on your system if it's not already installed.\n *    - On Ubuntu, you can install it by running:\n *        sudo apt-get install libwebsockets-dev\n *    - On macOS, you can use Homebrew:\n *        brew install libwebsockets\n *    - For other operating systems, refer to the libwebsockets documentation for installation details.\n * 2. Compile the code using the following command:\n *      gcc -o connect connect.c -lwebsockets -lssl -lcrypto -lm\n *    - This command links the required libraries: `libwebsockets`, `ssl`, `crypto`, and `m`.\n * 3. Run the compiled executable:\n *      ./connect\n * 4. Ensure you have internet connectivity as the WebSocket will attempt to connect to `ws.derivws.com`.\n * 5. Replace \"app_id=1089\" in the `path` variable with your actual app_id if required.\n */"
        },
        {
          "language": "text",
          "content": "#include <libwebsockets.h>\n#include <string.h>\n#include <signal.h>\n#include <time.h>\n\n// Set up WebSocket context and connection details\nstatic struct lws_context *context;\nstatic int interrupted = 0, port = 443, ssl_connection = LCCSCF_USE_SSL;\nstatic const char *server_address = \"ws.derivws.com\";\nstatic const char *path = \"/websockets/v3?app_id=app_id\";//replace with your app_id\nstatic const char *pro = \"lws-minimal-client\";\n\n// Interval for the ping in seconds\nstatic const int ping_interval = 30;\nstatic time_t last_ping_time = 0;\n\n// Signal handler for graceful shutdown\nstatic void sigint_handler(int sig) {\n    interrupted = 1;\n}\n\n// Function to send a ping message\nvoid send_ping(struct lws *wsi) {\n    const char *ping_msg = \"{\\\"ping\\\": 1}\";\n    unsigned char buf[LWS_PRE + 20];\n    memcpy(&buf[LWS_PRE], ping_msg, strlen(ping_msg));\n    lws_write(wsi, &buf[LWS_PRE], strlen(ping_msg), LWS_WRITE_TEXT);\n    lwsl_user(\"Ping sent\\n\");\n}\n\n// Function to send a proposal subscription message\nvoid send_proposal(struct lws *wsi) {\n    const char *proposal_msg = \"{\\\"proposal\\\": 1, \\\"subscribe\\\": 1, \\\"amount\\\": 10, \\\"basis\\\": \\\"payout\\\", \\\"contract_type\\\": \\\"CALL\\\", \\\"currency\\\": \\\"USD\\\", \\\"duration\\\": 1, \\\"duration_unit\\\": \\\"m\\\", \\\"symbol\\\": \\\"R_100\\\", \\\"barrier\\\": \\\"+0.1\\\"}\";\n    unsigned char buf[LWS_PRE + 256];\n    memcpy(&buf[LWS_PRE], proposal_msg, strlen(proposal_msg));\n    lws_write(wsi, &buf[LWS_PRE], strlen(proposal_msg), LWS_WRITE_TEXT);\n    lwsl_user(\"Proposal subscription sent\\n\");\n}\n\n// Callback function for WebSocket events\nstatic int callback_minimal(struct lws *wsi, enum lws_callback_reasons reason,\n                            void *user, void *in, size_t len) {\n    switch (reason) {\n    case LWS_CALLBACK_CLIENT_CONNECTION_ERROR:\n        lwsl_err(\"CLIENT_CONNECTION_ERROR: %s\\n\", in ? (char *)in : \"(null)\");\n        interrupted = 1;\n        break;\n\n    case LWS_CALLBACK_CLIENT_ESTABLISHED:\n        lwsl_user(\"Connection established\\n\");\n        send_proposal(wsi);  // Send proposal on connection\n        lws_callback_on_writable(wsi); // Request writable callback\n        break;\n\n    case LWS_CALLBACK_CLIENT_WRITEABLE:\n        if (time(NULL) - last_ping_time >= ping_interval) {\n            send_ping(wsi);  // Send periodic ping\n            last_ping_time = time(NULL);\n        }\n        break;\n\n    case LWS_CALLBACK_CLIENT_RECEIVE:\n        lwsl_hexdump_notice(in, len); // Log received message\n        break;\n\n    case LWS_CALLBACK_CLIENT_CLOSED:\n        lwsl_user(\"Connection closed\\n\");\n        interrupted = 1;\n        break;\n\n    default:\n        break;\n    }\n\n    return 0;\n}\n\n// Define supported protocols for the WebSocket\nstatic const struct lws_protocols protocols[] = {\n    { \"lws-minimal-client\", callback_minimal, 0, 0, 0, NULL, 0 },\n    LWS_PROTOCOL_LIST_TERM\n};\n\n// Main function to set up and manage the WebSocket client\nint main(int argc, const char **argv) {\n    struct lws_context_creation_info info;\n    struct lws_client_connect_info i;\n\n    // Handle Ctrl+C interrupt for graceful shutdown\n    signal(SIGINT, sigint_handler);\n    memset(&info, 0, sizeof info);\n    memset(&i, 0, sizeof(i));\n\n    lwsl_user(\"LWS Deriv ws client\\n\");\n\n    info.options = LWS_SERVER_OPTION_DO_SSL_GLOBAL_INIT;\n    info.port = CONTEXT_PORT_NO_LISTEN;\n    info.protocols = protocols;\n    info.fd_limit_per_thread = 1 + 1 + 1;\n\n    context = lws_create_context(&info);\n    if (!context) {\n        lwsl_err(\"lws init failed\\n\");\n        return 1;\n    }\n\n    i.context = context;\n    i.port = port;\n    i.address = server_address;\n    i.path = path;\n    i.host = i.address;\n    i.origin = i.address;\n    i.ssl_connection = ssl_connection;\n    i.protocol = pro;\n    i.local_protocol_name = \"lws-minimal-client\";\n\n    if (!lws_client_connect_via_info(&i)) {\n        lwsl_err(\"Failed to initiate connection\\n\");\n        return 1;\n    }\n\n    // Run the WebSocket client event loop\n    while (!interrupted)\n        lws_service(context, 0);\n\n    lws_context_destroy(context);\n    lwsl_user(\"Completed\\n\");\n\n    return 0;\n}\n\n/*\n * Instructions:\n * 1. Install the libwebsockets library on your system if it's not already installed.\n *    - On Ubuntu, you can install it by running:\n *        sudo apt-get install libwebsockets-dev\n *    - On macOS, you can use Homebrew:\n *        brew install libwebsockets\n *    - For other operating systems, refer to the libwebsockets documentation for installation details.\n * 2. Compile the code using the following command:\n *      gcc -o connect connect.c -lwebsockets -lssl -lcrypto -lm\n *    - This command links the required libraries: `libwebsockets`, `ssl`, `crypto`, and `m`.\n * 3. Run the compiled executable:\n *      ./connect\n * 4. Ensure you have internet connectivity as the WebSocket will attempt to connect to `ws.derivws.com`.\n * 5. Replace \"app_id=1089\" in the `path` variable with your actual app_id if required.\n */"
        },
        {
          "language": "text",
          "content": "import asyncio\nfrom deriv_api import DerivAPI\nfrom deriv_api.subscription_manager import SubscriptionManager\n\n# Replace with your actual app_id\napp_id = app_id\n\nasync def main():\n    # Initialize the DerivAPI instance\n    api = DerivAPI(app_id=app_id)\n\n    # Initialize the SubscriptionManager\n    subscription_manager = SubscriptionManager(api)\n\n    # Define the proposal request\n    proposal_request = {\n        \"proposal\": 1,\n        \"amount\": 10,\n        \"basis\": \"payout\",\n        \"contract_type\": \"CALL\",\n        \"currency\": \"USD\",\n        \"duration\": 1,\n        \"duration_unit\": \"m\",\n        \"symbol\": \"R_100\",\n        \"barrier\": \"+0.1\"\n    }\n\n    # Subscribe to the proposal stream\n    try:\n        proposal_stream = await subscription_manager.subscribe(proposal_request)\n        print(\"Subscribed to proposal stream\")\n\n        # Handle incoming messages and print formatted proposal details\n        proposal_stream.subscribe(\n            on_next=lambda message: print_proposal_details(message),\n            on_error=lambda e: print(f\"Error: {e}\"),\n            on_completed=lambda: print(\"Subscription completed\")\n        )\n\n        # Function to send a ping every 30 seconds\n        async def keep_alive():\n            while True:\n                await api.ping()  # Send a ping message\n                print(\"Sent ping to keep connection alive\")\n                await asyncio.sleep(30)  # Ping every 30 seconds\n\n        # Run the keep-alive ping loop and proposal subscription concurrently\n        await asyncio.gather(keep_alive())\n\n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n\n    finally:\n        # Disconnect from the API\n        await api.disconnect()\n        print(\"Disconnected from Deriv API\")\n\n# Helper function to format and print proposal details\ndef print_proposal_details(message):\n    data = message.get(\"proposal\", {})\n    if data:\n        print(f\"Details: {data.get('longcode', 'N/A')}\")\n        print(f\"Ask Price: {data.get('display_value', 'N/A')}\")\n        print(f\"Payout: {data.get('payout', 'N/A')}\")\n        print(f\"Spot: {data.get('spot', 'N/A')}\")\n\n# Run the main function\nif __name__ == \"__main__\":\n    asyncio.run(main())\n\n\"\"\"\nInstructions to run this code:\n\n1. **Install the Required Library**:\n   - Ensure that `python-deriv-api` is installed. If not, install it using:\n     ```\n     pip install python-deriv-api\n     ```\n2. **Save and Run the Code**:\n   - Save this code to a file, e.g., `connect.py`.\n   - Run the script using:\n     ```\n     python connect.py\n     ```\n3. **Configuration**:\n   - Replace the `app_id` variable with your actual Deriv app ID if needed.\n\nThis script will connect to the Deriv API WebSocket, subscribe to a proposal stream, print proposal details, and send a ping every 30 seconds to keep the connection active. \n\"\"\""
        },
        {
          "language": "text",
          "content": "import asyncio\nfrom deriv_api import DerivAPI\nfrom deriv_api.subscription_manager import SubscriptionManager\n\n# Replace with your actual app_id\napp_id = app_id\n\nasync def main():\n    # Initialize the DerivAPI instance\n    api = DerivAPI(app_id=app_id)\n\n    # Initialize the SubscriptionManager\n    subscription_manager = SubscriptionManager(api)\n\n    # Define the proposal request\n    proposal_request = {\n        \"proposal\": 1,\n        \"amount\": 10,\n        \"basis\": \"payout\",\n        \"contract_type\": \"CALL\",\n        \"currency\": \"USD\",\n        \"duration\": 1,\n        \"duration_unit\": \"m\",\n        \"symbol\": \"R_100\",\n        \"barrier\": \"+0.1\"\n    }\n\n    # Subscribe to the proposal stream\n    try:\n        proposal_stream = await subscription_manager.subscribe(proposal_request)\n        print(\"Subscribed to proposal stream\")\n\n        # Handle incoming messages and print formatted proposal details\n        proposal_stream.subscribe(\n            on_next=lambda message: print_proposal_details(message),\n            on_error=lambda e: print(f\"Error: {e}\"),\n            on_completed=lambda: print(\"Subscription completed\")\n        )\n\n        # Function to send a ping every 30 seconds\n        async def keep_alive():\n            while True:\n                await api.ping()  # Send a ping message\n                print(\"Sent ping to keep connection alive\")\n                await asyncio.sleep(30)  # Ping every 30 seconds\n\n        # Run the keep-alive ping loop and proposal subscription concurrently\n        await asyncio.gather(keep_alive())\n\n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n\n    finally:\n        # Disconnect from the API\n        await api.disconnect()\n        print(\"Disconnected from Deriv API\")\n\n# Helper function to format and print proposal details\ndef print_proposal_details(message):\n    data = message.get(\"proposal\", {})\n    if data:\n        print(f\"Details: {data.get('longcode', 'N/A')}\")\n        print(f\"Ask Price: {data.get('display_value', 'N/A')}\")\n        print(f\"Payout: {data.get('payout', 'N/A')}\")\n        print(f\"Spot: {data.get('spot', 'N/A')}\")\n\n# Run the main function\nif __name__ == \"__main__\":\n    asyncio.run(main())\n\n\"\"\"\nInstructions to run this code:\n\n1. **Install the Required Library**:\n   - Ensure that `python-deriv-api` is installed. If not, install it using:\n     ```\n     pip install python-deriv-api\n     ```\n2. **Save and Run the Code**:\n   - Save this code to a file, e.g., `connect.py`.\n   - Run the script using:\n     ```\n     python connect.py\n     ```\n3. **Configuration**:\n   - Replace the `app_id` variable with your actual Deriv app ID if needed.\n\nThis script will connect to the Deriv API WebSocket, subscribe to a proposal stream, print proposal details, and send a ping every 30 seconds to keep the connection active. \n\"\"\""
        },
        {
          "language": "text",
          "content": "#!/usr/bin/env perl\nuse strict;\nuse warnings;\nuse v5.014;\nuse AnyEvent;\nuse AnyEvent::WebSocket::Client;\nuse JSON;\n\n# WebSocket URL and app_id\nmy $app_id = app_id;\nmy $url = \"wss://ws.derivws.com/websockets/v3?app_id=$app_id\";\n\n# Create WebSocket client and connection\nmy $client = AnyEvent::WebSocket::Client->new;\n$| = 1;  # Flush output immediately for real-time logging\n\n# Define a ping interval in seconds\nmy $ping_interval = 30;\n\n# Function to send a proposal subscription request\nsub send_proposal {\n    my $connection = shift;\n    my $proposal_request = encode_json({\n        proposal       => 1,\n        subscribe      => 1,\n        amount         => 10,\n        basis          => 'payout',\n        contract_type  => 'CALL',\n        currency       => 'USD',\n        duration       => 1,\n        duration_unit  => 'm',\n        symbol         => 'R_100',\n        barrier        => '+0.1'\n    });\n    $connection->send($proposal_request);\n    say \"Proposal subscription sent.\";\n}\n\n# Establish WebSocket connection\n$client->connect($url)->cb(sub {\n    my $connection = eval { shift->recv };\n    if (!$connection) {\n        die \"Connection error: $@\";\n    }\n    say \"WebSocket connection established.\";\n\n    # Set up a repeating timer to send ping every 30 seconds\n    my $ping_timer = AnyEvent->timer(\n        after    => $ping_interval,\n        interval => $ping_interval,\n        cb       => sub {\n            $connection->send(encode_json({ ping => 1 }));\n            say \"Ping sent to keep connection alive.\";\n        }\n    );\n\n    # Send the initial proposal subscription\n    send_proposal($connection);\n\n    # Handle incoming messages\n    $connection->on(each_message => sub {\n        my ($connection, $message) = @_;\n        my $data = decode_json($message->body);\n\n        # Handle errors\n        if ($data->{error}) {\n            say \"[Error] \" . $data->{error}{message};\n            $connection->close;\n            return;\n        }\n\n        # Handle proposal messages\n        if ($data->{msg_type} && $data->{msg_type} eq 'proposal') {\n            my $proposal = $data->{proposal};\n            say \"Details: $proposal->{longcode}\";\n            say \"Ask Price: $proposal->{display_value}\";\n            say \"Payout: $proposal->{payout}\";\n            say \"Spot: $proposal->{spot}\";\n        } elsif ($data->{msg_type} && $data->{msg_type} eq 'ping') {\n            say \"[Ping] Ping response received.\";\n        }\n    });\n\n    # Handle connection close\n    $connection->on(finish => sub {\n        say \"WebSocket connection closed.\";\n        $ping_timer = undef;  # Stop the ping timer\n    });\n});\n\n# Start the AnyEvent event loop\nAnyEvent->condvar->recv;\n\n# Instructions to run the code on a local machine:\n# 1. Ensure you have Perl installed on your machine.\n# 2. Install the necessary Perl modules using the following commands:\n#      cpanm AnyEvent AnyEvent::WebSocket::Client JSON\n#    If `cpanm` is not installed, install it using `cpan App::cpanminus`.\n# 3. Save this script to a file, e.g., `connect.pl`.\n# 4. Run the script using the command:\n#      perl connect.pl\n# This script will connect to the Deriv WebSocket API, subscribe to a proposal, and send a ping every 30 seconds to keep the connection alive."
        },
        {
          "language": "text",
          "content": "#!/usr/bin/env perl\nuse strict;\nuse warnings;\nuse v5.014;\nuse AnyEvent;\nuse AnyEvent::WebSocket::Client;\nuse JSON;\n\n# WebSocket URL and app_id\nmy $app_id = app_id;\nmy $url = \"wss://ws.derivws.com/websockets/v3?app_id=$app_id\";\n\n# Create WebSocket client and connection\nmy $client = AnyEvent::WebSocket::Client->new;\n$| = 1;  # Flush output immediately for real-time logging\n\n# Define a ping interval in seconds\nmy $ping_interval = 30;\n\n# Function to send a proposal subscription request\nsub send_proposal {\n    my $connection = shift;\n    my $proposal_request = encode_json({\n        proposal       => 1,\n        subscribe      => 1,\n        amount         => 10,\n        basis          => 'payout',\n        contract_type  => 'CALL',\n        currency       => 'USD',\n        duration       => 1,\n        duration_unit  => 'm',\n        symbol         => 'R_100',\n        barrier        => '+0.1'\n    });\n    $connection->send($proposal_request);\n    say \"Proposal subscription sent.\";\n}\n\n# Establish WebSocket connection\n$client->connect($url)->cb(sub {\n    my $connection = eval { shift->recv };\n    if (!$connection) {\n        die \"Connection error: $@\";\n    }\n    say \"WebSocket connection established.\";\n\n    # Set up a repeating timer to send ping every 30 seconds\n    my $ping_timer = AnyEvent->timer(\n        after    => $ping_interval,\n        interval => $ping_interval,\n        cb       => sub {\n            $connection->send(encode_json({ ping => 1 }));\n            say \"Ping sent to keep connection alive.\";\n        }\n    );\n\n    # Send the initial proposal subscription\n    send_proposal($connection);\n\n    # Handle incoming messages\n    $connection->on(each_message => sub {\n        my ($connection, $message) = @_;\n        my $data = decode_json($message->body);\n\n        # Handle errors\n        if ($data->{error}) {\n            say \"[Error] \" . $data->{error}{message};\n            $connection->close;\n            return;\n        }\n\n        # Handle proposal messages\n        if ($data->{msg_type} && $data->{msg_type} eq 'proposal') {\n            my $proposal = $data->{proposal};\n            say \"Details: $proposal->{longcode}\";\n            say \"Ask Price: $proposal->{display_value}\";\n            say \"Payout: $proposal->{payout}\";\n            say \"Spot: $proposal->{spot}\";\n        } elsif ($data->{msg_type} && $data->{msg_type} eq 'ping') {\n            say \"[Ping] Ping response received.\";\n        }\n    });\n\n    # Handle connection close\n    $connection->on(finish => sub {\n        say \"WebSocket connection closed.\";\n        $ping_timer = undef;  # Stop the ping timer\n    });\n});\n\n# Start the AnyEvent event loop\nAnyEvent->condvar->recv;\n\n# Instructions to run the code on a local machine:\n# 1. Ensure you have Perl installed on your machine.\n# 2. Install the necessary Perl modules using the following commands:\n#      cpanm AnyEvent AnyEvent::WebSocket::Client JSON\n#    If `cpanm` is not installed, install it using `cpan App::cpanminus`.\n# 3. Save this script to a file, e.g., `connect.pl`.\n# 4. Run the script using the command:\n#      perl connect.pl\n# This script will connect to the Deriv WebSocket API, subscribe to a proposal, and send a ping every 30 seconds to keep the connection alive."
        }
      ],
      "tables": [],
      "links": []
    },
    "Check website status": {
      "title": "Check website status with websocket API | Deriv API",
      "url": "https://developers.deriv.com/docs/check-website-status",
      "mainContent": "Follow these simple steps to look into general settings like call limits, currency information, supported languages and more using the Deriv API:\n\nImport the API module: Load the DerivAPIBasic module to interact with the Deriv API.\nSetup WebSocket: Establish a WebSocket connection using the app_id for authentication.\nInitialize the API: Create an instance of DerivAPIBasic using the WebSocket connection.\nHandle API response: Define websiteStatusResponse to process the response, handle errors, and log website status.\nRequest website status: Define getWebsiteStatus to send a request to the API for website status when called.\nButton event listener: Attach an event listener to a button to trigger the website status request with a click.\nJavaScript\nJava\nPerl\nPHP\nPython\nRust\nSwift\n// Import DerivAPIBasic from the Deriv API package\nimport DerivAPIBasic from '@deriv/deriv-api/dist/DerivAPIBasic.js';\n\n// Set the app ID for API authentication,replace it with your app's ID.\nconst app_id = app_id;\n\n// Create a WebSocket connection to the Deriv server using the app_id for authentication\nconst connection = new WebSocket(`wss://ws.derivws.com/websockets/v3?app_id=${app_id}`);\n\n// Initialize the API using the WebSocket connection\nconst api = new DerivAPIBasic({ connection });\n\n// Function to handle the website status response\nconst handleWebsiteStatusResponse = async (response) => {\n  const data = JSON.parse(response.data);\n\n  // If there's an error in the response, log the error message and disconnect\n  if (data.error) {\n    console.error('Error:', data.error.message);\n    await api.disconnect();\n    return;\n  }\n\n  // If the message type is 'website_status', log the relevant details\n  if (data.msg_type === 'website_status') {\n    const websiteStatus = data.website_status;\n    console.log('Website Status:', websiteStatus.site_status);\n    console.log('Available Languages:', websiteStatus.supported_languages);\n    console.log('Terms & Conditions Version:', websiteStatus.terms_conditions_version);\n    console.log('Broker Codes:', websiteStatus.broker_codes);\n  }\n\n  // Remove the event listener after processing the response\n  connection.removeEventListener('message', handleWebsiteStatusResponse);\n};\n\n// Function to request website status from the API\nconst requestWebsiteStatus = async () => {\n  connection.addEventListener('message', handleWebsiteStatusResponse); // Add the event listener for response\n  await api.websiteStatus(); // Send the website status request\n};\n\n// Check if running in a browser or Node.js environment\nif (typeof document !== 'undefined') {\n  // Add a button event listener in the browser environment\n  const website_status_button = document.querySelector('#websiteStatus');\n  if (website_status_button) {\n    website_status_button.addEventListener('click', requestWebsiteStatus);\n  }\n} else {\n  // If running in Node.js, directly call the function\n  requestWebsiteStatus();\n}\n\n/*\n * Instructions to Run the Code on a Local Machine:\n * 1. Ensure Node.js is installed on your machine. Download it from https://nodejs.org/ if needed.\n * 2. Install required dependencies:\n *      - Run: `npm install @deriv/deriv-api ws`\n * 3. Save this code to a file, e.g., `connect.js`.\n * 4. Open a terminal and navigate to the directory where the file is saved.\n * 5. Run the code using Node.js:\n *      - Run: `node connect.js`\n *\n * In a browser environment:\n * - Save this code to a JavaScript file and link it to an HTML page with a button element:\n *   `<button id=\"websiteStatus\">Check Website Status</button>`\n * - Open the HTML file in a browser, and click the button to check the website status.\n */\n\nC#\nC\nusing System;\nusing System.Net.WebSockets;\nusing System.Text;\nusing System.Text.Json;\nusing System.Threading;\nusing System.Threading.Tasks;\n\nclass WebSocketExample\n{\n    private static readonly Uri uri = new Uri(\"wss://ws.derivws.com/websockets/v3?app_id=app_id\"); // Replace with your app_id if needed\n\n    public static async Task Main(string[] args)\n    {\n        using (ClientWebSocket webSocket = new ClientWebSocket())\n        {\n            Console.WriteLine(\"Attempting to connect to WebSocket...\");\n\n            await webSocket.ConnectAsync(uri, CancellationToken.None);\n            Console.WriteLine(\"[status] WebSocket connection established.\");\n\n            // Send website status request\n            await SendWebsiteStatusRequest(webSocket);\n\n            // Handle responses from the server\n            await HandleResponses(webSocket);\n        }\n    }\n\n    private static async Task SendWebsiteStatusRequest(ClientWebSocket webSocket)\n    {\n        var websiteStatusRequest = new { website_status = 1 };\n\n        string requestJson = JsonSerializer.Serialize(websiteStatusRequest);\n        var bytes = Encoding.UTF8.GetBytes(requestJson);\n        await webSocket.SendAsync(new ArraySegment<byte>(bytes), WebSocketMessageType.Text, true, CancellationToken.None);\n        Console.WriteLine(\"[status] Website status request sent.\");\n    }\n\n private static async Task HandleResponses(ClientWebSocket webSocket)\n {\n     var buffer = new byte[8192]; // Increased buffer size\n\n     while (webSocket.State == WebSocketState.Open)\n     {\n         var result = await webSocket.ReceiveAsync(new ArraySegment<byte>(buffer), CancellationToken.None);\n\n         if (result.MessageType == WebSocketMessageType.Close)\n         {\n             Console.WriteLine(\"WebSocket connection closed by server.\");\n             await webSocket.CloseAsync(WebSocketCloseStatus.NormalClosure, \"Closing\", CancellationToken.None);\n         }\n         else\n         {\n             // Append received bytes to a string builder\n             var response = Encoding.UTF8.GetString(buffer, 0, result.Count);\n             var data = JsonDocument.Parse(response).RootElement;\n\n             // Check for \"error\" in the response\n             if (data.TryGetProperty(\"error\", out var error))\n             {\n                 Console.WriteLine($\"[Error] {error.GetProperty(\"message\").GetString()}\");\n                 await webSocket.CloseAsync(WebSocketCloseStatus.NormalClosure, \"Closing due to error\", CancellationToken.None);\n                 break;\n             }\n\n             // Process the \"msg_type\" property\n             if (data.TryGetProperty(\"msg_type\", out var msgType) && msgType.GetString() == \"website_status\")\n             {\n                 var websiteStatus = data.GetProperty(\"website_status\");\n                 Console.WriteLine(\"Site Status: \" + websiteStatus.GetProperty(\"site_status\").GetString());\n                 Console.WriteLine(\"Supported Languages: \" + websiteStatus.GetProperty(\"supported_languages\").ToString());\n             }\n         }\n     }\n }\n}\n\n/*\nInstructions to run the code locally:\n\n1. Ensure you have .NET SDK installed. You can download it from https://dotnet.microsoft.com/download.\n\n2. Save the code to a file named `WebSocketExample.cs`.\n\n3. Open a terminal in the directory containing `WebSocketExample.cs`.\n\n4. If using the .NET CLI, you can run the code with:\n   - `dotnet new console -o WebSocketExample` (if creating a new project)\n   - Move `WebSocketExample.cs` into the project directory `WebSocketExample`.\n   - Navigate to the project directory: `cd WebSocketExample`.\n   - Run `dotnet add package System.Net.WebSockets.Client` to add the WebSocket client dependency.\n   - Run the code: `dotnet run`.\n\n5. Alternatively, you can use an IDE like Visual Studio to create a console application, add the `System.Net.WebSockets.Client` package, and then run the application.\n\n6. Replace `app_id=1089` in the URL with your actual app_id if needed.\n*/\n\n\nUpdated 9 months ago\n\nDid this page help you?\nYes\nNo",
      "headings": [],
      "codeBlocks": [
        {
          "language": "text",
          "content": "DerivAPIBasic"
        },
        {
          "language": "text",
          "content": "app_id"
        },
        {
          "language": "text",
          "content": "DerivAPIBasic"
        },
        {
          "language": "text",
          "content": "websiteStatusResponse"
        },
        {
          "language": "text",
          "content": "getWebsiteStatus"
        },
        {
          "language": "text",
          "content": "// Import DerivAPIBasic from the Deriv API package\nimport DerivAPIBasic from '@deriv/deriv-api/dist/DerivAPIBasic.js';\n\n// Set the app ID for API authentication,replace it with your app's ID.\nconst app_id = app_id;\n\n// Create a WebSocket connection to the Deriv server using the app_id for authentication\nconst connection = new WebSocket(`wss://ws.derivws.com/websockets/v3?app_id=${app_id}`);\n\n// Initialize the API using the WebSocket connection\nconst api = new DerivAPIBasic({ connection });\n\n// Function to handle the website status response\nconst handleWebsiteStatusResponse = async (response) => {\n  const data = JSON.parse(response.data);\n\n  // If there's an error in the response, log the error message and disconnect\n  if (data.error) {\n    console.error('Error:', data.error.message);\n    await api.disconnect();\n    return;\n  }\n\n  // If the message type is 'website_status', log the relevant details\n  if (data.msg_type === 'website_status') {\n    const websiteStatus = data.website_status;\n    console.log('Website Status:', websiteStatus.site_status);\n    console.log('Available Languages:', websiteStatus.supported_languages);\n    console.log('Terms & Conditions Version:', websiteStatus.terms_conditions_version);\n    console.log('Broker Codes:', websiteStatus.broker_codes);\n  }\n\n  // Remove the event listener after processing the response\n  connection.removeEventListener('message', handleWebsiteStatusResponse);\n};\n\n// Function to request website status from the API\nconst requestWebsiteStatus = async () => {\n  connection.addEventListener('message', handleWebsiteStatusResponse); // Add the event listener for response\n  await api.websiteStatus(); // Send the website status request\n};\n\n// Check if running in a browser or Node.js environment\nif (typeof document !== 'undefined') {\n  // Add a button event listener in the browser environment\n  const website_status_button = document.querySelector('#websiteStatus');\n  if (website_status_button) {\n    website_status_button.addEventListener('click', requestWebsiteStatus);\n  }\n} else {\n  // If running in Node.js, directly call the function\n  requestWebsiteStatus();\n}\n\n/*\n * Instructions to Run the Code on a Local Machine:\n * 1. Ensure Node.js is installed on your machine. Download it from https://nodejs.org/ if needed.\n * 2. Install required dependencies:\n *      - Run: `npm install @deriv/deriv-api ws`\n * 3. Save this code to a file, e.g., `connect.js`.\n * 4. Open a terminal and navigate to the directory where the file is saved.\n * 5. Run the code using Node.js:\n *      - Run: `node connect.js`\n *\n * In a browser environment:\n * - Save this code to a JavaScript file and link it to an HTML page with a button element:\n *   `<button id=\"websiteStatus\">Check Website Status</button>`\n * - Open the HTML file in a browser, and click the button to check the website status.\n */"
        },
        {
          "language": "text",
          "content": "// Import DerivAPIBasic from the Deriv API package\nimport DerivAPIBasic from '@deriv/deriv-api/dist/DerivAPIBasic.js';\n\n// Set the app ID for API authentication,replace it with your app's ID.\nconst app_id = app_id;\n\n// Create a WebSocket connection to the Deriv server using the app_id for authentication\nconst connection = new WebSocket(`wss://ws.derivws.com/websockets/v3?app_id=${app_id}`);\n\n// Initialize the API using the WebSocket connection\nconst api = new DerivAPIBasic({ connection });\n\n// Function to handle the website status response\nconst handleWebsiteStatusResponse = async (response) => {\n  const data = JSON.parse(response.data);\n\n  // If there's an error in the response, log the error message and disconnect\n  if (data.error) {\n    console.error('Error:', data.error.message);\n    await api.disconnect();\n    return;\n  }\n\n  // If the message type is 'website_status', log the relevant details\n  if (data.msg_type === 'website_status') {\n    const websiteStatus = data.website_status;\n    console.log('Website Status:', websiteStatus.site_status);\n    console.log('Available Languages:', websiteStatus.supported_languages);\n    console.log('Terms & Conditions Version:', websiteStatus.terms_conditions_version);\n    console.log('Broker Codes:', websiteStatus.broker_codes);\n  }\n\n  // Remove the event listener after processing the response\n  connection.removeEventListener('message', handleWebsiteStatusResponse);\n};\n\n// Function to request website status from the API\nconst requestWebsiteStatus = async () => {\n  connection.addEventListener('message', handleWebsiteStatusResponse); // Add the event listener for response\n  await api.websiteStatus(); // Send the website status request\n};\n\n// Check if running in a browser or Node.js environment\nif (typeof document !== 'undefined') {\n  // Add a button event listener in the browser environment\n  const website_status_button = document.querySelector('#websiteStatus');\n  if (website_status_button) {\n    website_status_button.addEventListener('click', requestWebsiteStatus);\n  }\n} else {\n  // If running in Node.js, directly call the function\n  requestWebsiteStatus();\n}\n\n/*\n * Instructions to Run the Code on a Local Machine:\n * 1. Ensure Node.js is installed on your machine. Download it from https://nodejs.org/ if needed.\n * 2. Install required dependencies:\n *      - Run: `npm install @deriv/deriv-api ws`\n * 3. Save this code to a file, e.g., `connect.js`.\n * 4. Open a terminal and navigate to the directory where the file is saved.\n * 5. Run the code using Node.js:\n *      - Run: `node connect.js`\n *\n * In a browser environment:\n * - Save this code to a JavaScript file and link it to an HTML page with a button element:\n *   `<button id=\"websiteStatus\">Check Website Status</button>`\n * - Open the HTML file in a browser, and click the button to check the website status.\n */"
        },
        {
          "language": "text",
          "content": "package src.main.java;\n\nimport org.java_websocket.client.WebSocketClient;\nimport org.java_websocket.handshake.ServerHandshake;\nimport java.net.URI;\nimport java.net.URISyntaxException;\nimport java.util.Timer;\nimport java.util.TimerTask;\nimport com.google.gson.JsonObject;\n\npublic class WebSocketExample {\n\n    public static void main(String[] args) {\n        try {\n            // Replace with your app_id\n            int app_id = app_id;\n            String serverUri = \"wss://ws.derivws.com/websockets/v3?app_id=\" + app_id;\n\n            // Initialize the WebSocket client\n            WebSocketClient client = new WebSocketClient(new URI(serverUri)) {\n\n                @Override\n                public void onOpen(ServerHandshake handshakedata) {\n                    System.out.println(\"[open] Connection established\");\n\n                    // Send website status request\n                    JsonObject websiteStatusRequest = new JsonObject();\n                    websiteStatusRequest.addProperty(\"website_status\", 1);\n                    send(websiteStatusRequest.toString());\n                    System.out.println(\"[sent] Website status request sent\");\n\n                    // Schedule a ping every 30 seconds\n                    Timer timer = new Timer();\n                    timer.scheduleAtFixedRate(new TimerTask() {\n                        @Override\n                        public void run() {\n                            JsonObject pingMessage = new JsonObject();\n                            pingMessage.addProperty(\"ping\", 1);\n                            send(pingMessage.toString());\n                            System.out.println(\"[ping] Ping sent to keep connection alive\");\n                        }\n                    }, 0, 30000);\n                }\n\n                @Override\n                public void onMessage(String message) {\n                    System.out.println(\"[message] Received: \" + message);\n\n                    JsonObject data = new com.google.gson.JsonParser().parse(message).getAsJsonObject();\n                    if (data.has(\"error\")) {\n                        System.out.println(\"[error] \" + data.getAsJsonObject(\"error\").get(\"message\").getAsString());\n                    } else if (\"website_status\".equals(data.get(\"msg_type\").getAsString())) {\n                        JsonObject websiteStatus = data.getAsJsonObject(\"website_status\");\n                        String siteStatus = websiteStatus.get(\"site_status\").getAsString();\n                        System.out.println(\"Website Status: \" + siteStatus);\n                    } else if (\"ping\".equals(data.get(\"msg_type\").getAsString())) {\n                        System.out.println(\"[ping] Ping response received.\");\n                    }\n                }\n\n                @Override\n                public void onClose(int code, String reason, boolean remote) {\n                    System.out.println(\"[close] Connection closed by \" + (remote ? \"server\" : \"client\") + \": \" + reason);\n                }\n\n                @Override\n                public void onError(Exception ex) {\n                    System.out.println(\"[error] \" + ex.getMessage());\n                }\n            };\n\n            client.connect();\n\n        } catch (URISyntaxException e) {\n            System.out.println(\"[error] Invalid URI: \" + e.getMessage());\n        }\n    }\n}\n\n/*\nInstructions to run the code:\n\n1. Ensure that Java is installed on your machine. You can download it from https://www.oracle.com/java/technologies/javase-jdk11-downloads.html.\n2. Add the following dependencies to your project:\n   - `java-websocket` for WebSocket functionality\n   - `gson` for JSON handling\n\n   If you are using Maven, add these dependencies to your `pom.xml`:\n\n   <dependency>\n       <groupId>org.java-websocket</groupId>\n       <artifactId>Java-WebSocket</artifactId>\n       <version>1.5.2</version>\n   </dependency>\n   <dependency>\n       <groupId>com.google.code.gson</groupId>\n       <artifactId>gson</artifactId>\n       <version>2.8.8</version>\n   </dependency>\n\n3. Compile the code:\n   javac WebSocketExample.java\n\n4. Run the code:\n   java WebSocketExample\n\nNote: Replace `app_id` with your actual app_id if needed.\n\n\n */"
        },
        {
          "language": "text",
          "content": "package src.main.java;\n\nimport org.java_websocket.client.WebSocketClient;\nimport org.java_websocket.handshake.ServerHandshake;\nimport java.net.URI;\nimport java.net.URISyntaxException;\nimport java.util.Timer;\nimport java.util.TimerTask;\nimport com.google.gson.JsonObject;\n\npublic class WebSocketExample {\n\n    public static void main(String[] args) {\n        try {\n            // Replace with your app_id\n            int app_id = app_id;\n            String serverUri = \"wss://ws.derivws.com/websockets/v3?app_id=\" + app_id;\n\n            // Initialize the WebSocket client\n            WebSocketClient client = new WebSocketClient(new URI(serverUri)) {\n\n                @Override\n                public void onOpen(ServerHandshake handshakedata) {\n                    System.out.println(\"[open] Connection established\");\n\n                    // Send website status request\n                    JsonObject websiteStatusRequest = new JsonObject();\n                    websiteStatusRequest.addProperty(\"website_status\", 1);\n                    send(websiteStatusRequest.toString());\n                    System.out.println(\"[sent] Website status request sent\");\n\n                    // Schedule a ping every 30 seconds\n                    Timer timer = new Timer();\n                    timer.scheduleAtFixedRate(new TimerTask() {\n                        @Override\n                        public void run() {\n                            JsonObject pingMessage = new JsonObject();\n                            pingMessage.addProperty(\"ping\", 1);\n                            send(pingMessage.toString());\n                            System.out.println(\"[ping] Ping sent to keep connection alive\");\n                        }\n                    }, 0, 30000);\n                }\n\n                @Override\n                public void onMessage(String message) {\n                    System.out.println(\"[message] Received: \" + message);\n\n                    JsonObject data = new com.google.gson.JsonParser().parse(message).getAsJsonObject();\n                    if (data.has(\"error\")) {\n                        System.out.println(\"[error] \" + data.getAsJsonObject(\"error\").get(\"message\").getAsString());\n                    } else if (\"website_status\".equals(data.get(\"msg_type\").getAsString())) {\n                        JsonObject websiteStatus = data.getAsJsonObject(\"website_status\");\n                        String siteStatus = websiteStatus.get(\"site_status\").getAsString();\n                        System.out.println(\"Website Status: \" + siteStatus);\n                    } else if (\"ping\".equals(data.get(\"msg_type\").getAsString())) {\n                        System.out.println(\"[ping] Ping response received.\");\n                    }\n                }\n\n                @Override\n                public void onClose(int code, String reason, boolean remote) {\n                    System.out.println(\"[close] Connection closed by \" + (remote ? \"server\" : \"client\") + \": \" + reason);\n                }\n\n                @Override\n                public void onError(Exception ex) {\n                    System.out.println(\"[error] \" + ex.getMessage());\n                }\n            };\n\n            client.connect();\n\n        } catch (URISyntaxException e) {\n            System.out.println(\"[error] Invalid URI: \" + e.getMessage());\n        }\n    }\n}\n\n/*\nInstructions to run the code:\n\n1. Ensure that Java is installed on your machine. You can download it from https://www.oracle.com/java/technologies/javase-jdk11-downloads.html.\n2. Add the following dependencies to your project:\n   - `java-websocket` for WebSocket functionality\n   - `gson` for JSON handling\n\n   If you are using Maven, add these dependencies to your `pom.xml`:\n\n   <dependency>\n       <groupId>org.java-websocket</groupId>\n       <artifactId>Java-WebSocket</artifactId>\n       <version>1.5.2</version>\n   </dependency>\n   <dependency>\n       <groupId>com.google.code.gson</groupId>\n       <artifactId>gson</artifactId>\n       <version>2.8.8</version>\n   </dependency>\n\n3. Compile the code:\n   javac WebSocketExample.java\n\n4. Run the code:\n   java WebSocketExample\n\nNote: Replace `app_id` with your actual app_id if needed.\n\n\n */"
        },
        {
          "language": "text",
          "content": "#!/usr/bin/env perl\nuse strict;\nuse warnings;\nuse v5.014;\nuse AnyEvent;\nuse AnyEvent::WebSocket::Client;\nuse JSON;\n\n# WebSocket URL and app_id\nmy $app_id = app_id;\nmy $url = \"wss://ws.derivws.com/websockets/v3?app_id=$app_id\";\n\n# Create WebSocket client and connection\nmy $client = AnyEvent::WebSocket::Client->new;\n$| = 1;  # Flush output immediately for real-time logging\n\n# Function to send a website status request\nsub send_website_status {\n    my $connection = shift;\n    my $website_status_request = encode_json({ website_status => 1 });\n    $connection->send($website_status_request);\n    say \"[status] Website status request sent.\";\n}\n\n# Establish WebSocket connection\n$client->connect($url)->cb(sub {\n    my $connection = eval { shift->recv };\n    if (!$connection) {\n        die \"Connection error: $@\";\n    }\n    say \"[status] WebSocket connection established.\";\n\n    # Send website status request immediately\n    send_website_status($connection);\n\n    # Set a timeout for receiving a response\n    my $timeout = AnyEvent->timer(\n        after => 10,\n        cb    => sub {\n            say \"[error] No response received within 10 seconds. Closing connection.\";\n            $connection->close;\n        }\n    );\n\n    # Handle incoming messages\n    $connection->on(each_message => sub {\n        my ($connection, $message) = @_;\n\n        # Cancel timeout upon receiving a message\n        undef $timeout;\n\n        my $data = eval { decode_json($message->body) };\n        if ($@) {\n            say \"[error] Failed to decode JSON: $@\";\n            return;\n        }\n\n        # Handle errors\n        if ($data->{error}) {\n            say \"[error] \" . $data->{error}{message};\n            $connection->close;\n            return;\n        }\n\n        # Handle website status response\n        if ($data->{msg_type} && $data->{msg_type} eq 'website_status') {\n            my $website_status = $data->{website_status};\n            say \"Site Status: \" . ($website_status->{site_status} // 'Unknown');\n            say \"Supported Languages: \" . join(\", \", @{$website_status->{supported_languages}});\n            $connection->close; # Close connection after processing the response\n        }\n    });\n\n    # Handle connection close\n    $connection->on(finish => sub {\n        say \"[status] WebSocket connection closed.\";\n    });\n});\n\n# Start the AnyEvent event loop\nAnyEvent->condvar->recv;\n\n# Instructions to run the code on a local machine:\n# 1. Ensure you have Perl installed on your machine.\n# 2. Install the necessary Perl modules using the following commands:\n#      cpanm AnyEvent AnyEvent::WebSocket::Client JSON\n#    If `cpanm` is not installed, install it using `cpan App::cpanminus`.\n# 3. Save this script to a file, e.g., `connect.pl`.\n# 4. Run the script using the command:\n#      perl connect.pl\n# This script will connect to the Deriv WebSocket API, request the website status, and print the response."
        },
        {
          "language": "text",
          "content": "#!/usr/bin/env perl\nuse strict;\nuse warnings;\nuse v5.014;\nuse AnyEvent;\nuse AnyEvent::WebSocket::Client;\nuse JSON;\n\n# WebSocket URL and app_id\nmy $app_id = app_id;\nmy $url = \"wss://ws.derivws.com/websockets/v3?app_id=$app_id\";\n\n# Create WebSocket client and connection\nmy $client = AnyEvent::WebSocket::Client->new;\n$| = 1;  # Flush output immediately for real-time logging\n\n# Function to send a website status request\nsub send_website_status {\n    my $connection = shift;\n    my $website_status_request = encode_json({ website_status => 1 });\n    $connection->send($website_status_request);\n    say \"[status] Website status request sent.\";\n}\n\n# Establish WebSocket connection\n$client->connect($url)->cb(sub {\n    my $connection = eval { shift->recv };\n    if (!$connection) {\n        die \"Connection error: $@\";\n    }\n    say \"[status] WebSocket connection established.\";\n\n    # Send website status request immediately\n    send_website_status($connection);\n\n    # Set a timeout for receiving a response\n    my $timeout = AnyEvent->timer(\n        after => 10,\n        cb    => sub {\n            say \"[error] No response received within 10 seconds. Closing connection.\";\n            $connection->close;\n        }\n    );\n\n    # Handle incoming messages\n    $connection->on(each_message => sub {\n        my ($connection, $message) = @_;\n\n        # Cancel timeout upon receiving a message\n        undef $timeout;\n\n        my $data = eval { decode_json($message->body) };\n        if ($@) {\n            say \"[error] Failed to decode JSON: $@\";\n            return;\n        }\n\n        # Handle errors\n        if ($data->{error}) {\n            say \"[error] \" . $data->{error}{message};\n            $connection->close;\n            return;\n        }\n\n        # Handle website status response\n        if ($data->{msg_type} && $data->{msg_type} eq 'website_status') {\n            my $website_status = $data->{website_status};\n            say \"Site Status: \" . ($website_status->{site_status} // 'Unknown');\n            say \"Supported Languages: \" . join(\", \", @{$website_status->{supported_languages}});\n            $connection->close; # Close connection after processing the response\n        }\n    });\n\n    # Handle connection close\n    $connection->on(finish => sub {\n        say \"[status] WebSocket connection closed.\";\n    });\n});\n\n# Start the AnyEvent event loop\nAnyEvent->condvar->recv;\n\n# Instructions to run the code on a local machine:\n# 1. Ensure you have Perl installed on your machine.\n# 2. Install the necessary Perl modules using the following commands:\n#      cpanm AnyEvent AnyEvent::WebSocket::Client JSON\n#    If `cpanm` is not installed, install it using `cpan App::cpanminus`.\n# 3. Save this script to a file, e.g., `connect.pl`.\n# 4. Run the script using the command:\n#      perl connect.pl\n# This script will connect to the Deriv WebSocket API, request the website status, and print the response."
        },
        {
          "language": "text",
          "content": "<?php\n\nrequire 'vendor/autoload.php';\n\nuse WebSocket\\Client;\n\n// Replace with your app_id\n$app_id = app_id;\n$uri = \"wss://ws.derivws.com/websockets/v3?app_id=$app_id\";\n\n// Create a new WebSocket client\n$client = new Client($uri);\n\ntry {\n    echo \"[open] WebSocket connection established.\\n\";\n\n    // Send a website status request\n    $website_status_request = json_encode([\"website_status\" => 1]);\n    $client->send($website_status_request);\n    echo \"[sent] Website status request sent.\\n\";\n\n    // Ping function to keep connection alive\n    $ping_interval = 30; // in seconds\n    $last_ping_time = time();\n\n    // Main loop to handle responses and send ping messages\n    while (true) {\n        // Check if it's time to send a ping\n        if (time() - $last_ping_time >= $ping_interval) {\n            $client->send(json_encode([\"ping\" => 1]));\n            echo \"[ping] Ping sent to keep connection alive.\\n\";\n            $last_ping_time = time();\n        }\n\n        // Receive response from WebSocket\n        $response = $client->receive();\n        $data = json_decode($response, true);\n\n        if (isset($data[\"error\"])) {\n            echo \"[error] \" . $data[\"error\"][\"message\"] . \"\\n\";\n            break;\n        } elseif ($data[\"msg_type\"] === \"website_status\") {\n            $website_status = $data[\"website_status\"];\n\n            // Print important information from the website status\n            echo \"[status] Website Status:\\n\";\n            echo \"  - Site Status: \" . ($website_status[\"site_status\"] ?? \"N/A\") . \"\\n\";\n            echo \"  - Supported Languages: \" . implode(\", \", $website_status[\"supported_languages\"] ?? []) . \"\\n\";\n\n            // Extract and print currency information\n            echo \"  - Currencies Config:\\n\";\n            foreach ($website_status[\"currencies_config\"] ?? [] as $currency => $config) {\n                echo \"    * {$currency} ({$config['name']}):\\n\";\n                echo \"      - Type: \" . ($config[\"type\"] ?? \"N/A\") . \"\\n\";\n                echo \"      - Fractional Digits: \" . ($config[\"fractional_digits\"] ?? \"N/A\") . \"\\n\";\n                echo \"      - Deposit Suspended: \" . ($config[\"is_deposit_suspended\"] ? \"Yes\" : \"No\") . \"\\n\";\n                echo \"      - Withdrawal Suspended: \" . ($config[\"is_withdrawal_suspended\"] ? \"Yes\" : \"No\") . \"\\n\";\n            }\n\n            echo \"[status] End of Website Status Response.\\n\";\n        } elseif ($data[\"msg_type\"] === \"ping\") {\n            echo \"[ping] Ping response received.\\n\";\n        }\n\n        // Sleep briefly to prevent continuous loop\n        usleep(500000); // 500ms\n    }\n\n    // Close the WebSocket connection\n    $client->close();\n    echo \"[close] WebSocket connection closed.\\n\";\n\n} catch (Exception $e) {\n    echo \"[error] \" . $e->getMessage() . \"\\n\";\n}\n\n/*\nInstructions to run the code:\n\n1. Ensure PHP is installed on your machine. You can download it from https://www.php.net/.\n2. Install Composer if you haven't already, by downloading it from https://getcomposer.org/.\n3. Create a `composer.json` file in the same directory as your PHP script with the following content:\n\n   {\n     \"require\": {\n       \"textalk/websocket\": \"^1.5\"\n     }\n   }\n\n4. Run the following command to install the WebSocket library:\n\n   composer install\n\n5. Save the code above to a PHP file, e.g., `website_status_client.php`.\n6. Run the code from the command line:\n\n   php website_status_client.php\n\nNote: Replace `app_id` with your actual app_id if needed.\n*/"
        },
        {
          "language": "text",
          "content": "<?php\n\nrequire 'vendor/autoload.php';\n\nuse WebSocket\\Client;\n\n// Replace with your app_id\n$app_id = app_id;\n$uri = \"wss://ws.derivws.com/websockets/v3?app_id=$app_id\";\n\n// Create a new WebSocket client\n$client = new Client($uri);\n\ntry {\n    echo \"[open] WebSocket connection established.\\n\";\n\n    // Send a website status request\n    $website_status_request = json_encode([\"website_status\" => 1]);\n    $client->send($website_status_request);\n    echo \"[sent] Website status request sent.\\n\";\n\n    // Ping function to keep connection alive\n    $ping_interval = 30; // in seconds\n    $last_ping_time = time();\n\n    // Main loop to handle responses and send ping messages\n    while (true) {\n        // Check if it's time to send a ping\n        if (time() - $last_ping_time >= $ping_interval) {\n            $client->send(json_encode([\"ping\" => 1]));\n            echo \"[ping] Ping sent to keep connection alive.\\n\";\n            $last_ping_time = time();\n        }\n\n        // Receive response from WebSocket\n        $response = $client->receive();\n        $data = json_decode($response, true);\n\n        if (isset($data[\"error\"])) {\n            echo \"[error] \" . $data[\"error\"][\"message\"] . \"\\n\";\n            break;\n        } elseif ($data[\"msg_type\"] === \"website_status\") {\n            $website_status = $data[\"website_status\"];\n\n            // Print important information from the website status\n            echo \"[status] Website Status:\\n\";\n            echo \"  - Site Status: \" . ($website_status[\"site_status\"] ?? \"N/A\") . \"\\n\";\n            echo \"  - Supported Languages: \" . implode(\", \", $website_status[\"supported_languages\"] ?? []) . \"\\n\";\n\n            // Extract and print currency information\n            echo \"  - Currencies Config:\\n\";\n            foreach ($website_status[\"currencies_config\"] ?? [] as $currency => $config) {\n                echo \"    * {$currency} ({$config['name']}):\\n\";\n                echo \"      - Type: \" . ($config[\"type\"] ?? \"N/A\") . \"\\n\";\n                echo \"      - Fractional Digits: \" . ($config[\"fractional_digits\"] ?? \"N/A\") . \"\\n\";\n                echo \"      - Deposit Suspended: \" . ($config[\"is_deposit_suspended\"] ? \"Yes\" : \"No\") . \"\\n\";\n                echo \"      - Withdrawal Suspended: \" . ($config[\"is_withdrawal_suspended\"] ? \"Yes\" : \"No\") . \"\\n\";\n            }\n\n            echo \"[status] End of Website Status Response.\\n\";\n        } elseif ($data[\"msg_type\"] === \"ping\") {\n            echo \"[ping] Ping response received.\\n\";\n        }\n\n        // Sleep briefly to prevent continuous loop\n        usleep(500000); // 500ms\n    }\n\n    // Close the WebSocket connection\n    $client->close();\n    echo \"[close] WebSocket connection closed.\\n\";\n\n} catch (Exception $e) {\n    echo \"[error] \" . $e->getMessage() . \"\\n\";\n}\n\n/*\nInstructions to run the code:\n\n1. Ensure PHP is installed on your machine. You can download it from https://www.php.net/.\n2. Install Composer if you haven't already, by downloading it from https://getcomposer.org/.\n3. Create a `composer.json` file in the same directory as your PHP script with the following content:\n\n   {\n     \"require\": {\n       \"textalk/websocket\": \"^1.5\"\n     }\n   }\n\n4. Run the following command to install the WebSocket library:\n\n   composer install\n\n5. Save the code above to a PHP file, e.g., `website_status_client.php`.\n6. Run the code from the command line:\n\n   php website_status_client.php\n\nNote: Replace `app_id` with your actual app_id if needed.\n*/"
        },
        {
          "language": "text",
          "content": "import asyncio\nfrom deriv_api import DerivAPI\n\n# Replace with your actual app_id\napp_id = app_id\n\nasync def main():\n    # Initialize the DerivAPI instance\n    api = DerivAPI(app_id=app_id)\n\n    try:\n        # Send a website status request\n        website_status_request = {\"website_status\": 1}\n        response = await api.send(website_status_request)\n        print(\"Website status request sent\")\n\n        # Process the response and print important information\n        print_website_status(response)\n\n        # Function to send a ping every 30 seconds to keep the connection alive\n        async def keep_alive():\n            while True:\n                await api.ping()  # Send a ping message\n                print(\"Sent ping to keep connection alive\")\n                await asyncio.sleep(30)  # Ping every 30 seconds\n\n        # Run the keep-alive ping loop\n        await asyncio.gather(keep_alive())\n\n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n\n    finally:\n        # Disconnect from the API\n        await api.disconnect()\n        print(\"Disconnected from Deriv API\")\n\n# Helper function to format and print website status details\ndef print_website_status(response):\n    data = response.get(\"website_status\", {})\n    if data:\n        print(\"[Website Status]\")\n        print(f\"  - Site Status: {data.get('site_status', 'N/A')}\")\n        print(\"  - Supported Languages:\", \", \".join(data.get(\"supported_languages\", [])))\n\n        # Display currency configurations\n        currencies_config = data.get(\"currencies_config\", {})\n        print(\"  - Currencies Config:\")\n        for currency, config in currencies_config.items():\n            print(f\"    * {currency} ({config.get('name', 'N/A')}):\")\n            print(f\"      - Type: {config.get('type', 'N/A')}\")\n            print(f\"      - Fractional Digits: {config.get('fractional_digits', 'N/A')}\")\n            print(f\"      - Deposit Suspended: {'Yes' if config.get('is_deposit_suspended') else 'No'}\")\n            print(f\"      - Withdrawal Suspended: {'Yes' if config.get('is_withdrawal_suspended') else 'No'}\")\n        print(\"[End of Website Status Response]\")\n\n# Run the main function\nif __name__ == \"__main__\":\n    asyncio.run(main())\n\n# Instructions to run the code:\n# 1. Ensure Python is installed on your machine (https://www.python.org/downloads/).\n# 2. Install the Deriv API package by running:\n#      pip install deriv_api\n# 3. Save this code to a file, e.g., `website_status_client.py`.\n# 4. Run the code from the command line:\n#      python website_status_client.py\n#\n# This script will connect to Deriv‚Äôs WebSocket API, request the website status, and send pings every 30 seconds to keep the connection alive.\n# The response includes important details about the website status and configuration for each currency."
        },
        {
          "language": "text",
          "content": "import asyncio\nfrom deriv_api import DerivAPI\n\n# Replace with your actual app_id\napp_id = app_id\n\nasync def main():\n    # Initialize the DerivAPI instance\n    api = DerivAPI(app_id=app_id)\n\n    try:\n        # Send a website status request\n        website_status_request = {\"website_status\": 1}\n        response = await api.send(website_status_request)\n        print(\"Website status request sent\")\n\n        # Process the response and print important information\n        print_website_status(response)\n\n        # Function to send a ping every 30 seconds to keep the connection alive\n        async def keep_alive():\n            while True:\n                await api.ping()  # Send a ping message\n                print(\"Sent ping to keep connection alive\")\n                await asyncio.sleep(30)  # Ping every 30 seconds\n\n        # Run the keep-alive ping loop\n        await asyncio.gather(keep_alive())\n\n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n\n    finally:\n        # Disconnect from the API\n        await api.disconnect()\n        print(\"Disconnected from Deriv API\")\n\n# Helper function to format and print website status details\ndef print_website_status(response):\n    data = response.get(\"website_status\", {})\n    if data:\n        print(\"[Website Status]\")\n        print(f\"  - Site Status: {data.get('site_status', 'N/A')}\")\n        print(\"  - Supported Languages:\", \", \".join(data.get(\"supported_languages\", [])))\n\n        # Display currency configurations\n        currencies_config = data.get(\"currencies_config\", {})\n        print(\"  - Currencies Config:\")\n        for currency, config in currencies_config.items():\n            print(f\"    * {currency} ({config.get('name', 'N/A')}):\")\n            print(f\"      - Type: {config.get('type', 'N/A')}\")\n            print(f\"      - Fractional Digits: {config.get('fractional_digits', 'N/A')}\")\n            print(f\"      - Deposit Suspended: {'Yes' if config.get('is_deposit_suspended') else 'No'}\")\n            print(f\"      - Withdrawal Suspended: {'Yes' if config.get('is_withdrawal_suspended') else 'No'}\")\n        print(\"[End of Website Status Response]\")\n\n# Run the main function\nif __name__ == \"__main__\":\n    asyncio.run(main())\n\n# Instructions to run the code:\n# 1. Ensure Python is installed on your machine (https://www.python.org/downloads/).\n# 2. Install the Deriv API package by running:\n#      pip install deriv_api\n# 3. Save this code to a file, e.g., `website_status_client.py`.\n# 4. Run the code from the command line:\n#      python website_status_client.py\n#\n# This script will connect to Deriv‚Äôs WebSocket API, request the website status, and send pings every 30 seconds to keep the connection alive.\n# The response includes important details about the website status and configuration for each currency."
        },
        {
          "language": "text",
          "content": "use tokio_tungstenite::connect_async;\nuse tokio_tungstenite::tungstenite::protocol::Message;\nuse futures_util::{SinkExt, StreamExt};\nuse tokio::{sync::Mutex, task::spawn};\nuse std::sync::Arc;\nuse serde_json::json;\nuse url::Url;\n\n#[tokio::main]\nasync fn main() {\n    let app_id = app_id;\n    let url = format!(\"wss://ws.derivws.com/websockets/v3?app_id={}\", app_id);\n    let url = Url::parse(&url).expect(\"Invalid URL\");\n\n    // Connect to the WebSocket server and wrap `socket` in Arc<Mutex<_>>\n    let (socket, _) = connect_async(url).await.expect(\"Failed to connect\");\n    let socket = Arc::new(Mutex::new(socket));\n\n    println!(\"[status] WebSocket connection established\");\n\n    // Website status request JSON\n    let website_status_request = json!({\n        \"website_status\": 1\n    });\n\n    // Clone `socket` to send the website status request\n    let send_socket = Arc::clone(&socket);\n    let send_task = spawn(async move {\n        let mut socket = send_socket.lock().await;\n        if socket.send(Message::Text(website_status_request.to_string())).await.is_ok() {\n            println!(\"[status] Website status request sent.\");\n        }\n    });\n\n    // Task to handle incoming messages\n    let receive_socket = Arc::clone(&socket);\n    let receive_task = spawn(async move {\n        let mut socket = receive_socket.lock().await;\n        while let Some(Ok(msg)) = socket.next().await {\n            match msg {\n                Message::Text(text) => {\n                    let data: serde_json::Value = serde_json::from_str(&text).unwrap_or_else(|_| json!({}));\n                    if data.get(\"msg_type\").unwrap_or(&json!(\"\")) == \"website_status\" {\n                        println!(\"[Website Status] Site Status: {}\", data[\"website_status\"][\"site_status\"]);\n                        let supported_languages: Vec<String> = data[\"website_status\"][\"supported_languages\"]\n                            .as_array()\n                            .unwrap_or(&vec![])\n                            .iter()\n                            .filter_map(|lang| lang.as_str().map(|s| s.to_string()))\n                            .collect();\n                        println!(\"Supported Languages: {:?}\", supported_languages);\n                    } else if let Some(error) = data.get(\"error\") {\n                        println!(\"[Error] {}\", error[\"message\"]);\n                    }\n                }\n                _ => {}\n            }\n        }\n    });\n\n    // Await all tasks to complete\n    let _ = tokio::try_join!(send_task, receive_task);\n\n    // Close the WebSocket connection\n    let mut socket = socket.lock().await;\n    socket.close(None).await.expect(\"Failed to close connection\");\n    println!(\"[close] Connection closed.\");\n}\n\n/*\nInstructions to run the code:\n\n1. Ensure Rust and Cargo are installed on your machine. You can download them from https://www.rust-lang.org/.\n2. Add the necessary dependencies to `Cargo.toml`:\n\n   [dependencies]\n   tokio = { version = \"1\", features = [\"full\"] }\n   tokio-tungstenite = \"0.16\"\n   futures-util = \"0.3\"\n   serde_json = \"1.0\"\n   url = \"2.2\"\n\n3. Build the project:\n\n   cargo build --release\n\n4. Run the project:\n\n   cargo run --release\n\nThis code will connect to the Deriv WebSocket API, request the website status, print the website's status, supported languages, and handle any potential errors in the response.\n*/"
        },
        {
          "language": "text",
          "content": "use tokio_tungstenite::connect_async;\nuse tokio_tungstenite::tungstenite::protocol::Message;\nuse futures_util::{SinkExt, StreamExt};\nuse tokio::{sync::Mutex, task::spawn};\nuse std::sync::Arc;\nuse serde_json::json;\nuse url::Url;\n\n#[tokio::main]\nasync fn main() {\n    let app_id = app_id;\n    let url = format!(\"wss://ws.derivws.com/websockets/v3?app_id={}\", app_id);\n    let url = Url::parse(&url).expect(\"Invalid URL\");\n\n    // Connect to the WebSocket server and wrap `socket` in Arc<Mutex<_>>\n    let (socket, _) = connect_async(url).await.expect(\"Failed to connect\");\n    let socket = Arc::new(Mutex::new(socket));\n\n    println!(\"[status] WebSocket connection established\");\n\n    // Website status request JSON\n    let website_status_request = json!({\n        \"website_status\": 1\n    });\n\n    // Clone `socket` to send the website status request\n    let send_socket = Arc::clone(&socket);\n    let send_task = spawn(async move {\n        let mut socket = send_socket.lock().await;\n        if socket.send(Message::Text(website_status_request.to_string())).await.is_ok() {\n            println!(\"[status] Website status request sent.\");\n        }\n    });\n\n    // Task to handle incoming messages\n    let receive_socket = Arc::clone(&socket);\n    let receive_task = spawn(async move {\n        let mut socket = receive_socket.lock().await;\n        while let Some(Ok(msg)) = socket.next().await {\n            match msg {\n                Message::Text(text) => {\n                    let data: serde_json::Value = serde_json::from_str(&text).unwrap_or_else(|_| json!({}));\n                    if data.get(\"msg_type\").unwrap_or(&json!(\"\")) == \"website_status\" {\n                        println!(\"[Website Status] Site Status: {}\", data[\"website_status\"][\"site_status\"]);\n                        let supported_languages: Vec<String> = data[\"website_status\"][\"supported_languages\"]\n                            .as_array()\n                            .unwrap_or(&vec![])\n                            .iter()\n                            .filter_map(|lang| lang.as_str().map(|s| s.to_string()))\n                            .collect();\n                        println!(\"Supported Languages: {:?}\", supported_languages);\n                    } else if let Some(error) = data.get(\"error\") {\n                        println!(\"[Error] {}\", error[\"message\"]);\n                    }\n                }\n                _ => {}\n            }\n        }\n    });\n\n    // Await all tasks to complete\n    let _ = tokio::try_join!(send_task, receive_task);\n\n    // Close the WebSocket connection\n    let mut socket = socket.lock().await;\n    socket.close(None).await.expect(\"Failed to close connection\");\n    println!(\"[close] Connection closed.\");\n}\n\n/*\nInstructions to run the code:\n\n1. Ensure Rust and Cargo are installed on your machine. You can download them from https://www.rust-lang.org/.\n2. Add the necessary dependencies to `Cargo.toml`:\n\n   [dependencies]\n   tokio = { version = \"1\", features = [\"full\"] }\n   tokio-tungstenite = \"0.16\"\n   futures-util = \"0.3\"\n   serde_json = \"1.0\"\n   url = \"2.2\"\n\n3. Build the project:\n\n   cargo build --release\n\n4. Run the project:\n\n   cargo run --release\n\nThis code will connect to the Deriv WebSocket API, request the website status, print the website's status, supported languages, and handle any potential errors in the response.\n*/"
        },
        {
          "language": "text",
          "content": "import Foundation\n\n// Make webSocketTask a global variable to keep the connection open\nvar webSocketTask: URLSessionWebSocketTask?\n\n// Function to create and handle WebSocket connection\nfunc connectWebSocket() {\n    let appID = app_id // Replace with your app_id.\n    let url = URL(string: \"wss://ws.derivws.com/websockets/v3?app_id=\\(appID)\")! // WebSocket URL with the app_id\n    let request = URLRequest(url: url)\n    \n    // Initialize webSocketTask with URLSession\n    webSocketTask = URLSession.shared.webSocketTask(with: request)\n    \n    // Start the WebSocket connection\n    webSocketTask?.resume()\n    print(\"[status] WebSocket connection established.\")\n    \n    // Function to send website status request\n    func sendWebsiteStatusRequest() {\n        let websiteStatusRequest = [\"website_status\": 1] as [String: Any]\n        \n        if let requestData = try? JSONSerialization.data(withJSONObject: websiteStatusRequest, options: []) {\n            let message = URLSessionWebSocketTask.Message.data(requestData)\n            webSocketTask?.send(message) { error in\n                if let error = error {\n                    print(\"[error] Failed to send website status request: \\(error.localizedDescription)\")\n                } else {\n                    print(\"[status] Website status request sent.\")\n                }\n            }\n        }\n    }\n    \n    // Function to receive messages from the server\n    func receiveMessage() {\n        webSocketTask?.receive { result in\n            switch result {\n            case .success(let message):\n                switch message {\n                case .string(let text):\n                    if let data = text.data(using: .utf8),\n                       let json = try? JSONSerialization.jsonObject(with: data, options: []) as? [String: Any] {\n                        handleServerMessage(json)\n                    }\n                case .data(let data):\n                    print(\"[message] Binary data received: \\(data)\")\n                @unknown default:\n                    print(\"[message] Received unknown message type\")\n                }\n                \n                // Continue to receive messages\n                receiveMessage()\n                \n            case .failure(let error):\n                print(\"[error] Failed to receive message: \\(error.localizedDescription)\")\n            }\n        }\n    }\n    \n    // Function to handle the website status response from server\n    func handleServerMessage(_ data: [String: Any]) {\n        if let error = data[\"error\"] as? [String: Any], let message = error[\"message\"] as? String {\n            print(\"[Error] \\(message)\")\n        } else if data[\"msg_type\"] as? String == \"website_status\", let websiteStatus = data[\"website_status\"] as? [String: Any] {\n            let siteStatus = websiteStatus[\"site_status\"] as? String ?? \"Unknown\"\n            let supportedLanguages = websiteStatus[\"supported_languages\"] as? [String] ?? []\n            \n            print(\"[Website Status] Site Status: \\(siteStatus)\")\n            print(\"[Website Status] Supported Languages: \\(supportedLanguages.joined(separator: \", \"))\")\n        }\n    }\n    \n    // Send the website status request and start receiving messages\n    sendWebsiteStatusRequest()\n    receiveMessage()\n}\n\n// Function to close the WebSocket connection\nfunc closeWebSocketConnection() {\n    webSocketTask?.cancel(with: .normalClosure, reason: nil)\n    print(\"[close] Connection closed cleanly\")\n}\n\n// Start WebSocket connection\nconnectWebSocket()\n\n// Keep the program running to wait for messages\nRunLoop.main.run()\n\n/*\nInstructions to run the code:\n\n1. Ensure Swift is installed on your machine. You can use Xcode or install the Swift toolchain from https://swift.org/.\n2. Create a new Swift file (e.g., `WebSocketClient.swift`) and paste the code above.\n3. Open a terminal and navigate to the directory where the file is saved.\n4. Run the code with the following command:\n\n   swift WebSocketClient.swift\n\n5. The program will connect to the Deriv WebSocket API, request the website status, and print the site's operational status and supported languages.\n6. To stop the program, press `Ctrl+C` in the terminal.\n\nNote: Replace `app_id` with your actual app_id if required.\n*/"
        },
        {
          "language": "text",
          "content": "import Foundation\n\n// Make webSocketTask a global variable to keep the connection open\nvar webSocketTask: URLSessionWebSocketTask?\n\n// Function to create and handle WebSocket connection\nfunc connectWebSocket() {\n    let appID = app_id // Replace with your app_id.\n    let url = URL(string: \"wss://ws.derivws.com/websockets/v3?app_id=\\(appID)\")! // WebSocket URL with the app_id\n    let request = URLRequest(url: url)\n    \n    // Initialize webSocketTask with URLSession\n    webSocketTask = URLSession.shared.webSocketTask(with: request)\n    \n    // Start the WebSocket connection\n    webSocketTask?.resume()\n    print(\"[status] WebSocket connection established.\")\n    \n    // Function to send website status request\n    func sendWebsiteStatusRequest() {\n        let websiteStatusRequest = [\"website_status\": 1] as [String: Any]\n        \n        if let requestData = try? JSONSerialization.data(withJSONObject: websiteStatusRequest, options: []) {\n            let message = URLSessionWebSocketTask.Message.data(requestData)\n            webSocketTask?.send(message) { error in\n                if let error = error {\n                    print(\"[error] Failed to send website status request: \\(error.localizedDescription)\")\n                } else {\n                    print(\"[status] Website status request sent.\")\n                }\n            }\n        }\n    }\n    \n    // Function to receive messages from the server\n    func receiveMessage() {\n        webSocketTask?.receive { result in\n            switch result {\n            case .success(let message):\n                switch message {\n                case .string(let text):\n                    if let data = text.data(using: .utf8),\n                       let json = try? JSONSerialization.jsonObject(with: data, options: []) as? [String: Any] {\n                        handleServerMessage(json)\n                    }\n                case .data(let data):\n                    print(\"[message] Binary data received: \\(data)\")\n                @unknown default:\n                    print(\"[message] Received unknown message type\")\n                }\n                \n                // Continue to receive messages\n                receiveMessage()\n                \n            case .failure(let error):\n                print(\"[error] Failed to receive message: \\(error.localizedDescription)\")\n            }\n        }\n    }\n    \n    // Function to handle the website status response from server\n    func handleServerMessage(_ data: [String: Any]) {\n        if let error = data[\"error\"] as? [String: Any], let message = error[\"message\"] as? String {\n            print(\"[Error] \\(message)\")\n        } else if data[\"msg_type\"] as? String == \"website_status\", let websiteStatus = data[\"website_status\"] as? [String: Any] {\n            let siteStatus = websiteStatus[\"site_status\"] as? String ?? \"Unknown\"\n            let supportedLanguages = websiteStatus[\"supported_languages\"] as? [String] ?? []\n            \n            print(\"[Website Status] Site Status: \\(siteStatus)\")\n            print(\"[Website Status] Supported Languages: \\(supportedLanguages.joined(separator: \", \"))\")\n        }\n    }\n    \n    // Send the website status request and start receiving messages\n    sendWebsiteStatusRequest()\n    receiveMessage()\n}\n\n// Function to close the WebSocket connection\nfunc closeWebSocketConnection() {\n    webSocketTask?.cancel(with: .normalClosure, reason: nil)\n    print(\"[close] Connection closed cleanly\")\n}\n\n// Start WebSocket connection\nconnectWebSocket()\n\n// Keep the program running to wait for messages\nRunLoop.main.run()\n\n/*\nInstructions to run the code:\n\n1. Ensure Swift is installed on your machine. You can use Xcode or install the Swift toolchain from https://swift.org/.\n2. Create a new Swift file (e.g., `WebSocketClient.swift`) and paste the code above.\n3. Open a terminal and navigate to the directory where the file is saved.\n4. Run the code with the following command:\n\n   swift WebSocketClient.swift\n\n5. The program will connect to the Deriv WebSocket API, request the website status, and print the site's operational status and supported languages.\n6. To stop the program, press `Ctrl+C` in the terminal.\n\nNote: Replace `app_id` with your actual app_id if required.\n*/"
        },
        {
          "language": "text",
          "content": "using System;\nusing System.Net.WebSockets;\nusing System.Text;\nusing System.Text.Json;\nusing System.Threading;\nusing System.Threading.Tasks;\n\nclass WebSocketExample\n{\n    private static readonly Uri uri = new Uri(\"wss://ws.derivws.com/websockets/v3?app_id=app_id\"); // Replace with your app_id if needed\n\n    public static async Task Main(string[] args)\n    {\n        using (ClientWebSocket webSocket = new ClientWebSocket())\n        {\n            Console.WriteLine(\"Attempting to connect to WebSocket...\");\n\n            await webSocket.ConnectAsync(uri, CancellationToken.None);\n            Console.WriteLine(\"[status] WebSocket connection established.\");\n\n            // Send website status request\n            await SendWebsiteStatusRequest(webSocket);\n\n            // Handle responses from the server\n            await HandleResponses(webSocket);\n        }\n    }\n\n    private static async Task SendWebsiteStatusRequest(ClientWebSocket webSocket)\n    {\n        var websiteStatusRequest = new { website_status = 1 };\n\n        string requestJson = JsonSerializer.Serialize(websiteStatusRequest);\n        var bytes = Encoding.UTF8.GetBytes(requestJson);\n        await webSocket.SendAsync(new ArraySegment<byte>(bytes), WebSocketMessageType.Text, true, CancellationToken.None);\n        Console.WriteLine(\"[status] Website status request sent.\");\n    }\n\n private static async Task HandleResponses(ClientWebSocket webSocket)\n {\n     var buffer = new byte[8192]; // Increased buffer size\n\n     while (webSocket.State == WebSocketState.Open)\n     {\n         var result = await webSocket.ReceiveAsync(new ArraySegment<byte>(buffer), CancellationToken.None);\n\n         if (result.MessageType == WebSocketMessageType.Close)\n         {\n             Console.WriteLine(\"WebSocket connection closed by server.\");\n             await webSocket.CloseAsync(WebSocketCloseStatus.NormalClosure, \"Closing\", CancellationToken.None);\n         }\n         else\n         {\n             // Append received bytes to a string builder\n             var response = Encoding.UTF8.GetString(buffer, 0, result.Count);\n             var data = JsonDocument.Parse(response).RootElement;\n\n             // Check for \"error\" in the response\n             if (data.TryGetProperty(\"error\", out var error))\n             {\n                 Console.WriteLine($\"[Error] {error.GetProperty(\"message\").GetString()}\");\n                 await webSocket.CloseAsync(WebSocketCloseStatus.NormalClosure, \"Closing due to error\", CancellationToken.None);\n                 break;\n             }\n\n             // Process the \"msg_type\" property\n             if (data.TryGetProperty(\"msg_type\", out var msgType) && msgType.GetString() == \"website_status\")\n             {\n                 var websiteStatus = data.GetProperty(\"website_status\");\n                 Console.WriteLine(\"Site Status: \" + websiteStatus.GetProperty(\"site_status\").GetString());\n                 Console.WriteLine(\"Supported Languages: \" + websiteStatus.GetProperty(\"supported_languages\").ToString());\n             }\n         }\n     }\n }\n}\n\n/*\nInstructions to run the code locally:\n\n1. Ensure you have .NET SDK installed. You can download it from https://dotnet.microsoft.com/download.\n\n2. Save the code to a file named `WebSocketExample.cs`.\n\n3. Open a terminal in the directory containing `WebSocketExample.cs`.\n\n4. If using the .NET CLI, you can run the code with:\n   - `dotnet new console -o WebSocketExample` (if creating a new project)\n   - Move `WebSocketExample.cs` into the project directory `WebSocketExample`.\n   - Navigate to the project directory: `cd WebSocketExample`.\n   - Run `dotnet add package System.Net.WebSockets.Client` to add the WebSocket client dependency.\n   - Run the code: `dotnet run`.\n\n5. Alternatively, you can use an IDE like Visual Studio to create a console application, add the `System.Net.WebSockets.Client` package, and then run the application.\n\n6. Replace `app_id=1089` in the URL with your actual app_id if needed.\n*/"
        },
        {
          "language": "text",
          "content": "using System;\nusing System.Net.WebSockets;\nusing System.Text;\nusing System.Text.Json;\nusing System.Threading;\nusing System.Threading.Tasks;\n\nclass WebSocketExample\n{\n    private static readonly Uri uri = new Uri(\"wss://ws.derivws.com/websockets/v3?app_id=app_id\"); // Replace with your app_id if needed\n\n    public static async Task Main(string[] args)\n    {\n        using (ClientWebSocket webSocket = new ClientWebSocket())\n        {\n            Console.WriteLine(\"Attempting to connect to WebSocket...\");\n\n            await webSocket.ConnectAsync(uri, CancellationToken.None);\n            Console.WriteLine(\"[status] WebSocket connection established.\");\n\n            // Send website status request\n            await SendWebsiteStatusRequest(webSocket);\n\n            // Handle responses from the server\n            await HandleResponses(webSocket);\n        }\n    }\n\n    private static async Task SendWebsiteStatusRequest(ClientWebSocket webSocket)\n    {\n        var websiteStatusRequest = new { website_status = 1 };\n\n        string requestJson = JsonSerializer.Serialize(websiteStatusRequest);\n        var bytes = Encoding.UTF8.GetBytes(requestJson);\n        await webSocket.SendAsync(new ArraySegment<byte>(bytes), WebSocketMessageType.Text, true, CancellationToken.None);\n        Console.WriteLine(\"[status] Website status request sent.\");\n    }\n\n private static async Task HandleResponses(ClientWebSocket webSocket)\n {\n     var buffer = new byte[8192]; // Increased buffer size\n\n     while (webSocket.State == WebSocketState.Open)\n     {\n         var result = await webSocket.ReceiveAsync(new ArraySegment<byte>(buffer), CancellationToken.None);\n\n         if (result.MessageType == WebSocketMessageType.Close)\n         {\n             Console.WriteLine(\"WebSocket connection closed by server.\");\n             await webSocket.CloseAsync(WebSocketCloseStatus.NormalClosure, \"Closing\", CancellationToken.None);\n         }\n         else\n         {\n             // Append received bytes to a string builder\n             var response = Encoding.UTF8.GetString(buffer, 0, result.Count);\n             var data = JsonDocument.Parse(response).RootElement;\n\n             // Check for \"error\" in the response\n             if (data.TryGetProperty(\"error\", out var error))\n             {\n                 Console.WriteLine($\"[Error] {error.GetProperty(\"message\").GetString()}\");\n                 await webSocket.CloseAsync(WebSocketCloseStatus.NormalClosure, \"Closing due to error\", CancellationToken.None);\n                 break;\n             }\n\n             // Process the \"msg_type\" property\n             if (data.TryGetProperty(\"msg_type\", out var msgType) && msgType.GetString() == \"website_status\")\n             {\n                 var websiteStatus = data.GetProperty(\"website_status\");\n                 Console.WriteLine(\"Site Status: \" + websiteStatus.GetProperty(\"site_status\").GetString());\n                 Console.WriteLine(\"Supported Languages: \" + websiteStatus.GetProperty(\"supported_languages\").ToString());\n             }\n         }\n     }\n }\n}\n\n/*\nInstructions to run the code locally:\n\n1. Ensure you have .NET SDK installed. You can download it from https://dotnet.microsoft.com/download.\n\n2. Save the code to a file named `WebSocketExample.cs`.\n\n3. Open a terminal in the directory containing `WebSocketExample.cs`.\n\n4. If using the .NET CLI, you can run the code with:\n   - `dotnet new console -o WebSocketExample` (if creating a new project)\n   - Move `WebSocketExample.cs` into the project directory `WebSocketExample`.\n   - Navigate to the project directory: `cd WebSocketExample`.\n   - Run `dotnet add package System.Net.WebSockets.Client` to add the WebSocket client dependency.\n   - Run the code: `dotnet run`.\n\n5. Alternatively, you can use an IDE like Visual Studio to create a console application, add the `System.Net.WebSockets.Client` package, and then run the application.\n\n6. Replace `app_id=1089` in the URL with your actual app_id if needed.\n*/"
        },
        {
          "language": "text",
          "content": "#include <libwebsockets.h>\n#include <jansson.h>  // For JSON parsing\n#include <string.h>\n#include <signal.h>\n#include <time.h>\n#include <stdlib.h>\n\n// Set up WebSocket context and connection details\nstatic struct lws_context *context;\nstatic int interrupted = 0, port = 443, ssl_connection = LCCSCF_USE_SSL;\nstatic const char *server_address = \"ws.derivws.com\";\nstatic const char *path = \"/websockets/v3?app_id=app_id\";//replace with your app_id\nstatic const char *pro = \"lws-minimal-client\";\n\n// Interval for the ping in seconds\nstatic const int ping_interval = 30;\nstatic time_t last_ping_time = 0;\n\n// Buffer to accumulate received message fragments\nstatic char message_buffer[16384];\nstatic size_t message_length = 0;\n\n// Signal handler for graceful shutdown\nstatic void sigint_handler(int sig) {\n    interrupted = 1;\n}\n\n// Function to send a ping message\nvoid send_ping(struct lws *wsi) {\n    const char *ping_msg = \"{\\\"ping\\\": 1}\";\n    unsigned char buf[LWS_PRE + 20];\n    memcpy(&buf[LWS_PRE], ping_msg, strlen(ping_msg));\n    lws_write(wsi, &buf[LWS_PRE], strlen(ping_msg), LWS_WRITE_TEXT);\n    lwsl_user(\"Ping sent\\n\");\n}\n\n// Function to send a website status request\nvoid send_website_status_request(struct lws *wsi) {\n    const char *website_status_msg = \"{\\\"website_status\\\": 1}\";\n    unsigned char buf[LWS_PRE + 128];\n    memcpy(&buf[LWS_PRE], website_status_msg, strlen(website_status_msg));\n    lws_write(wsi, &buf[LWS_PRE], strlen(website_status_msg), LWS_WRITE_TEXT);\n    lwsl_user(\"Website status request sent\\n\");\n}\n\n// Function to check if JSON is complete based on braces balance\nint is_json_complete(const char *json) {\n    int brace_count = 0;\n    for (size_t i = 0; json[i] != '\\0'; i++) {\n        if (json[i] == '{') brace_count++;\n        else if (json[i] == '}') brace_count--;\n    }\n    return brace_count == 0;\n}\n\n// Function to handle the JSON response once fully received\nstatic void handle_website_status_response(const char *response) {\n    json_t *root;\n    json_error_t error;\n\n    // Parse the JSON response\n    root = json_loads(response, 0, &error);\n    if (!root) {\n        printf(\"Error parsing JSON: %s at line %d, column %d\\n\", error.text, error.line, error.column);\n        return;\n    }\n\n    // Check if the response contains an error\n    json_t *error_obj = json_object_get(root, \"error\");\n    if (error_obj) {\n        const char *error_message = json_string_value(json_object_get(error_obj, \"message\"));\n        printf(\"Error: %s\\n\", error_message);\n        json_decref(root);\n        return;\n    }\n\n    // Check if the message type is \"website_status\"\n    const char *msg_type = json_string_value(json_object_get(root, \"msg_type\"));\n    if (msg_type && strcmp(msg_type, \"website_status\") == 0) {\n        json_t *website_status = json_object_get(root, \"website_status\");\n        if (website_status) {\n            const char *site_status = json_string_value(json_object_get(website_status, \"site_status\"));\n            printf(\"Website Status: %s\\n\", site_status);\n        }\n    } else if (msg_type && strcmp(msg_type, \"ping\") == 0) {\n        printf(\"Ping response received.\\n\");\n    }\n\n    json_decref(root);\n}\n\n// Callback function for WebSocket events\nstatic int callback_minimal(struct lws *wsi, enum lws_callback_reasons reason,\n                            void *user, void *in, size_t len) {\n    switch (reason) {\n    case LWS_CALLBACK_CLIENT_CONNECTION_ERROR:\n        lwsl_err(\"CLIENT_CONNECTION_ERROR: %s\\n\", in ? (char *)in : \"(null)\");\n        interrupted = 1;\n        break;\n\n    case LWS_CALLBACK_CLIENT_ESTABLISHED:\n        lwsl_user(\"Connection established\\n\");\n        send_website_status_request(wsi);  // Send website status request on connection\n        lws_callback_on_writable(wsi); // Request writable callback\n        break;\n\n    case LWS_CALLBACK_CLIENT_WRITEABLE:\n        if (time(NULL) - last_ping_time >= ping_interval) {\n            send_ping(wsi);  // Send periodic ping\n            last_ping_time = time(NULL);\n            send_website_status_request(wsi);  // Periodically request website status\n        }\n        break;\n\n    case LWS_CALLBACK_CLIENT_RECEIVE:\n        // Accumulate incoming message chunks into the buffer\n        if (message_length + len < sizeof(message_buffer) - 1) {\n            memcpy(&message_buffer[message_length], in, len);\n            message_length += len;\n            message_buffer[message_length] = '\\0';  // Null-terminate\n\n            // Check if we have a complete JSON message\n            if (is_json_complete(message_buffer)) {\n                printf(\"Received complete JSON message: %s\\n\", message_buffer);\n                handle_website_status_response(message_buffer); // Process JSON response\n                message_length = 0;  // Reset the buffer after parsing\n            }\n        } else {\n            printf(\"Warning: Message buffer overflow. Clearing buffer.\\n\");\n            message_length = 0;  // Clear the buffer on overflow\n        }\n        break;\n\n    case LWS_CALLBACK_CLIENT_CLOSED:\n        lwsl_user(\"Connection closed\\n\");\n        interrupted = 1;\n        break;\n\n    default:\n        break;\n    }\n\n    return 0;\n}\n\n// Define supported protocols for the WebSocket\nstatic const struct lws_protocols protocols[] = {\n    { \"lws-minimal-client\", callback_minimal, 0, 0, 0, NULL, 0 },\n    LWS_PROTOCOL_LIST_TERM\n};\n\n// Main function to set up and manage the WebSocket client\nint main(int argc, const char **argv) {\n    struct lws_context_creation_info info;\n    struct lws_client_connect_info i;\n\n    // Handle Ctrl+C interrupt for graceful shutdown\n    signal(SIGINT, sigint_handler);\n    memset(&info, 0, sizeof info);\n    memset(&i, 0, sizeof(i));\n\n    lwsl_user(\"Initializing Deriv WebSocket client...\\n\");\n\n    info.options = LWS_SERVER_OPTION_DO_SSL_GLOBAL_INIT;\n    info.port = CONTEXT_PORT_NO_LISTEN;\n    info.protocols = protocols;\n    info.fd_limit_per_thread = 1 + 1 + 1;\n\n    context = lws_create_context(&info);\n    if (!context) {\n        lwsl_err(\"lws init failed\\n\");\n        return 1;\n    }\n\n    i.context = context;\n    i.port = port;\n    i.address = server_address;\n    i.path = path;\n    i.host = i.address;\n    i.origin = i.address;\n    i.ssl_connection = ssl_connection;\n    i.protocol = pro;\n    i.local_protocol_name = \"lws-minimal-client\";\n\n    if (!lws_client_connect_via_info(&i)) {\n        lwsl_err(\"Failed to initiate connection\\n\");\n        return 1;\n    }\n\n    // Run the WebSocket client event loop\n    while (!interrupted)\n        lws_service(context, 0);\n\n    lws_context_destroy(context);\n    lwsl_user(\"WebSocket client terminated.\\n\");\n\n    return 0;\n}\n\n/*\n * Instructions:\n * 1. Install the required libraries if they are not already installed:\n *    - On Ubuntu:\n *        sudo apt-get install libwebsockets-dev libjansson-dev\n *    - On macOS:\n *        brew install libwebsockets jansson\n * 2. Compile the code using the following command:\n *      gcc -o connect connect.c -lwebsockets -ljansson -lssl -lcrypto -lm\n * 3. Run the compiled executable:\n *      ./connect\n * 4. Ensure you have internet connectivity as the WebSocket will attempt to connect to `ws.derivws.com`.\n * 5. Replace \"app_id=1089\" in the `path` variable with your actual app_id if required.\n */"
        },
        {
          "language": "text",
          "content": "#include <libwebsockets.h>\n#include <jansson.h>  // For JSON parsing\n#include <string.h>\n#include <signal.h>\n#include <time.h>\n#include <stdlib.h>\n\n// Set up WebSocket context and connection details\nstatic struct lws_context *context;\nstatic int interrupted = 0, port = 443, ssl_connection = LCCSCF_USE_SSL;\nstatic const char *server_address = \"ws.derivws.com\";\nstatic const char *path = \"/websockets/v3?app_id=app_id\";//replace with your app_id\nstatic const char *pro = \"lws-minimal-client\";\n\n// Interval for the ping in seconds\nstatic const int ping_interval = 30;\nstatic time_t last_ping_time = 0;\n\n// Buffer to accumulate received message fragments\nstatic char message_buffer[16384];\nstatic size_t message_length = 0;\n\n// Signal handler for graceful shutdown\nstatic void sigint_handler(int sig) {\n    interrupted = 1;\n}\n\n// Function to send a ping message\nvoid send_ping(struct lws *wsi) {\n    const char *ping_msg = \"{\\\"ping\\\": 1}\";\n    unsigned char buf[LWS_PRE + 20];\n    memcpy(&buf[LWS_PRE], ping_msg, strlen(ping_msg));\n    lws_write(wsi, &buf[LWS_PRE], strlen(ping_msg), LWS_WRITE_TEXT);\n    lwsl_user(\"Ping sent\\n\");\n}\n\n// Function to send a website status request\nvoid send_website_status_request(struct lws *wsi) {\n    const char *website_status_msg = \"{\\\"website_status\\\": 1}\";\n    unsigned char buf[LWS_PRE + 128];\n    memcpy(&buf[LWS_PRE], website_status_msg, strlen(website_status_msg));\n    lws_write(wsi, &buf[LWS_PRE], strlen(website_status_msg), LWS_WRITE_TEXT);\n    lwsl_user(\"Website status request sent\\n\");\n}\n\n// Function to check if JSON is complete based on braces balance\nint is_json_complete(const char *json) {\n    int brace_count = 0;\n    for (size_t i = 0; json[i] != '\\0'; i++) {\n        if (json[i] == '{') brace_count++;\n        else if (json[i] == '}') brace_count--;\n    }\n    return brace_count == 0;\n}\n\n// Function to handle the JSON response once fully received\nstatic void handle_website_status_response(const char *response) {\n    json_t *root;\n    json_error_t error;\n\n    // Parse the JSON response\n    root = json_loads(response, 0, &error);\n    if (!root) {\n        printf(\"Error parsing JSON: %s at line %d, column %d\\n\", error.text, error.line, error.column);\n        return;\n    }\n\n    // Check if the response contains an error\n    json_t *error_obj = json_object_get(root, \"error\");\n    if (error_obj) {\n        const char *error_message = json_string_value(json_object_get(error_obj, \"message\"));\n        printf(\"Error: %s\\n\", error_message);\n        json_decref(root);\n        return;\n    }\n\n    // Check if the message type is \"website_status\"\n    const char *msg_type = json_string_value(json_object_get(root, \"msg_type\"));\n    if (msg_type && strcmp(msg_type, \"website_status\") == 0) {\n        json_t *website_status = json_object_get(root, \"website_status\");\n        if (website_status) {\n            const char *site_status = json_string_value(json_object_get(website_status, \"site_status\"));\n            printf(\"Website Status: %s\\n\", site_status);\n        }\n    } else if (msg_type && strcmp(msg_type, \"ping\") == 0) {\n        printf(\"Ping response received.\\n\");\n    }\n\n    json_decref(root);\n}\n\n// Callback function for WebSocket events\nstatic int callback_minimal(struct lws *wsi, enum lws_callback_reasons reason,\n                            void *user, void *in, size_t len) {\n    switch (reason) {\n    case LWS_CALLBACK_CLIENT_CONNECTION_ERROR:\n        lwsl_err(\"CLIENT_CONNECTION_ERROR: %s\\n\", in ? (char *)in : \"(null)\");\n        interrupted = 1;\n        break;\n\n    case LWS_CALLBACK_CLIENT_ESTABLISHED:\n        lwsl_user(\"Connection established\\n\");\n        send_website_status_request(wsi);  // Send website status request on connection\n        lws_callback_on_writable(wsi); // Request writable callback\n        break;\n\n    case LWS_CALLBACK_CLIENT_WRITEABLE:\n        if (time(NULL) - last_ping_time >= ping_interval) {\n            send_ping(wsi);  // Send periodic ping\n            last_ping_time = time(NULL);\n            send_website_status_request(wsi);  // Periodically request website status\n        }\n        break;\n\n    case LWS_CALLBACK_CLIENT_RECEIVE:\n        // Accumulate incoming message chunks into the buffer\n        if (message_length + len < sizeof(message_buffer) - 1) {\n            memcpy(&message_buffer[message_length], in, len);\n            message_length += len;\n            message_buffer[message_length] = '\\0';  // Null-terminate\n\n            // Check if we have a complete JSON message\n            if (is_json_complete(message_buffer)) {\n                printf(\"Received complete JSON message: %s\\n\", message_buffer);\n                handle_website_status_response(message_buffer); // Process JSON response\n                message_length = 0;  // Reset the buffer after parsing\n            }\n        } else {\n            printf(\"Warning: Message buffer overflow. Clearing buffer.\\n\");\n            message_length = 0;  // Clear the buffer on overflow\n        }\n        break;\n\n    case LWS_CALLBACK_CLIENT_CLOSED:\n        lwsl_user(\"Connection closed\\n\");\n        interrupted = 1;\n        break;\n\n    default:\n        break;\n    }\n\n    return 0;\n}\n\n// Define supported protocols for the WebSocket\nstatic const struct lws_protocols protocols[] = {\n    { \"lws-minimal-client\", callback_minimal, 0, 0, 0, NULL, 0 },\n    LWS_PROTOCOL_LIST_TERM\n};\n\n// Main function to set up and manage the WebSocket client\nint main(int argc, const char **argv) {\n    struct lws_context_creation_info info;\n    struct lws_client_connect_info i;\n\n    // Handle Ctrl+C interrupt for graceful shutdown\n    signal(SIGINT, sigint_handler);\n    memset(&info, 0, sizeof info);\n    memset(&i, 0, sizeof(i));\n\n    lwsl_user(\"Initializing Deriv WebSocket client...\\n\");\n\n    info.options = LWS_SERVER_OPTION_DO_SSL_GLOBAL_INIT;\n    info.port = CONTEXT_PORT_NO_LISTEN;\n    info.protocols = protocols;\n    info.fd_limit_per_thread = 1 + 1 + 1;\n\n    context = lws_create_context(&info);\n    if (!context) {\n        lwsl_err(\"lws init failed\\n\");\n        return 1;\n    }\n\n    i.context = context;\n    i.port = port;\n    i.address = server_address;\n    i.path = path;\n    i.host = i.address;\n    i.origin = i.address;\n    i.ssl_connection = ssl_connection;\n    i.protocol = pro;\n    i.local_protocol_name = \"lws-minimal-client\";\n\n    if (!lws_client_connect_via_info(&i)) {\n        lwsl_err(\"Failed to initiate connection\\n\");\n        return 1;\n    }\n\n    // Run the WebSocket client event loop\n    while (!interrupted)\n        lws_service(context, 0);\n\n    lws_context_destroy(context);\n    lwsl_user(\"WebSocket client terminated.\\n\");\n\n    return 0;\n}\n\n/*\n * Instructions:\n * 1. Install the required libraries if they are not already installed:\n *    - On Ubuntu:\n *        sudo apt-get install libwebsockets-dev libjansson-dev\n *    - On macOS:\n *        brew install libwebsockets jansson\n * 2. Compile the code using the following command:\n *      gcc -o connect connect.c -lwebsockets -ljansson -lssl -lcrypto -lm\n * 3. Run the compiled executable:\n *      ./connect\n * 4. Ensure you have internet connectivity as the WebSocket will attempt to connect to `ws.derivws.com`.\n * 5. Replace \"app_id=1089\" in the `path` variable with your actual app_id if required.\n */"
        }
      ],
      "tables": [],
      "links": []
    },
    "Get contracts for a symbol": {
      "title": "Get list of currently active contract symbols | Deriv API",
      "url": "https://developers.deriv.com/docs/get-contracts-for-a-symbol",
      "mainContent": "Follow these steps to retrieve the list of available contracts, along with the latest barrier and duration limits for each contract, for a given symbol using the Deriv API:\n\nImport Deriv API: Import the DerivAPIBasic library from Skypack CDN.\nWebSocket connection: Create a WebSocket connection to the Deriv API using your app_id.\nAPI initialization: Initialize the DerivAPIBasic instance with the WebSocket connection.\nRequest object: Define a request object to fetch contracts for a specific symbol (e.g., R_50).\nResponse handling: Handle the API response:\nParse the data and log any errors.\nIf the response contains contract data, log it.\nRemove the event listener after the response is received.\nTrigger request: On a button click, the function sends the request to the API to get the contracts for the symbol.\nJavaScript\nJava\nPerl\nPHP\nPython\nRust\nSwift\nC\nC#\nGo\n// Import DerivAPIBasic from the Deriv API package\nimport DerivAPIBasic from '@deriv/deriv-api/dist/DerivAPIBasic.js';\n\n// Set the app ID for API authentication. Use 1089 for testing or replace it with your app's ID.\nconst app_id = app_id;\n\n// Create a WebSocket connection to the Deriv server using the app_id for authentication\nconst connection = new WebSocket(`wss://ws.derivws.com/websockets/v3?app_id=${app_id}`);\n\n// Initialize the API using the WebSocket connection\nconst api = new DerivAPIBasic({ connection });\n\n// Function to handle the contracts for symbol response\nconst handleContractsForSymbolResponse = async (response) => {\n  const data = JSON.parse(response.data);\n\n  // Check for errors in the response\n  if (data.error) {\n    console.error('Error:', data.error.message);\n    await api.disconnect();\n    return;\n  }\n\n  // If the message type is 'contracts_for', log the contracts information\n  if (data.msg_type === 'contracts_for') {\n    const contractsInfo = data.contracts_for;\n    console.log('Contracts for Symbol:', contractsInfo);\n  }\n\n  // Remove the event listener after processing the response\n  connection.removeEventListener('message', handleContractsForSymbolResponse);\n};\n\n// Function to request contracts for a specific symbol\nconst getContractsForSymbol = async () => {\n  const contracts_for_symbol_request = {\n    contracts_for: 'R_50',   // Specify the symbol\n    currency: 'USD',\n    landing_company: 'svg',\n    product_type: 'basic',\n  };\n\n  connection.addEventListener('message', handleContractsForSymbolResponse); // Add event listener\n  await api.contractsFor(contracts_for_symbol_request); // Send the contracts request\n};\n\n// Check if running in a browser or Node.js environment\nif (typeof document !== 'undefined') {\n  // Add a button event listener in the browser environment\n  const contracts_for_symbol_button = document.querySelector('#contractsForSymbol');\n  if (contracts_for_symbol_button) {\n    contracts_for_symbol_button.addEventListener('click', getContractsForSymbol);\n  }\n} else {\n  // If running in Node.js, directly call the function\n  getContractsForSymbol();\n}\n\n/*\n * Instructions to Run the Code on a Local Machine:\n * 1. Ensure Node.js is installed on your machine. Download it from https://nodejs.org/ if needed.\n * 2. Install required dependencies:\n *      - Run: `npm install @deriv/deriv-api ws`\n * 3. Save this code to a file, e.g., `contracts_for_symbol.js`.\n * 4. Open a terminal and navigate to the directory where the file is saved.\n * 5. Run the code using Node.js:\n *      - Run: `node contracts_for_symbol.js`\n *\n * In a browser environment:\n * - Save this code to a JavaScript file and link it to an HTML page with a button element:\n *   `<button id=\"contractsForSymbol\">Get Contracts for Symbol</button>`\n * - Open the HTML file in a browser, and click the button to retrieve contracts for the symbol.\n */\n\n\nUpdated 9 months ago\n\nDid this page help you?\nYes\nNo",
      "headings": [],
      "codeBlocks": [
        {
          "language": "text",
          "content": "DerivAPIBasic"
        },
        {
          "language": "text",
          "content": "app_id"
        },
        {
          "language": "text",
          "content": "DerivAPIBasic"
        },
        {
          "language": "text",
          "content": "R_50"
        },
        {
          "language": "text",
          "content": "// Import DerivAPIBasic from the Deriv API package\nimport DerivAPIBasic from '@deriv/deriv-api/dist/DerivAPIBasic.js';\n\n// Set the app ID for API authentication. Use 1089 for testing or replace it with your app's ID.\nconst app_id = app_id;\n\n// Create a WebSocket connection to the Deriv server using the app_id for authentication\nconst connection = new WebSocket(`wss://ws.derivws.com/websockets/v3?app_id=${app_id}`);\n\n// Initialize the API using the WebSocket connection\nconst api = new DerivAPIBasic({ connection });\n\n// Function to handle the contracts for symbol response\nconst handleContractsForSymbolResponse = async (response) => {\n  const data = JSON.parse(response.data);\n\n  // Check for errors in the response\n  if (data.error) {\n    console.error('Error:', data.error.message);\n    await api.disconnect();\n    return;\n  }\n\n  // If the message type is 'contracts_for', log the contracts information\n  if (data.msg_type === 'contracts_for') {\n    const contractsInfo = data.contracts_for;\n    console.log('Contracts for Symbol:', contractsInfo);\n  }\n\n  // Remove the event listener after processing the response\n  connection.removeEventListener('message', handleContractsForSymbolResponse);\n};\n\n// Function to request contracts for a specific symbol\nconst getContractsForSymbol = async () => {\n  const contracts_for_symbol_request = {\n    contracts_for: 'R_50',   // Specify the symbol\n    currency: 'USD',\n    landing_company: 'svg',\n    product_type: 'basic',\n  };\n\n  connection.addEventListener('message', handleContractsForSymbolResponse); // Add event listener\n  await api.contractsFor(contracts_for_symbol_request); // Send the contracts request\n};\n\n// Check if running in a browser or Node.js environment\nif (typeof document !== 'undefined') {\n  // Add a button event listener in the browser environment\n  const contracts_for_symbol_button = document.querySelector('#contractsForSymbol');\n  if (contracts_for_symbol_button) {\n    contracts_for_symbol_button.addEventListener('click', getContractsForSymbol);\n  }\n} else {\n  // If running in Node.js, directly call the function\n  getContractsForSymbol();\n}\n\n/*\n * Instructions to Run the Code on a Local Machine:\n * 1. Ensure Node.js is installed on your machine. Download it from https://nodejs.org/ if needed.\n * 2. Install required dependencies:\n *      - Run: `npm install @deriv/deriv-api ws`\n * 3. Save this code to a file, e.g., `contracts_for_symbol.js`.\n * 4. Open a terminal and navigate to the directory where the file is saved.\n * 5. Run the code using Node.js:\n *      - Run: `node contracts_for_symbol.js`\n *\n * In a browser environment:\n * - Save this code to a JavaScript file and link it to an HTML page with a button element:\n *   `<button id=\"contractsForSymbol\">Get Contracts for Symbol</button>`\n * - Open the HTML file in a browser, and click the button to retrieve contracts for the symbol.\n */"
        },
        {
          "language": "text",
          "content": "// Import DerivAPIBasic from the Deriv API package\nimport DerivAPIBasic from '@deriv/deriv-api/dist/DerivAPIBasic.js';\n\n// Set the app ID for API authentication. Use 1089 for testing or replace it with your app's ID.\nconst app_id = app_id;\n\n// Create a WebSocket connection to the Deriv server using the app_id for authentication\nconst connection = new WebSocket(`wss://ws.derivws.com/websockets/v3?app_id=${app_id}`);\n\n// Initialize the API using the WebSocket connection\nconst api = new DerivAPIBasic({ connection });\n\n// Function to handle the contracts for symbol response\nconst handleContractsForSymbolResponse = async (response) => {\n  const data = JSON.parse(response.data);\n\n  // Check for errors in the response\n  if (data.error) {\n    console.error('Error:', data.error.message);\n    await api.disconnect();\n    return;\n  }\n\n  // If the message type is 'contracts_for', log the contracts information\n  if (data.msg_type === 'contracts_for') {\n    const contractsInfo = data.contracts_for;\n    console.log('Contracts for Symbol:', contractsInfo);\n  }\n\n  // Remove the event listener after processing the response\n  connection.removeEventListener('message', handleContractsForSymbolResponse);\n};\n\n// Function to request contracts for a specific symbol\nconst getContractsForSymbol = async () => {\n  const contracts_for_symbol_request = {\n    contracts_for: 'R_50',   // Specify the symbol\n    currency: 'USD',\n    landing_company: 'svg',\n    product_type: 'basic',\n  };\n\n  connection.addEventListener('message', handleContractsForSymbolResponse); // Add event listener\n  await api.contractsFor(contracts_for_symbol_request); // Send the contracts request\n};\n\n// Check if running in a browser or Node.js environment\nif (typeof document !== 'undefined') {\n  // Add a button event listener in the browser environment\n  const contracts_for_symbol_button = document.querySelector('#contractsForSymbol');\n  if (contracts_for_symbol_button) {\n    contracts_for_symbol_button.addEventListener('click', getContractsForSymbol);\n  }\n} else {\n  // If running in Node.js, directly call the function\n  getContractsForSymbol();\n}\n\n/*\n * Instructions to Run the Code on a Local Machine:\n * 1. Ensure Node.js is installed on your machine. Download it from https://nodejs.org/ if needed.\n * 2. Install required dependencies:\n *      - Run: `npm install @deriv/deriv-api ws`\n * 3. Save this code to a file, e.g., `contracts_for_symbol.js`.\n * 4. Open a terminal and navigate to the directory where the file is saved.\n * 5. Run the code using Node.js:\n *      - Run: `node contracts_for_symbol.js`\n *\n * In a browser environment:\n * - Save this code to a JavaScript file and link it to an HTML page with a button element:\n *   `<button id=\"contractsForSymbol\">Get Contracts for Symbol</button>`\n * - Open the HTML file in a browser, and click the button to retrieve contracts for the symbol.\n */"
        },
        {
          "language": "text",
          "content": "package src.main.java;\n\nimport org.java_websocket.client.WebSocketClient;\nimport org.java_websocket.handshake.ServerHandshake;\nimport java.net.URI;\nimport java.net.URISyntaxException;\nimport java.util.Timer;\nimport java.util.TimerTask;\nimport com.google.gson.JsonObject;\n\npublic class WebSocketExample {\n\n    public static void main(String[] args) {\n        try {\n            // Replace with your app_id\n            int app_id = app_id;\n            String serverUri = \"wss://ws.derivws.com/websockets/v3?app_id=\" + app_id;\n\n            // Initialize the WebSocket client\n            WebSocketClient client = new WebSocketClient(new URI(serverUri)) {\n\n                @Override\n                public void onOpen(ServerHandshake handshakedata) {\n                    System.out.println(\"[open] Connection established\");\n\n                    // Send contracts for symbol request\n                    JsonObject contractsForSymbolRequest = new JsonObject();\n                    contractsForSymbolRequest.addProperty(\"contracts_for\", \"R_50\"); // Specify symbol here\n                    contractsForSymbolRequest.addProperty(\"currency\", \"USD\");\n                    contractsForSymbolRequest.addProperty(\"landing_company\", \"svg\");\n                    contractsForSymbolRequest.addProperty(\"product_type\", \"basic\");\n                    send(contractsForSymbolRequest.toString());\n                    System.out.println(\"[sent] Contracts for symbol request sent\");\n\n                    // Schedule a ping every 30 seconds\n                    Timer timer = new Timer();\n                    timer.scheduleAtFixedRate(new TimerTask() {\n                        @Override\n                        public void run() {\n                            JsonObject pingMessage = new JsonObject();\n                            pingMessage.addProperty(\"ping\", 1);\n                            send(pingMessage.toString());\n                            System.out.println(\"[ping] Ping sent to keep connection alive\");\n                        }\n                    }, 0, 30000);\n                }\n\n                @Override\n                public void onMessage(String message) {\n                    System.out.println(\"[message] Received: \" + message);\n\n                    JsonObject data = new com.google.gson.JsonParser().parse(message).getAsJsonObject();\n                    if (data.has(\"error\")) {\n                        System.out.println(\"[error] \" + data.getAsJsonObject(\"error\").get(\"message\").getAsString());\n                    } else if (\"contracts_for\".equals(data.get(\"msg_type\").getAsString())) {\n                        JsonObject contractsFor = data.getAsJsonObject(\"contracts_for\");\n                        System.out.println(\"Contracts for Symbol: \" + contractsFor);\n                    } else if (\"ping\".equals(data.get(\"msg_type\").getAsString())) {\n                        System.out.println(\"[ping] Ping response received.\");\n                    }\n                }\n\n                @Override\n                public void onClose(int code, String reason, boolean remote) {\n                    System.out.println(\"[close] Connection closed by \" + (remote ? \"server\" : \"client\") + \": \" + reason);\n                }\n\n                @Override\n                public void onError(Exception ex) {\n                    System.out.println(\"[error] \" + ex.getMessage());\n                }\n            };\n\n            client.connect();\n\n        } catch (URISyntaxException e) {\n            System.out.println(\"[error] Invalid URI: \" + e.getMessage());\n        }\n    }\n}\n\n/*\nInstructions to run the code:\n\n1. Ensure that Java is installed on your machine. You can download it from https://www.oracle.com/java/technologies/javase-jdk11-downloads.html.\n2. Add the following dependencies to your project:\n   - `java-websocket` for WebSocket functionality\n   - `gson` for JSON handling\n\n   If you are using Maven, add these dependencies to your `pom.xml`:\n\n   <dependency>\n       <groupId>org.java-websocket</groupId>\n       <artifactId>Java-WebSocket</artifactId>\n       <version>1.5.2</version>\n   </dependency>\n   <dependency>\n       <groupId>com.google.code.gson</groupId>\n       <artifactId>gson</artifactId>\n       <version>2.8.8</version>\n   </dependency>\n\n3. Compile the code:\n   javac WebSocketExample.java\n\n4. Run the code:\n   java WebSocketExample\n\nNote: Replace `app_id` with your actual app_id if needed.\n */"
        },
        {
          "language": "text",
          "content": "package src.main.java;\n\nimport org.java_websocket.client.WebSocketClient;\nimport org.java_websocket.handshake.ServerHandshake;\nimport java.net.URI;\nimport java.net.URISyntaxException;\nimport java.util.Timer;\nimport java.util.TimerTask;\nimport com.google.gson.JsonObject;\n\npublic class WebSocketExample {\n\n    public static void main(String[] args) {\n        try {\n            // Replace with your app_id\n            int app_id = app_id;\n            String serverUri = \"wss://ws.derivws.com/websockets/v3?app_id=\" + app_id;\n\n            // Initialize the WebSocket client\n            WebSocketClient client = new WebSocketClient(new URI(serverUri)) {\n\n                @Override\n                public void onOpen(ServerHandshake handshakedata) {\n                    System.out.println(\"[open] Connection established\");\n\n                    // Send contracts for symbol request\n                    JsonObject contractsForSymbolRequest = new JsonObject();\n                    contractsForSymbolRequest.addProperty(\"contracts_for\", \"R_50\"); // Specify symbol here\n                    contractsForSymbolRequest.addProperty(\"currency\", \"USD\");\n                    contractsForSymbolRequest.addProperty(\"landing_company\", \"svg\");\n                    contractsForSymbolRequest.addProperty(\"product_type\", \"basic\");\n                    send(contractsForSymbolRequest.toString());\n                    System.out.println(\"[sent] Contracts for symbol request sent\");\n\n                    // Schedule a ping every 30 seconds\n                    Timer timer = new Timer();\n                    timer.scheduleAtFixedRate(new TimerTask() {\n                        @Override\n                        public void run() {\n                            JsonObject pingMessage = new JsonObject();\n                            pingMessage.addProperty(\"ping\", 1);\n                            send(pingMessage.toString());\n                            System.out.println(\"[ping] Ping sent to keep connection alive\");\n                        }\n                    }, 0, 30000);\n                }\n\n                @Override\n                public void onMessage(String message) {\n                    System.out.println(\"[message] Received: \" + message);\n\n                    JsonObject data = new com.google.gson.JsonParser().parse(message).getAsJsonObject();\n                    if (data.has(\"error\")) {\n                        System.out.println(\"[error] \" + data.getAsJsonObject(\"error\").get(\"message\").getAsString());\n                    } else if (\"contracts_for\".equals(data.get(\"msg_type\").getAsString())) {\n                        JsonObject contractsFor = data.getAsJsonObject(\"contracts_for\");\n                        System.out.println(\"Contracts for Symbol: \" + contractsFor);\n                    } else if (\"ping\".equals(data.get(\"msg_type\").getAsString())) {\n                        System.out.println(\"[ping] Ping response received.\");\n                    }\n                }\n\n                @Override\n                public void onClose(int code, String reason, boolean remote) {\n                    System.out.println(\"[close] Connection closed by \" + (remote ? \"server\" : \"client\") + \": \" + reason);\n                }\n\n                @Override\n                public void onError(Exception ex) {\n                    System.out.println(\"[error] \" + ex.getMessage());\n                }\n            };\n\n            client.connect();\n\n        } catch (URISyntaxException e) {\n            System.out.println(\"[error] Invalid URI: \" + e.getMessage());\n        }\n    }\n}\n\n/*\nInstructions to run the code:\n\n1. Ensure that Java is installed on your machine. You can download it from https://www.oracle.com/java/technologies/javase-jdk11-downloads.html.\n2. Add the following dependencies to your project:\n   - `java-websocket` for WebSocket functionality\n   - `gson` for JSON handling\n\n   If you are using Maven, add these dependencies to your `pom.xml`:\n\n   <dependency>\n       <groupId>org.java-websocket</groupId>\n       <artifactId>Java-WebSocket</artifactId>\n       <version>1.5.2</version>\n   </dependency>\n   <dependency>\n       <groupId>com.google.code.gson</groupId>\n       <artifactId>gson</artifactId>\n       <version>2.8.8</version>\n   </dependency>\n\n3. Compile the code:\n   javac WebSocketExample.java\n\n4. Run the code:\n   java WebSocketExample\n\nNote: Replace `app_id` with your actual app_id if needed.\n */"
        },
        {
          "language": "text",
          "content": "#!/usr/bin/env perl\nuse strict;\nuse warnings;\nuse v5.014;\nuse AnyEvent;\nuse AnyEvent::WebSocket::Client;\nuse JSON;\n\n# WebSocket URL and app_id\nmy $app_id = app_id;\nmy $url = \"wss://ws.derivws.com/websockets/v3?app_id=$app_id\";\n\n# Create WebSocket client and connection\nmy $client = AnyEvent::WebSocket::Client->new;\n$| = 1;  # Flush output immediately for real-time logging\n\n# Function to send a contracts for symbol request\nsub send_contracts_for_symbol {\n    my $connection = shift;\n    my $contracts_for_request = encode_json({\n        contracts_for => 'R_50',    # Symbol for which contracts are requested\n        currency => 'USD',          # Set currency to USD\n        landing_company => 'svg',   # Landing company (e.g., svg)\n        product_type => 'basic'     # Product type is set to 'basic'\n    });\n    $connection->send($contracts_for_request);\n    say \"[request] Contracts for symbol request sent.\";\n}\n\n# Establish WebSocket connection\n$client->connect($url)->cb(sub {\n    my $connection = eval { shift->recv };\n    if (!$connection) {\n        die \"Connection error: $@\";\n    }\n    say \"[status] WebSocket connection established.\";\n\n    # Send the contracts for symbol request\n    send_contracts_for_symbol($connection);\n\n    # Set a timeout for receiving a response\n    my $timeout = AnyEvent->timer(\n        after => 10,\n        cb    => sub {\n            say \"[error] No response received within 10 seconds. Closing connection.\";\n            $connection->close;\n        }\n    );\n\n    # Handle incoming messages\n    $connection->on(each_message => sub {\n        my ($connection, $message) = @_;\n\n        # Cancel timeout upon receiving a message\n        undef $timeout;\n\n        my $data = eval { decode_json($message->body) };\n        if ($@) {\n            say \"[error] Failed to decode JSON: $@\";\n            return;\n        }\n\n        # Handle errors\n        if ($data->{error}) {\n            say \"[error] \" . $data->{error}{message};\n            $connection->close;\n            return;\n        }\n\n        # Process contracts_for response\n        if ($data->{msg_type} && $data->{msg_type} eq 'contracts_for') {\n            say \"[contracts] Contracts for Symbol (R_50):\";\n            foreach my $contract (@{$data->{contracts_for}{available}}) {\n                my $contract_type            = $contract->{contract_type} // \"N/A\";\n                my $contract_display         = $contract->{contract_display} // \"N/A\";\n                my $contract_category_display = $contract->{contract_category_display} // \"N/A\";\n                my $market                   = $contract->{market} // \"N/A\";\n                my $submarket                = $contract->{submarket} // \"N/A\";\n                my $expiry_type              = $contract->{expiry_type} // \"N/A\";\n                my $min_duration             = $contract->{min_contract_duration} // \"N/A\";\n                my $max_duration             = $contract->{max_contract_duration} // \"N/A\";\n                my $barrier                  = $contract->{barrier} // \"N/A\";\n                my $sentiment                = $contract->{sentiment} // \"N/A\";\n\n                # Print contract details\n                say \"  - Contract Type: $contract_type\";\n                say \"    - Display Name: $contract_display\";\n                say \"    - Category: $contract_category_display\";\n                say \"    - Market: $market\";\n                say \"    - Submarket: $submarket\";\n                say \"    - Expiry Type: $expiry_type\";\n                say \"    - Min Duration: $min_duration\";\n                say \"    - Max Duration: $max_duration\";\n                say \"    - Barrier: $barrier\";\n                say \"    - Sentiment: $sentiment\";\n                say \"    --------------------\";\n            }\n            say \"[contracts] End of Contracts Response.\";\n            $connection->close;  # Close connection after processing the response\n        }\n    });\n\n    # Handle connection close\n    $connection->on(finish => sub {\n        say \"[status] WebSocket connection closed.\";\n    });\n});\n\n# Start the AnyEvent event loop\nAnyEvent->condvar->recv;\n\n# Instructions to run the code on a local machine:\n# 1. Ensure you have Perl installed on your machine.\n# 2. Install the necessary Perl modules using the following commands:\n#      cpanm AnyEvent AnyEvent::WebSocket::Client JSON\n#    If `cpanm` is not installed, install it using `cpan App::cpanminus`.\n# 3. Save this script to a file, e.g., `contracts_for_symbol.pl`.\n# 4. Run the script using the command:\n#      perl contracts_for_symbol.pl\n# This script will connect to the Deriv WebSocket API, request contracts for a specific symbol, and print the details."
        },
        {
          "language": "text",
          "content": "#!/usr/bin/env perl\nuse strict;\nuse warnings;\nuse v5.014;\nuse AnyEvent;\nuse AnyEvent::WebSocket::Client;\nuse JSON;\n\n# WebSocket URL and app_id\nmy $app_id = app_id;\nmy $url = \"wss://ws.derivws.com/websockets/v3?app_id=$app_id\";\n\n# Create WebSocket client and connection\nmy $client = AnyEvent::WebSocket::Client->new;\n$| = 1;  # Flush output immediately for real-time logging\n\n# Function to send a contracts for symbol request\nsub send_contracts_for_symbol {\n    my $connection = shift;\n    my $contracts_for_request = encode_json({\n        contracts_for => 'R_50',    # Symbol for which contracts are requested\n        currency => 'USD',          # Set currency to USD\n        landing_company => 'svg',   # Landing company (e.g., svg)\n        product_type => 'basic'     # Product type is set to 'basic'\n    });\n    $connection->send($contracts_for_request);\n    say \"[request] Contracts for symbol request sent.\";\n}\n\n# Establish WebSocket connection\n$client->connect($url)->cb(sub {\n    my $connection = eval { shift->recv };\n    if (!$connection) {\n        die \"Connection error: $@\";\n    }\n    say \"[status] WebSocket connection established.\";\n\n    # Send the contracts for symbol request\n    send_contracts_for_symbol($connection);\n\n    # Set a timeout for receiving a response\n    my $timeout = AnyEvent->timer(\n        after => 10,\n        cb    => sub {\n            say \"[error] No response received within 10 seconds. Closing connection.\";\n            $connection->close;\n        }\n    );\n\n    # Handle incoming messages\n    $connection->on(each_message => sub {\n        my ($connection, $message) = @_;\n\n        # Cancel timeout upon receiving a message\n        undef $timeout;\n\n        my $data = eval { decode_json($message->body) };\n        if ($@) {\n            say \"[error] Failed to decode JSON: $@\";\n            return;\n        }\n\n        # Handle errors\n        if ($data->{error}) {\n            say \"[error] \" . $data->{error}{message};\n            $connection->close;\n            return;\n        }\n\n        # Process contracts_for response\n        if ($data->{msg_type} && $data->{msg_type} eq 'contracts_for') {\n            say \"[contracts] Contracts for Symbol (R_50):\";\n            foreach my $contract (@{$data->{contracts_for}{available}}) {\n                my $contract_type            = $contract->{contract_type} // \"N/A\";\n                my $contract_display         = $contract->{contract_display} // \"N/A\";\n                my $contract_category_display = $contract->{contract_category_display} // \"N/A\";\n                my $market                   = $contract->{market} // \"N/A\";\n                my $submarket                = $contract->{submarket} // \"N/A\";\n                my $expiry_type              = $contract->{expiry_type} // \"N/A\";\n                my $min_duration             = $contract->{min_contract_duration} // \"N/A\";\n                my $max_duration             = $contract->{max_contract_duration} // \"N/A\";\n                my $barrier                  = $contract->{barrier} // \"N/A\";\n                my $sentiment                = $contract->{sentiment} // \"N/A\";\n\n                # Print contract details\n                say \"  - Contract Type: $contract_type\";\n                say \"    - Display Name: $contract_display\";\n                say \"    - Category: $contract_category_display\";\n                say \"    - Market: $market\";\n                say \"    - Submarket: $submarket\";\n                say \"    - Expiry Type: $expiry_type\";\n                say \"    - Min Duration: $min_duration\";\n                say \"    - Max Duration: $max_duration\";\n                say \"    - Barrier: $barrier\";\n                say \"    - Sentiment: $sentiment\";\n                say \"    --------------------\";\n            }\n            say \"[contracts] End of Contracts Response.\";\n            $connection->close;  # Close connection after processing the response\n        }\n    });\n\n    # Handle connection close\n    $connection->on(finish => sub {\n        say \"[status] WebSocket connection closed.\";\n    });\n});\n\n# Start the AnyEvent event loop\nAnyEvent->condvar->recv;\n\n# Instructions to run the code on a local machine:\n# 1. Ensure you have Perl installed on your machine.\n# 2. Install the necessary Perl modules using the following commands:\n#      cpanm AnyEvent AnyEvent::WebSocket::Client JSON\n#    If `cpanm` is not installed, install it using `cpan App::cpanminus`.\n# 3. Save this script to a file, e.g., `contracts_for_symbol.pl`.\n# 4. Run the script using the command:\n#      perl contracts_for_symbol.pl\n# This script will connect to the Deriv WebSocket API, request contracts for a specific symbol, and print the details."
        },
        {
          "language": "text",
          "content": "<?php\n// Include necessary libraries (you may need to install Ratchet via Composer)\nrequire 'vendor/autoload.php';\n\nuse Ratchet\\Client\\WebSocket;\nuse Ratchet\\Client\\Connector;\nuse React\\EventLoop\\Factory as LoopFactory;\nuse React\\Socket\\Connector as ReactConnector;\n\n// Define the app_id (replace 'your_app_id' with your actual app_id)\n$app_id = 'your_app_id';\n\n// Create an event loop to handle WebSocket events\n$loop = LoopFactory::create();\n$reactConnector = new ReactConnector($loop);\n$connector = new Connector($loop, $reactConnector);\n\n// Define the request object for contracts_for API call\n$contracts_for_symbol_request = [\n    'contracts_for'   => 'R_50',  // Symbol for which contracts are requested\n    'currency'        => 'USD',   // Set currency to USD\n    'landing_company' => 'svg',   // Landing company\n    'product_type'    => 'basic', // Product type is set to 'basic'\n];\n\n// Connect to the Deriv WebSocket API\n$connector(\"wss://ws.derivws.com/websockets/v3?app_id=$app_id\")\n    ->then(function(WebSocket $conn) use ($contracts_for_symbol_request, $loop) {\n        // Send the contracts_for request to the WebSocket server\n        $conn->send(json_encode($contracts_for_symbol_request));\n        echo \"Request sent: \" . json_encode($contracts_for_symbol_request) . PHP_EOL;\n\n        // Handle messages received from the server\n        $conn->on('message', function($message) use ($conn, $loop) {\n            // Decode the received message (JSON format)\n            $data = json_decode($message, true);\n\n            // Check if there is an error in the response\n            if (isset($data['error'])) {\n                echo \"Error: \" . $data['error']['message'] . PHP_EOL;\n                $conn->close();\n                $loop->stop(); // Stop the event loop\n            }\n\n            // If the response is for 'contracts_for', print the contract information\n            if (isset($data['msg_type']) && $data['msg_type'] === 'contracts_for') {\n                echo \"Contracts for symbol: \" . json_encode($data['contracts_for'], JSON_PRETTY_PRINT) . PHP_EOL;\n                $conn->close(); // Close the WebSocket connection\n                $loop->stop();  // Stop the event loop\n            }\n        });\n\n        // Handle WebSocket connection closing\n        $conn->on('close', function($code = null, $reason = null) use ($loop) {\n            echo \"Connection closed ({$code} - {$reason})\" . PHP_EOL;\n            $loop->stop(); // Stop the event loop when the connection is closed\n        });\n    }, function($e) use ($loop) {\n        // Handle connection errors\n        echo \"Could not connect: {$e->getMessage()}\" . PHP_EOL;\n        $loop->stop();\n    });\n\n// Run the event loop to keep the connection alive\n$loop->run();"
        },
        {
          "language": "text",
          "content": "<?php\n// Include necessary libraries (you may need to install Ratchet via Composer)\nrequire 'vendor/autoload.php';\n\nuse Ratchet\\Client\\WebSocket;\nuse Ratchet\\Client\\Connector;\nuse React\\EventLoop\\Factory as LoopFactory;\nuse React\\Socket\\Connector as ReactConnector;\n\n// Define the app_id (replace 'your_app_id' with your actual app_id)\n$app_id = 'your_app_id';\n\n// Create an event loop to handle WebSocket events\n$loop = LoopFactory::create();\n$reactConnector = new ReactConnector($loop);\n$connector = new Connector($loop, $reactConnector);\n\n// Define the request object for contracts_for API call\n$contracts_for_symbol_request = [\n    'contracts_for'   => 'R_50',  // Symbol for which contracts are requested\n    'currency'        => 'USD',   // Set currency to USD\n    'landing_company' => 'svg',   // Landing company\n    'product_type'    => 'basic', // Product type is set to 'basic'\n];\n\n// Connect to the Deriv WebSocket API\n$connector(\"wss://ws.derivws.com/websockets/v3?app_id=$app_id\")\n    ->then(function(WebSocket $conn) use ($contracts_for_symbol_request, $loop) {\n        // Send the contracts_for request to the WebSocket server\n        $conn->send(json_encode($contracts_for_symbol_request));\n        echo \"Request sent: \" . json_encode($contracts_for_symbol_request) . PHP_EOL;\n\n        // Handle messages received from the server\n        $conn->on('message', function($message) use ($conn, $loop) {\n            // Decode the received message (JSON format)\n            $data = json_decode($message, true);\n\n            // Check if there is an error in the response\n            if (isset($data['error'])) {\n                echo \"Error: \" . $data['error']['message'] . PHP_EOL;\n                $conn->close();\n                $loop->stop(); // Stop the event loop\n            }\n\n            // If the response is for 'contracts_for', print the contract information\n            if (isset($data['msg_type']) && $data['msg_type'] === 'contracts_for') {\n                echo \"Contracts for symbol: \" . json_encode($data['contracts_for'], JSON_PRETTY_PRINT) . PHP_EOL;\n                $conn->close(); // Close the WebSocket connection\n                $loop->stop();  // Stop the event loop\n            }\n        });\n\n        // Handle WebSocket connection closing\n        $conn->on('close', function($code = null, $reason = null) use ($loop) {\n            echo \"Connection closed ({$code} - {$reason})\" . PHP_EOL;\n            $loop->stop(); // Stop the event loop when the connection is closed\n        });\n    }, function($e) use ($loop) {\n        // Handle connection errors\n        echo \"Could not connect: {$e->getMessage()}\" . PHP_EOL;\n        $loop->stop();\n    });\n\n// Run the event loop to keep the connection alive\n$loop->run();"
        },
        {
          "language": "text",
          "content": "import asyncio\nfrom deriv_api import DerivAPI\n\n# Replace with your actual app_id\napp_id = app_id\n\nasync def main():\n    # Initialize the DerivAPI instance\n    api = DerivAPI(app_id=app_id)\n\n    try:\n        # Send a contracts for symbol request\n        contracts_for_symbol_request = {\n            \"contracts_for\": \"R_50\",\n            \"currency\": \"USD\",\n            \"landing_company\": \"svg\",\n            \"product_type\": \"basic\"\n        }\n        response = await api.send(contracts_for_symbol_request)\n        print(\"Contracts for symbol request sent\")\n\n        # Process the response and print contract details\n        print_contracts_for_symbol(response)\n\n        # Function to send a ping every 30 seconds to keep the connection alive\n        async def keep_alive():\n            while True:\n                await api.ping()  # Send a ping message\n                print(\"Sent ping to keep connection alive\")\n                await asyncio.sleep(30)  # Ping every 30 seconds\n\n        # Run the keep-alive ping loop\n        await asyncio.gather(keep_alive())\n\n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n\n    finally:\n        # Disconnect from the API\n        await api.disconnect()\n        print(\"Disconnected from Deriv API\")\n\n# Helper function to format and print contract details for a symbol\ndef print_contracts_for_symbol(response):\n    data = response.get(\"contracts_for\", {})\n    if data:\n        print(\"Contracts for Symbol (R_50):\")\n        contracts = data.get(\"available\", [])\n        for contract in contracts:\n            print(f\"  - Contract Type: {contract.get('contract_type')}\")\n            print(f\"    - Display Name: {contract.get('contract_display')}\")\n            print(f\"    - Category: {contract.get('contract_category_display')}\")\n            print(f\"    - Market: {contract.get('market')}\")\n            print(f\"    - Submarket: {contract.get('submarket')}\")\n            print(f\"    - Expiry Type: {contract.get('expiry_type')}\")\n            print(f\"    - Min Duration: {contract.get('min_contract_duration')}\")\n            print(f\"    - Max Duration: {contract.get('max_contract_duration')}\")\n            print(f\"    - Barrier: {contract.get('barrier')}\")\n            print(f\"    - Sentiment: {contract.get('sentiment')}\")\n            print(\"    --------------------\")\n    print(\"[End of Contracts for Symbol Response]\")\n\n# Run the main function\nif __name__ == \"__main__\":\n    asyncio.run(main())\n\n# Instructions to run the code:\n# 1. Ensure Python is installed on your machine (https://www.python.org/downloads/).\n# 2. Install the Deriv API package by running:\n#      pip install deriv_api\n# 3. Save this code to a file, e.g., `contracts_for_symbol_client.py`.\n# 4. Run the code from the command line:\n#      python contracts_for_symbol_client.py\n#\n# This script will connect to Deriv‚Äôs WebSocket API, request contract details for the symbol \"R_50\", and send pings every 30 seconds to keep the connection alive.\n# The response includes important contract details such as contract type, category, market, durations, and barriers."
        },
        {
          "language": "text",
          "content": "import asyncio\nfrom deriv_api import DerivAPI\n\n# Replace with your actual app_id\napp_id = app_id\n\nasync def main():\n    # Initialize the DerivAPI instance\n    api = DerivAPI(app_id=app_id)\n\n    try:\n        # Send a contracts for symbol request\n        contracts_for_symbol_request = {\n            \"contracts_for\": \"R_50\",\n            \"currency\": \"USD\",\n            \"landing_company\": \"svg\",\n            \"product_type\": \"basic\"\n        }\n        response = await api.send(contracts_for_symbol_request)\n        print(\"Contracts for symbol request sent\")\n\n        # Process the response and print contract details\n        print_contracts_for_symbol(response)\n\n        # Function to send a ping every 30 seconds to keep the connection alive\n        async def keep_alive():\n            while True:\n                await api.ping()  # Send a ping message\n                print(\"Sent ping to keep connection alive\")\n                await asyncio.sleep(30)  # Ping every 30 seconds\n\n        # Run the keep-alive ping loop\n        await asyncio.gather(keep_alive())\n\n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n\n    finally:\n        # Disconnect from the API\n        await api.disconnect()\n        print(\"Disconnected from Deriv API\")\n\n# Helper function to format and print contract details for a symbol\ndef print_contracts_for_symbol(response):\n    data = response.get(\"contracts_for\", {})\n    if data:\n        print(\"Contracts for Symbol (R_50):\")\n        contracts = data.get(\"available\", [])\n        for contract in contracts:\n            print(f\"  - Contract Type: {contract.get('contract_type')}\")\n            print(f\"    - Display Name: {contract.get('contract_display')}\")\n            print(f\"    - Category: {contract.get('contract_category_display')}\")\n            print(f\"    - Market: {contract.get('market')}\")\n            print(f\"    - Submarket: {contract.get('submarket')}\")\n            print(f\"    - Expiry Type: {contract.get('expiry_type')}\")\n            print(f\"    - Min Duration: {contract.get('min_contract_duration')}\")\n            print(f\"    - Max Duration: {contract.get('max_contract_duration')}\")\n            print(f\"    - Barrier: {contract.get('barrier')}\")\n            print(f\"    - Sentiment: {contract.get('sentiment')}\")\n            print(\"    --------------------\")\n    print(\"[End of Contracts for Symbol Response]\")\n\n# Run the main function\nif __name__ == \"__main__\":\n    asyncio.run(main())\n\n# Instructions to run the code:\n# 1. Ensure Python is installed on your machine (https://www.python.org/downloads/).\n# 2. Install the Deriv API package by running:\n#      pip install deriv_api\n# 3. Save this code to a file, e.g., `contracts_for_symbol_client.py`.\n# 4. Run the code from the command line:\n#      python contracts_for_symbol_client.py\n#\n# This script will connect to Deriv‚Äôs WebSocket API, request contract details for the symbol \"R_50\", and send pings every 30 seconds to keep the connection alive.\n# The response includes important contract details such as contract type, category, market, durations, and barriers."
        },
        {
          "language": "text",
          "content": "use tokio_tungstenite::connect_async;\nuse tokio_tungstenite::tungstenite::protocol::Message;\nuse futures_util::{SinkExt, StreamExt};\nuse tokio::{sync::Mutex, task::spawn};\nuse std::sync::Arc;\nuse serde_json::json;\nuse url::Url;\n\n#[tokio::main]\nasync fn main() {\n    let app_id = app_id;\n    let url = format!(\"wss://ws.derivws.com/websockets/v3?app_id={}\", app_id);\n    let url = Url::parse(&url).expect(\"Invalid URL\");\n\n    // Connect to the WebSocket server and wrap `socket` in Arc<Mutex<_>>\n    let (socket, _) = connect_async(url).await.expect(\"Failed to connect\");\n    let socket = Arc::new(Mutex::new(socket));\n\n    println!(\"[status] WebSocket connection established\");\n\n    // Contracts for symbol request JSON\n    let contracts_for_symbol_request = json!({\n        \"contracts_for\": \"R_50\",\n        \"currency\": \"USD\",\n        \"landing_company\": \"svg\",\n        \"product_type\": \"basic\"\n    });\n\n    // Clone `socket` to send the contracts for symbol request\n    let send_socket = Arc::clone(&socket);\n    let send_task = spawn(async move {\n        let mut socket = send_socket.lock().await;\n        if socket.send(Message::Text(contracts_for_symbol_request.to_string())).await.is_ok() {\n            println!(\"[request] Contracts for symbol request sent.\");\n        }\n    });\n\n    // Task to handle incoming messages\n    let receive_socket = Arc::clone(&socket);\n    let receive_task = spawn(async move {\n        let mut socket = receive_socket.lock().await;\n        while let Some(Ok(msg)) = socket.next().await {\n            match msg {\n                Message::Text(text) => {\n                    let data: serde_json::Value = serde_json::from_str(&text).unwrap_or_else(|_| json!({}));\n                    if data.get(\"msg_type\").unwrap_or(&json!(\"\")) == \"contracts_for\" {\n                        println!(\"Contracts for Symbol (R_50):\");\n                        if let Some(contracts) = data[\"contracts_for\"][\"available\"].as_array() {\n                            for contract in contracts {\n                                println!(\"  - Contract Type: {}\", contract[\"contract_type\"]);\n                                println!(\"    - Display Name: {}\", contract[\"contract_display\"]);\n                                println!(\"    - Category: {}\", contract[\"contract_category_display\"]);\n                                println!(\"    - Market: {}\", contract[\"market\"]);\n                                println!(\"    - Submarket: {}\", contract[\"submarket\"]);\n                                println!(\"    - Expiry Type: {}\", contract[\"expiry_type\"]);\n                                println!(\"    - Min Duration: {}\", contract[\"min_contract_duration\"]);\n                                println!(\"    - Max Duration: {}\", contract[\"max_contract_duration\"]);\n                                println!(\"    - Barrier: {}\", contract[\"barrier\"]);\n                                println!(\"    - Sentiment: {}\", contract[\"sentiment\"]);\n                                println!(\"    --------------------\");\n                            }\n                        }\n                    } else if let Some(error) = data.get(\"error\") {\n                        println!(\"[Error] {}\", error[\"message\"]);\n                    }\n                }\n                _ => {}\n            }\n        }\n    });\n\n    // Await all tasks to complete\n    let _ = tokio::try_join!(send_task, receive_task);\n\n    // Close the WebSocket connection\n    let mut socket = socket.lock().await;\n    socket.close(None).await.expect(\"Failed to close connection\");\n    println!(\"[close] Connection closed.\");\n}\n\n/*\nInstructions to run the code:\n\n1. Ensure Rust and Cargo are installed on your machine. You can download them from https://www.rust-lang.org/.\n2. Add the necessary dependencies to `Cargo.toml`:\n\n   [dependencies]\n   tokio = { version = \"1\", features = [\"full\"] }\n   tokio-tungstenite = \"0.16\"\n   futures-util = \"0.3\"\n   serde_json = \"1.0\"\n   url = \"2.2\"\n\n3. Build the project:\n\n   cargo build --release\n\n4. Run the project:\n\n   cargo run --release\n\nThis code will connect to the Deriv WebSocket API, request contract details for the symbol \"R_50\", and print out important contract details such as type, category, market, submarket, expiry type, duration, and barrier information.\n*/"
        },
        {
          "language": "text",
          "content": "use tokio_tungstenite::connect_async;\nuse tokio_tungstenite::tungstenite::protocol::Message;\nuse futures_util::{SinkExt, StreamExt};\nuse tokio::{sync::Mutex, task::spawn};\nuse std::sync::Arc;\nuse serde_json::json;\nuse url::Url;\n\n#[tokio::main]\nasync fn main() {\n    let app_id = app_id;\n    let url = format!(\"wss://ws.derivws.com/websockets/v3?app_id={}\", app_id);\n    let url = Url::parse(&url).expect(\"Invalid URL\");\n\n    // Connect to the WebSocket server and wrap `socket` in Arc<Mutex<_>>\n    let (socket, _) = connect_async(url).await.expect(\"Failed to connect\");\n    let socket = Arc::new(Mutex::new(socket));\n\n    println!(\"[status] WebSocket connection established\");\n\n    // Contracts for symbol request JSON\n    let contracts_for_symbol_request = json!({\n        \"contracts_for\": \"R_50\",\n        \"currency\": \"USD\",\n        \"landing_company\": \"svg\",\n        \"product_type\": \"basic\"\n    });\n\n    // Clone `socket` to send the contracts for symbol request\n    let send_socket = Arc::clone(&socket);\n    let send_task = spawn(async move {\n        let mut socket = send_socket.lock().await;\n        if socket.send(Message::Text(contracts_for_symbol_request.to_string())).await.is_ok() {\n            println!(\"[request] Contracts for symbol request sent.\");\n        }\n    });\n\n    // Task to handle incoming messages\n    let receive_socket = Arc::clone(&socket);\n    let receive_task = spawn(async move {\n        let mut socket = receive_socket.lock().await;\n        while let Some(Ok(msg)) = socket.next().await {\n            match msg {\n                Message::Text(text) => {\n                    let data: serde_json::Value = serde_json::from_str(&text).unwrap_or_else(|_| json!({}));\n                    if data.get(\"msg_type\").unwrap_or(&json!(\"\")) == \"contracts_for\" {\n                        println!(\"Contracts for Symbol (R_50):\");\n                        if let Some(contracts) = data[\"contracts_for\"][\"available\"].as_array() {\n                            for contract in contracts {\n                                println!(\"  - Contract Type: {}\", contract[\"contract_type\"]);\n                                println!(\"    - Display Name: {}\", contract[\"contract_display\"]);\n                                println!(\"    - Category: {}\", contract[\"contract_category_display\"]);\n                                println!(\"    - Market: {}\", contract[\"market\"]);\n                                println!(\"    - Submarket: {}\", contract[\"submarket\"]);\n                                println!(\"    - Expiry Type: {}\", contract[\"expiry_type\"]);\n                                println!(\"    - Min Duration: {}\", contract[\"min_contract_duration\"]);\n                                println!(\"    - Max Duration: {}\", contract[\"max_contract_duration\"]);\n                                println!(\"    - Barrier: {}\", contract[\"barrier\"]);\n                                println!(\"    - Sentiment: {}\", contract[\"sentiment\"]);\n                                println!(\"    --------------------\");\n                            }\n                        }\n                    } else if let Some(error) = data.get(\"error\") {\n                        println!(\"[Error] {}\", error[\"message\"]);\n                    }\n                }\n                _ => {}\n            }\n        }\n    });\n\n    // Await all tasks to complete\n    let _ = tokio::try_join!(send_task, receive_task);\n\n    // Close the WebSocket connection\n    let mut socket = socket.lock().await;\n    socket.close(None).await.expect(\"Failed to close connection\");\n    println!(\"[close] Connection closed.\");\n}\n\n/*\nInstructions to run the code:\n\n1. Ensure Rust and Cargo are installed on your machine. You can download them from https://www.rust-lang.org/.\n2. Add the necessary dependencies to `Cargo.toml`:\n\n   [dependencies]\n   tokio = { version = \"1\", features = [\"full\"] }\n   tokio-tungstenite = \"0.16\"\n   futures-util = \"0.3\"\n   serde_json = \"1.0\"\n   url = \"2.2\"\n\n3. Build the project:\n\n   cargo build --release\n\n4. Run the project:\n\n   cargo run --release\n\nThis code will connect to the Deriv WebSocket API, request contract details for the symbol \"R_50\", and print out important contract details such as type, category, market, submarket, expiry type, duration, and barrier information.\n*/"
        },
        {
          "language": "text",
          "content": "import Foundation\n\n// Make webSocketTask a global variable to keep the connection open\nvar webSocketTask: URLSessionWebSocketTask?\n\n// Function to create and handle WebSocket connection\nfunc connectWebSocket() {\n    let appID = app_id // Replace with your app_id.\n    let url = URL(string: \"wss://ws.derivws.com/websockets/v3?app_id=\\(appID)\")! // WebSocket URL with the app_id\n    let request = URLRequest(url: url)\n    \n    // Initialize webSocketTask with URLSession\n    webSocketTask = URLSession.shared.webSocketTask(with: request)\n    \n    // Start the WebSocket connection\n    webSocketTask?.resume()\n    print(\"[status] WebSocket connection established.\")\n    \n    // Function to send website status request\n    func sendWebsiteStatusRequest() {\n        let websiteStatusRequest = [\"website_status\": 1] as [String: Any]\n        \n        if let requestData = try? JSONSerialization.data(withJSONObject: websiteStatusRequest, options: []) {\n            let message = URLSessionWebSocketTask.Message.data(requestData)\n            webSocketTask?.send(message) { error in\n                if let error = error {\n                    print(\"[error] Failed to send website status request: \\(error.localizedDescription)\")\n                } else {\n                    print(\"[status] Website status request sent.\")\n                }\n            }\n        }\n    }\n    \n    // Function to receive messages from the server\n    func receiveMessage() {\n        webSocketTask?.receive { result in\n            switch result {\n            case .success(let message):\n                switch message {\n                case .string(let text):\n                    if let data = text.data(using: .utf8),\n                       let json = try? JSONSerialization.jsonObject(with: data, options: []) as? [String: Any] {\n                        handleServerMessage(json)\n                    }\n                case .data(let data):\n                    print(\"[message] Binary data received: \\(data)\")\n                @unknown default:\n                    print(\"[message] Received unknown message type\")\n                }\n                \n                // Continue to receive messages\n                receiveMessage()\n                \n            case .failure(let error):\n                print(\"[error] Failed to receive message: \\(error.localizedDescription)\")\n            }\n        }\n    }\n    \n    // Function to handle the website status response from server\n    func handleServerMessage(_ data: [String: Any]) {\n        if let error = data[\"error\"] as? [String: Any], let message = error[\"message\"] as? String {\n            print(\"[Error] \\(message)\")\n        } else if data[\"msg_type\"] as? String == \"website_status\", let websiteStatus = data[\"website_status\"] as? [String: Any] {\n            let siteStatus = websiteStatus[\"site_status\"] as? String ?? \"Unknown\"\n            let supportedLanguages = websiteStatus[\"supported_languages\"] as? [String] ?? []\n            \n            print(\"[Website Status] Site Status: \\(siteStatus)\")\n            print(\"[Website Status] Supported Languages: \\(supportedLanguages.joined(separator: \", \"))\")\n        }\n    }\n    \n    // Send the website status request and start receiving messages\n    sendWebsiteStatusRequest()\n    receiveMessage()\n}\n\n// Function to close the WebSocket connection\nfunc closeWebSocketConnection() {\n    webSocketTask?.cancel(with: .normalClosure, reason: nil)\n    print(\"[close] Connection closed cleanly\")\n}\n\n// Start WebSocket connection\nconnectWebSocket()\n\n// Keep the program running to wait for messages\nRunLoop.main.run()"
        },
        {
          "language": "text",
          "content": "import Foundation\n\n// Make webSocketTask a global variable to keep the connection open\nvar webSocketTask: URLSessionWebSocketTask?\n\n// Function to create and handle WebSocket connection\nfunc connectWebSocket() {\n    let appID = app_id // Replace with your app_id.\n    let url = URL(string: \"wss://ws.derivws.com/websockets/v3?app_id=\\(appID)\")! // WebSocket URL with the app_id\n    let request = URLRequest(url: url)\n    \n    // Initialize webSocketTask with URLSession\n    webSocketTask = URLSession.shared.webSocketTask(with: request)\n    \n    // Start the WebSocket connection\n    webSocketTask?.resume()\n    print(\"[status] WebSocket connection established.\")\n    \n    // Function to send website status request\n    func sendWebsiteStatusRequest() {\n        let websiteStatusRequest = [\"website_status\": 1] as [String: Any]\n        \n        if let requestData = try? JSONSerialization.data(withJSONObject: websiteStatusRequest, options: []) {\n            let message = URLSessionWebSocketTask.Message.data(requestData)\n            webSocketTask?.send(message) { error in\n                if let error = error {\n                    print(\"[error] Failed to send website status request: \\(error.localizedDescription)\")\n                } else {\n                    print(\"[status] Website status request sent.\")\n                }\n            }\n        }\n    }\n    \n    // Function to receive messages from the server\n    func receiveMessage() {\n        webSocketTask?.receive { result in\n            switch result {\n            case .success(let message):\n                switch message {\n                case .string(let text):\n                    if let data = text.data(using: .utf8),\n                       let json = try? JSONSerialization.jsonObject(with: data, options: []) as? [String: Any] {\n                        handleServerMessage(json)\n                    }\n                case .data(let data):\n                    print(\"[message] Binary data received: \\(data)\")\n                @unknown default:\n                    print(\"[message] Received unknown message type\")\n                }\n                \n                // Continue to receive messages\n                receiveMessage()\n                \n            case .failure(let error):\n                print(\"[error] Failed to receive message: \\(error.localizedDescription)\")\n            }\n        }\n    }\n    \n    // Function to handle the website status response from server\n    func handleServerMessage(_ data: [String: Any]) {\n        if let error = data[\"error\"] as? [String: Any], let message = error[\"message\"] as? String {\n            print(\"[Error] \\(message)\")\n        } else if data[\"msg_type\"] as? String == \"website_status\", let websiteStatus = data[\"website_status\"] as? [String: Any] {\n            let siteStatus = websiteStatus[\"site_status\"] as? String ?? \"Unknown\"\n            let supportedLanguages = websiteStatus[\"supported_languages\"] as? [String] ?? []\n            \n            print(\"[Website Status] Site Status: \\(siteStatus)\")\n            print(\"[Website Status] Supported Languages: \\(supportedLanguages.joined(separator: \", \"))\")\n        }\n    }\n    \n    // Send the website status request and start receiving messages\n    sendWebsiteStatusRequest()\n    receiveMessage()\n}\n\n// Function to close the WebSocket connection\nfunc closeWebSocketConnection() {\n    webSocketTask?.cancel(with: .normalClosure, reason: nil)\n    print(\"[close] Connection closed cleanly\")\n}\n\n// Start WebSocket connection\nconnectWebSocket()\n\n// Keep the program running to wait for messages\nRunLoop.main.run()"
        },
        {
          "language": "text",
          "content": "#include <libwebsockets.h>\n#include <jansson.h>  // For JSON parsing\n#include <string.h>\n#include <signal.h>\n#include <time.h>\n#include <stdlib.h>\n\n// Set up WebSocket context and connection details\nstatic struct lws_context *context;\nstatic int interrupted = 0, port = 443, ssl_connection = LCCSCF_USE_SSL;\nstatic const char *server_address = \"ws.derivws.com\";\nstatic const char *path = \"/websockets/v3?app_id=app_id\";//replace with your app id\nstatic const char *pro = \"lws-minimal-client\";\n\n// Interval for the ping in seconds\nstatic const int ping_interval = 30;\nstatic time_t last_ping_time = 0;\n\n// Buffer to accumulate received message fragments\nstatic char message_buffer[16384];\nstatic size_t message_length = 0;\n\n// Signal handler for graceful shutdown\nstatic void sigint_handler(int sig) {\n    interrupted = 1;\n}\n\n// Function to send a ping message\nvoid send_ping(struct lws *wsi) {\n    const char *ping_msg = \"{\\\"ping\\\": 1}\";\n    unsigned char buf[LWS_PRE + 20];\n    memcpy(&buf[LWS_PRE], ping_msg, strlen(ping_msg));\n    lws_write(wsi, &buf[LWS_PRE], strlen(ping_msg), LWS_WRITE_TEXT);\n    lwsl_user(\"Ping sent\\n\");\n}\n\n// Function to send a contracts for symbol request\nvoid send_contracts_for_symbol_request(struct lws *wsi) {\n    const char *contracts_for_symbol_msg = \"{\\\"contracts_for\\\": \\\"R_50\\\", \\\"currency\\\": \\\"USD\\\", \\\"landing_company\\\": \\\"svg\\\", \\\"product_type\\\": \\\"basic\\\"}\";\n    unsigned char buf[LWS_PRE + 256];\n    memcpy(&buf[LWS_PRE], contracts_for_symbol_msg, strlen(contracts_for_symbol_msg));\n    lws_write(wsi, &buf[LWS_PRE], strlen(contracts_for_symbol_msg), LWS_WRITE_TEXT);\n    lwsl_user(\"Contracts for symbol request sent\\n\");\n}\n\n// Function to check if JSON is complete based on braces balance\nint is_json_complete(const char *json) {\n    int brace_count = 0;\n    for (size_t i = 0; json[i] != '\\0'; i++) {\n        if (json[i] == '{') brace_count++;\n        else if (json[i] == '}') brace_count--;\n    }\n    return brace_count == 0;\n}\n\n// Function to handle the JSON response once fully received\nstatic void handle_contracts_for_response(const char *response) {\n    json_t *root;\n    json_error_t error;\n\n    // Parse the JSON response\n    root = json_loads(response, 0, &error);\n    if (!root) {\n        printf(\"Error parsing JSON: %s at line %d, column %d\\n\", error.text, error.line, error.column);\n        return;\n    }\n\n    // Check if the response contains an error\n    json_t *error_obj = json_object_get(root, \"error\");\n    if (error_obj) {\n        const char *error_message = json_string_value(json_object_get(error_obj, \"message\"));\n        printf(\"Error: %s\\n\", error_message);\n        json_decref(root);\n        return;\n    }\n\n    // Check if the message type is \"contracts_for\"\n    const char *msg_type = json_string_value(json_object_get(root, \"msg_type\"));\n    if (msg_type && strcmp(msg_type, \"contracts_for\") == 0) {\n        json_t *contracts_for = json_object_get(root, \"contracts_for\");\n        json_t *available_contracts = json_object_get(contracts_for, \"available\");\n\n        printf(\"Contracts for Symbol (R_50):\\n\");\n        size_t index;\n        json_t *contract;\n        json_array_foreach(available_contracts, index, contract) {\n            const char *contract_type = json_string_value(json_object_get(contract, \"contract_type\"));\n            const char *display_name = json_string_value(json_object_get(contract, \"contract_display\"));\n            const char *category = json_string_value(json_object_get(contract, \"contract_category_display\"));\n            const char *market = json_string_value(json_object_get(contract, \"market\"));\n            const char *submarket = json_string_value(json_object_get(contract, \"submarket\"));\n            const char *expiry_type = json_string_value(json_object_get(contract, \"expiry_type\"));\n            const char *min_duration = json_string_value(json_object_get(contract, \"min_contract_duration\"));\n            const char *max_duration = json_string_value(json_object_get(contract, \"max_contract_duration\"));\n\n            printf(\"  - Contract Type: %s\\n\", contract_type);\n            printf(\"    - Display Name: %s\\n\", display_name);\n            printf(\"    - Category: %s\\n\", category);\n            printf(\"    - Market: %s\\n\", market);\n            printf(\"    - Submarket: %s\\n\", submarket);\n            printf(\"    - Expiry Type: %s\\n\", expiry_type);\n            printf(\"    - Min Duration: %s\\n\", min_duration);\n            printf(\"    - Max Duration: %s\\n\", max_duration);\n            printf(\"    --------------------\\n\");\n        }\n    }\n\n    json_decref(root);\n}\n\n// Callback function for WebSocket events\nstatic int callback_minimal(struct lws *wsi, enum lws_callback_reasons reason,\n                            void *user, void *in, size_t len) {\n    switch (reason) {\n    case LWS_CALLBACK_CLIENT_CONNECTION_ERROR:\n        lwsl_err(\"CLIENT_CONNECTION_ERROR: %s\\n\", in ? (char *)in : \"(null)\");\n        interrupted = 1;\n        break;\n\n    case LWS_CALLBACK_CLIENT_ESTABLISHED:\n        lwsl_user(\"Connection established\\n\");\n        send_contracts_for_symbol_request(wsi);  // Send contracts for symbol request on connection\n        lws_callback_on_writable(wsi); // Request writable callback\n        break;\n\n    case LWS_CALLBACK_CLIENT_WRITEABLE:\n        if (time(NULL) - last_ping_time >= ping_interval) {\n            send_ping(wsi);  // Send periodic ping\n            last_ping_time = time(NULL);\n            send_contracts_for_symbol_request(wsi);  // Periodically request contracts\n        }\n        break;\n\n    case LWS_CALLBACK_CLIENT_RECEIVE:\n        // Accumulate incoming message chunks into the buffer\n        if (message_length + len < sizeof(message_buffer) - 1) {\n            memcpy(&message_buffer[message_length], in, len);\n            message_length += len;\n            message_buffer[message_length] = '\\0';  // Null-terminate\n\n            // Check if we have a complete JSON message\n            if (is_json_complete(message_buffer)) {\n                printf(\"Received complete JSON message: %s\\n\", message_buffer);\n                handle_contracts_for_response(message_buffer); // Process JSON response\n                message_length = 0;  // Reset the buffer after parsing\n            }\n        } else {\n            printf(\"Warning: Message buffer overflow. Clearing buffer.\\n\");\n            message_length = 0;  // Clear the buffer on overflow\n        }\n        break;\n\n    case LWS_CALLBACK_CLIENT_CLOSED:\n        lwsl_user(\"Connection closed\\n\");\n        interrupted = 1;\n        break;\n\n    default:\n        break;\n    }\n\n    return 0;\n}\n\n// Define supported protocols for the WebSocket\nstatic const struct lws_protocols protocols[] = {\n    { \"lws-minimal-client\", callback_minimal, 0, 0, 0, NULL, 0 },\n    LWS_PROTOCOL_LIST_TERM\n};\n\n// Main function to set up and manage the WebSocket client\nint main(int argc, const char **argv) {\n    struct lws_context_creation_info info;\n    struct lws_client_connect_info i;\n\n    // Handle Ctrl+C interrupt for graceful shutdown\n    signal(SIGINT, sigint_handler);\n    memset(&info, 0, sizeof info);\n    memset(&i, 0, sizeof(i));\n\n    lwsl_user(\"Initializing Deriv WebSocket client...\\n\");\n\n    info.options = LWS_SERVER_OPTION_DO_SSL_GLOBAL_INIT;\n    info.port = CONTEXT_PORT_NO_LISTEN;\n    info.protocols = protocols;\n    info.fd_limit_per_thread = 1 + 1 + 1;\n\n    context = lws_create_context(&info);\n    if (!context) {\n        lwsl_err(\"lws init failed\\n\");\n        return 1;\n    }\n\n    i.context = context;\n    i.port = port;\n    i.address = server_address;\n    i.path = path;\n    i.host = i.address;\n    i.origin = i.address;\n    i.ssl_connection = ssl_connection;\n    i.protocol = pro;\n    i.local_protocol_name = \"lws-minimal-client\";\n\n    if (!lws_client_connect_via_info(&i)) {\n        lwsl_err(\"Failed to initiate connection\\n\");\n        return 1;\n    }\n\n    // Run the WebSocket client event loop\n    while (!interrupted)\n        lws_service(context, 0);\n\n    lws_context_destroy(context);\n    lwsl_user(\"WebSocket client terminated.\\n\");\n\n    return 0;\n}\n\n/*\n * Instructions:\n * 1. Install the required libraries if they are not already installed:\n *    - On Ubuntu:\n *        sudo apt-get install libwebsockets-dev libjansson-dev\n *    - On macOS:\n *        brew install libwebsockets jansson\n * 2. Compile the code using the following command:\n *      gcc -o connect connect.c -lwebsockets -ljansson -lssl -lcrypto -lm\n * 3. Run the compiled executable:\n *      ./connect\n * 4. Ensure you have internet connectivity as the WebSocket will attempt to connect to `ws.derivws.com`.\n * 5. Replace \"app_id=1089\" in the `path` variable with your actual app_id if required."
        },
        {
          "language": "text",
          "content": "#include <libwebsockets.h>\n#include <jansson.h>  // For JSON parsing\n#include <string.h>\n#include <signal.h>\n#include <time.h>\n#include <stdlib.h>\n\n// Set up WebSocket context and connection details\nstatic struct lws_context *context;\nstatic int interrupted = 0, port = 443, ssl_connection = LCCSCF_USE_SSL;\nstatic const char *server_address = \"ws.derivws.com\";\nstatic const char *path = \"/websockets/v3?app_id=app_id\";//replace with your app id\nstatic const char *pro = \"lws-minimal-client\";\n\n// Interval for the ping in seconds\nstatic const int ping_interval = 30;\nstatic time_t last_ping_time = 0;\n\n// Buffer to accumulate received message fragments\nstatic char message_buffer[16384];\nstatic size_t message_length = 0;\n\n// Signal handler for graceful shutdown\nstatic void sigint_handler(int sig) {\n    interrupted = 1;\n}\n\n// Function to send a ping message\nvoid send_ping(struct lws *wsi) {\n    const char *ping_msg = \"{\\\"ping\\\": 1}\";\n    unsigned char buf[LWS_PRE + 20];\n    memcpy(&buf[LWS_PRE], ping_msg, strlen(ping_msg));\n    lws_write(wsi, &buf[LWS_PRE], strlen(ping_msg), LWS_WRITE_TEXT);\n    lwsl_user(\"Ping sent\\n\");\n}\n\n// Function to send a contracts for symbol request\nvoid send_contracts_for_symbol_request(struct lws *wsi) {\n    const char *contracts_for_symbol_msg = \"{\\\"contracts_for\\\": \\\"R_50\\\", \\\"currency\\\": \\\"USD\\\", \\\"landing_company\\\": \\\"svg\\\", \\\"product_type\\\": \\\"basic\\\"}\";\n    unsigned char buf[LWS_PRE + 256];\n    memcpy(&buf[LWS_PRE], contracts_for_symbol_msg, strlen(contracts_for_symbol_msg));\n    lws_write(wsi, &buf[LWS_PRE], strlen(contracts_for_symbol_msg), LWS_WRITE_TEXT);\n    lwsl_user(\"Contracts for symbol request sent\\n\");\n}\n\n// Function to check if JSON is complete based on braces balance\nint is_json_complete(const char *json) {\n    int brace_count = 0;\n    for (size_t i = 0; json[i] != '\\0'; i++) {\n        if (json[i] == '{') brace_count++;\n        else if (json[i] == '}') brace_count--;\n    }\n    return brace_count == 0;\n}\n\n// Function to handle the JSON response once fully received\nstatic void handle_contracts_for_response(const char *response) {\n    json_t *root;\n    json_error_t error;\n\n    // Parse the JSON response\n    root = json_loads(response, 0, &error);\n    if (!root) {\n        printf(\"Error parsing JSON: %s at line %d, column %d\\n\", error.text, error.line, error.column);\n        return;\n    }\n\n    // Check if the response contains an error\n    json_t *error_obj = json_object_get(root, \"error\");\n    if (error_obj) {\n        const char *error_message = json_string_value(json_object_get(error_obj, \"message\"));\n        printf(\"Error: %s\\n\", error_message);\n        json_decref(root);\n        return;\n    }\n\n    // Check if the message type is \"contracts_for\"\n    const char *msg_type = json_string_value(json_object_get(root, \"msg_type\"));\n    if (msg_type && strcmp(msg_type, \"contracts_for\") == 0) {\n        json_t *contracts_for = json_object_get(root, \"contracts_for\");\n        json_t *available_contracts = json_object_get(contracts_for, \"available\");\n\n        printf(\"Contracts for Symbol (R_50):\\n\");\n        size_t index;\n        json_t *contract;\n        json_array_foreach(available_contracts, index, contract) {\n            const char *contract_type = json_string_value(json_object_get(contract, \"contract_type\"));\n            const char *display_name = json_string_value(json_object_get(contract, \"contract_display\"));\n            const char *category = json_string_value(json_object_get(contract, \"contract_category_display\"));\n            const char *market = json_string_value(json_object_get(contract, \"market\"));\n            const char *submarket = json_string_value(json_object_get(contract, \"submarket\"));\n            const char *expiry_type = json_string_value(json_object_get(contract, \"expiry_type\"));\n            const char *min_duration = json_string_value(json_object_get(contract, \"min_contract_duration\"));\n            const char *max_duration = json_string_value(json_object_get(contract, \"max_contract_duration\"));\n\n            printf(\"  - Contract Type: %s\\n\", contract_type);\n            printf(\"    - Display Name: %s\\n\", display_name);\n            printf(\"    - Category: %s\\n\", category);\n            printf(\"    - Market: %s\\n\", market);\n            printf(\"    - Submarket: %s\\n\", submarket);\n            printf(\"    - Expiry Type: %s\\n\", expiry_type);\n            printf(\"    - Min Duration: %s\\n\", min_duration);\n            printf(\"    - Max Duration: %s\\n\", max_duration);\n            printf(\"    --------------------\\n\");\n        }\n    }\n\n    json_decref(root);\n}\n\n// Callback function for WebSocket events\nstatic int callback_minimal(struct lws *wsi, enum lws_callback_reasons reason,\n                            void *user, void *in, size_t len) {\n    switch (reason) {\n    case LWS_CALLBACK_CLIENT_CONNECTION_ERROR:\n        lwsl_err(\"CLIENT_CONNECTION_ERROR: %s\\n\", in ? (char *)in : \"(null)\");\n        interrupted = 1;\n        break;\n\n    case LWS_CALLBACK_CLIENT_ESTABLISHED:\n        lwsl_user(\"Connection established\\n\");\n        send_contracts_for_symbol_request(wsi);  // Send contracts for symbol request on connection\n        lws_callback_on_writable(wsi); // Request writable callback\n        break;\n\n    case LWS_CALLBACK_CLIENT_WRITEABLE:\n        if (time(NULL) - last_ping_time >= ping_interval) {\n            send_ping(wsi);  // Send periodic ping\n            last_ping_time = time(NULL);\n            send_contracts_for_symbol_request(wsi);  // Periodically request contracts\n        }\n        break;\n\n    case LWS_CALLBACK_CLIENT_RECEIVE:\n        // Accumulate incoming message chunks into the buffer\n        if (message_length + len < sizeof(message_buffer) - 1) {\n            memcpy(&message_buffer[message_length], in, len);\n            message_length += len;\n            message_buffer[message_length] = '\\0';  // Null-terminate\n\n            // Check if we have a complete JSON message\n            if (is_json_complete(message_buffer)) {\n                printf(\"Received complete JSON message: %s\\n\", message_buffer);\n                handle_contracts_for_response(message_buffer); // Process JSON response\n                message_length = 0;  // Reset the buffer after parsing\n            }\n        } else {\n            printf(\"Warning: Message buffer overflow. Clearing buffer.\\n\");\n            message_length = 0;  // Clear the buffer on overflow\n        }\n        break;\n\n    case LWS_CALLBACK_CLIENT_CLOSED:\n        lwsl_user(\"Connection closed\\n\");\n        interrupted = 1;\n        break;\n\n    default:\n        break;\n    }\n\n    return 0;\n}\n\n// Define supported protocols for the WebSocket\nstatic const struct lws_protocols protocols[] = {\n    { \"lws-minimal-client\", callback_minimal, 0, 0, 0, NULL, 0 },\n    LWS_PROTOCOL_LIST_TERM\n};\n\n// Main function to set up and manage the WebSocket client\nint main(int argc, const char **argv) {\n    struct lws_context_creation_info info;\n    struct lws_client_connect_info i;\n\n    // Handle Ctrl+C interrupt for graceful shutdown\n    signal(SIGINT, sigint_handler);\n    memset(&info, 0, sizeof info);\n    memset(&i, 0, sizeof(i));\n\n    lwsl_user(\"Initializing Deriv WebSocket client...\\n\");\n\n    info.options = LWS_SERVER_OPTION_DO_SSL_GLOBAL_INIT;\n    info.port = CONTEXT_PORT_NO_LISTEN;\n    info.protocols = protocols;\n    info.fd_limit_per_thread = 1 + 1 + 1;\n\n    context = lws_create_context(&info);\n    if (!context) {\n        lwsl_err(\"lws init failed\\n\");\n        return 1;\n    }\n\n    i.context = context;\n    i.port = port;\n    i.address = server_address;\n    i.path = path;\n    i.host = i.address;\n    i.origin = i.address;\n    i.ssl_connection = ssl_connection;\n    i.protocol = pro;\n    i.local_protocol_name = \"lws-minimal-client\";\n\n    if (!lws_client_connect_via_info(&i)) {\n        lwsl_err(\"Failed to initiate connection\\n\");\n        return 1;\n    }\n\n    // Run the WebSocket client event loop\n    while (!interrupted)\n        lws_service(context, 0);\n\n    lws_context_destroy(context);\n    lwsl_user(\"WebSocket client terminated.\\n\");\n\n    return 0;\n}\n\n/*\n * Instructions:\n * 1. Install the required libraries if they are not already installed:\n *    - On Ubuntu:\n *        sudo apt-get install libwebsockets-dev libjansson-dev\n *    - On macOS:\n *        brew install libwebsockets jansson\n * 2. Compile the code using the following command:\n *      gcc -o connect connect.c -lwebsockets -ljansson -lssl -lcrypto -lm\n * 3. Run the compiled executable:\n *      ./connect\n * 4. Ensure you have internet connectivity as the WebSocket will attempt to connect to `ws.derivws.com`.\n * 5. Replace \"app_id=1089\" in the `path` variable with your actual app_id if required."
        },
        {
          "language": "text",
          "content": "using System;\nusing System.Net.WebSockets;\nusing System.Text;\nusing System.Text.Json;\nusing System.Threading;\nusing System.Threading.Tasks;\n\nclass WebSocketExample\n{\n    private static readonly Uri uri = new Uri(\"wss://ws.derivws.com/websockets/v3?app_id=app_id\"); // Replace with your app_id if needed\n\n    public static async Task Main(string[] args)\n    {\n        using (ClientWebSocket webSocket = new ClientWebSocket())\n        {\n            Console.WriteLine(\"Attempting to connect to WebSocket...\");\n\n            await webSocket.ConnectAsync(uri, CancellationToken.None);\n            Console.WriteLine(\"[status] WebSocket connection established.\");\n\n            // Send contracts for symbol request\n            await SendContractsForSymbolRequest(webSocket);\n\n            // Handle responses from the server\n            await HandleResponses(webSocket);\n        }\n    }\n\n    private static async Task SendContractsForSymbolRequest(ClientWebSocket webSocket)\n    {\n        var contractsForSymbolRequest = new\n        {\n            contracts_for = \"R_50\",\n            currency = \"USD\",\n            landing_company = \"svg\",\n            product_type = \"basic\"\n        };\n\n        string requestJson = JsonSerializer.Serialize(contractsForSymbolRequest);\n        var bytes = Encoding.UTF8.GetBytes(requestJson);\n        await webSocket.SendAsync(new ArraySegment<byte>(bytes), WebSocketMessageType.Text, true, CancellationToken.None);\n        Console.WriteLine(\"[request] Contracts for symbol request sent.\");\n    }\n\nprivate static async Task HandleResponses(ClientWebSocket webSocket)\n{\n    var buffer = new byte[8192];\n    var messageBuilder = new StringBuilder();\n\n    while (webSocket.State == WebSocketState.Open)\n    {\n        var result = await webSocket.ReceiveAsync(new ArraySegment<byte>(buffer), CancellationToken.None);\n\n        if (result.MessageType == WebSocketMessageType.Close)\n        {\n            Console.WriteLine(\"WebSocket connection closed by server.\");\n            await webSocket.CloseAsync(WebSocketCloseStatus.NormalClosure, \"Closing\", CancellationToken.None);\n            break;\n        }\n\n        messageBuilder.Append(Encoding.UTF8.GetString(buffer, 0, result.Count));\n\n        if (result.EndOfMessage)\n        {\n            try\n            {\n                var data = JsonDocument.Parse(messageBuilder.ToString()).RootElement;\n                if (data.TryGetProperty(\"error\", out var error))\n                {\n                    Console.WriteLine($\"[Error] {error.GetProperty(\"message\").GetString()}\");\n                    await webSocket.CloseAsync(WebSocketCloseStatus.NormalClosure, \"Closing due to error\", CancellationToken.None);\n                    break;\n                }\n\n                if (data.TryGetProperty(\"msg_type\", out var msgType) && msgType.GetString() == \"contracts_for\")\n                {\n                    Console.WriteLine(\"Contracts for Symbol (R_50):\");\n                    foreach (var contract in data.GetProperty(\"contracts_for\").GetProperty(\"available\").EnumerateArray())\n                    {\n                        Console.WriteLine($\"  - Contract Type: {contract.GetProperty(\"contract_type\").GetString()}\");\n                        Console.WriteLine($\"    - Display Name: {contract.GetProperty(\"contract_display\").GetString()}\");\n                        Console.WriteLine($\"    - Category: {contract.GetProperty(\"contract_category_display\").GetString()}\");\n                        Console.WriteLine($\"    - Market: {contract.GetProperty(\"market\").GetString()}\");\n                        Console.WriteLine($\"    - Submarket: {contract.GetProperty(\"submarket\").GetString()}\");\n                        Console.WriteLine($\"    - Expiry Type: {contract.GetProperty(\"expiry_type\").GetString()}\");\n\n                        // Check for optional properties with safe access\n                        Console.WriteLine($\"    - Min Duration: {(contract.TryGetProperty(\"min_contract_duration\", out var minDuration) ? minDuration.GetString() : \"N/A\")}\");\n                        Console.WriteLine($\"    - Max Duration: {(contract.TryGetProperty(\"max_contract_duration\", out var maxDuration) ? maxDuration.GetString() : \"N/A\")}\");\n                        Console.WriteLine($\"    - Barrier: {(contract.TryGetProperty(\"barrier\", out var barrier) ? barrier.GetString() : \"N/A\")}\");\n                        Console.WriteLine($\"    - Sentiment: {(contract.TryGetProperty(\"sentiment\", out var sentiment) ? sentiment.GetString() : \"N/A\")}\");\n                        Console.WriteLine(\"    --------------------\");\n                    }\n                }\n\n                messageBuilder.Clear();\n            }\n            catch (JsonException ex)\n            {\n                Console.WriteLine($\"[Error] Failed to parse JSON message: {ex.Message}\");\n            }\n        }\n    }\n}\n\n\n}\n\n/*\nInstructions to run the code locally:\n\n1. Ensure you have .NET SDK installed. You can download it from https://dotnet.microsoft.com/download.\n\n2. Save the code to a file named `WebSocketExample.cs`.\n\n3. Open a terminal in the directory containing `WebSocketExample.cs`.\n\n4. If using the .NET CLI, you can run the code with:\n   - `dotnet new console -o WebSocketExample` (if creating a new project)\n   - Move `WebSocketExample.cs` into the project directory `WebSocketExample`.\n   - Navigate to the project directory: `cd WebSocketExample`.\n   - Run `dotnet add package System.Net.WebSockets.Client` to add the WebSocket client dependency.\n   - Run the code: `dotnet run`.\n\n5. Alternatively, you can use an IDE like Visual Studio to create a console application, add the `System.Net.WebSockets.Client` package, and then run the application.\n\n6. Replace `app_id=1089` in the URL with your actual app_id if needed.\n*/"
        },
        {
          "language": "text",
          "content": "using System;\nusing System.Net.WebSockets;\nusing System.Text;\nusing System.Text.Json;\nusing System.Threading;\nusing System.Threading.Tasks;\n\nclass WebSocketExample\n{\n    private static readonly Uri uri = new Uri(\"wss://ws.derivws.com/websockets/v3?app_id=app_id\"); // Replace with your app_id if needed\n\n    public static async Task Main(string[] args)\n    {\n        using (ClientWebSocket webSocket = new ClientWebSocket())\n        {\n            Console.WriteLine(\"Attempting to connect to WebSocket...\");\n\n            await webSocket.ConnectAsync(uri, CancellationToken.None);\n            Console.WriteLine(\"[status] WebSocket connection established.\");\n\n            // Send contracts for symbol request\n            await SendContractsForSymbolRequest(webSocket);\n\n            // Handle responses from the server\n            await HandleResponses(webSocket);\n        }\n    }\n\n    private static async Task SendContractsForSymbolRequest(ClientWebSocket webSocket)\n    {\n        var contractsForSymbolRequest = new\n        {\n            contracts_for = \"R_50\",\n            currency = \"USD\",\n            landing_company = \"svg\",\n            product_type = \"basic\"\n        };\n\n        string requestJson = JsonSerializer.Serialize(contractsForSymbolRequest);\n        var bytes = Encoding.UTF8.GetBytes(requestJson);\n        await webSocket.SendAsync(new ArraySegment<byte>(bytes), WebSocketMessageType.Text, true, CancellationToken.None);\n        Console.WriteLine(\"[request] Contracts for symbol request sent.\");\n    }\n\nprivate static async Task HandleResponses(ClientWebSocket webSocket)\n{\n    var buffer = new byte[8192];\n    var messageBuilder = new StringBuilder();\n\n    while (webSocket.State == WebSocketState.Open)\n    {\n        var result = await webSocket.ReceiveAsync(new ArraySegment<byte>(buffer), CancellationToken.None);\n\n        if (result.MessageType == WebSocketMessageType.Close)\n        {\n            Console.WriteLine(\"WebSocket connection closed by server.\");\n            await webSocket.CloseAsync(WebSocketCloseStatus.NormalClosure, \"Closing\", CancellationToken.None);\n            break;\n        }\n\n        messageBuilder.Append(Encoding.UTF8.GetString(buffer, 0, result.Count));\n\n        if (result.EndOfMessage)\n        {\n            try\n            {\n                var data = JsonDocument.Parse(messageBuilder.ToString()).RootElement;\n                if (data.TryGetProperty(\"error\", out var error))\n                {\n                    Console.WriteLine($\"[Error] {error.GetProperty(\"message\").GetString()}\");\n                    await webSocket.CloseAsync(WebSocketCloseStatus.NormalClosure, \"Closing due to error\", CancellationToken.None);\n                    break;\n                }\n\n                if (data.TryGetProperty(\"msg_type\", out var msgType) && msgType.GetString() == \"contracts_for\")\n                {\n                    Console.WriteLine(\"Contracts for Symbol (R_50):\");\n                    foreach (var contract in data.GetProperty(\"contracts_for\").GetProperty(\"available\").EnumerateArray())\n                    {\n                        Console.WriteLine($\"  - Contract Type: {contract.GetProperty(\"contract_type\").GetString()}\");\n                        Console.WriteLine($\"    - Display Name: {contract.GetProperty(\"contract_display\").GetString()}\");\n                        Console.WriteLine($\"    - Category: {contract.GetProperty(\"contract_category_display\").GetString()}\");\n                        Console.WriteLine($\"    - Market: {contract.GetProperty(\"market\").GetString()}\");\n                        Console.WriteLine($\"    - Submarket: {contract.GetProperty(\"submarket\").GetString()}\");\n                        Console.WriteLine($\"    - Expiry Type: {contract.GetProperty(\"expiry_type\").GetString()}\");\n\n                        // Check for optional properties with safe access\n                        Console.WriteLine($\"    - Min Duration: {(contract.TryGetProperty(\"min_contract_duration\", out var minDuration) ? minDuration.GetString() : \"N/A\")}\");\n                        Console.WriteLine($\"    - Max Duration: {(contract.TryGetProperty(\"max_contract_duration\", out var maxDuration) ? maxDuration.GetString() : \"N/A\")}\");\n                        Console.WriteLine($\"    - Barrier: {(contract.TryGetProperty(\"barrier\", out var barrier) ? barrier.GetString() : \"N/A\")}\");\n                        Console.WriteLine($\"    - Sentiment: {(contract.TryGetProperty(\"sentiment\", out var sentiment) ? sentiment.GetString() : \"N/A\")}\");\n                        Console.WriteLine(\"    --------------------\");\n                    }\n                }\n\n                messageBuilder.Clear();\n            }\n            catch (JsonException ex)\n            {\n                Console.WriteLine($\"[Error] Failed to parse JSON message: {ex.Message}\");\n            }\n        }\n    }\n}\n\n\n}\n\n/*\nInstructions to run the code locally:\n\n1. Ensure you have .NET SDK installed. You can download it from https://dotnet.microsoft.com/download.\n\n2. Save the code to a file named `WebSocketExample.cs`.\n\n3. Open a terminal in the directory containing `WebSocketExample.cs`.\n\n4. If using the .NET CLI, you can run the code with:\n   - `dotnet new console -o WebSocketExample` (if creating a new project)\n   - Move `WebSocketExample.cs` into the project directory `WebSocketExample`.\n   - Navigate to the project directory: `cd WebSocketExample`.\n   - Run `dotnet add package System.Net.WebSockets.Client` to add the WebSocket client dependency.\n   - Run the code: `dotnet run`.\n\n5. Alternatively, you can use an IDE like Visual Studio to create a console application, add the `System.Net.WebSockets.Client` package, and then run the application.\n\n6. Replace `app_id=1089` in the URL with your actual app_id if needed.\n*/"
        },
        {
          "language": "text",
          "content": "package main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"log\"\n\t\"time\"\n\n\t\"nhooyr.io/websocket\"\n\t\"nhooyr.io/websocket/wsjson\"\n)\n\nconst (\n\twebSocketURL = \"wss://ws.derivws.com/websockets/v3?app_id=app_id\"//replace with your app_id\n\treadLimit    = 65536 // Set a higher read limit, e.g., 64 KB\n)\n\ntype ContractsForRequest struct {\n\tContractsFor   string `json:\"contracts_for\"`\n\tCurrency       string `json:\"currency\"`\n\tLandingCompany string `json:\"landing_company\"`\n\tProductType    string `json:\"product_type\"`\n}\n\nfunc main() {\n\tctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)\n\tdefer cancel()\n\n\t// Establish WebSocket connection\n\tconn, _, err := websocket.Dial(ctx, webSocketURL, nil)\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to connect to WebSocket: %v\", err)\n\t}\n\tdefer conn.Close(websocket.StatusNormalClosure, \"normal closure\")\n\tfmt.Println(\"[status] WebSocket connection established.\")\n\n\t// Set a higher read limit\n\tconn.SetReadLimit(readLimit)\n\n\t// Send contracts for symbol request\n\terr = sendContractsForSymbolRequest(ctx, conn)\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to send contracts for symbol request: %v\", err)\n\t}\n\n\t// Handle incoming messages\n\thandleResponses(ctx, conn)\n}\n\nfunc sendContractsForSymbolRequest(ctx context.Context, conn *websocket.Conn) error {\n\tcontractsRequest := ContractsForRequest{\n\t\tContractsFor:   \"R_50\",\n\t\tCurrency:       \"USD\",\n\t\tLandingCompany: \"svg\",\n\t\tProductType:    \"basic\",\n\t}\n\tfmt.Println(\"[request] Sending contracts for symbol request...\")\n\treturn wsjson.Write(ctx, conn, contractsRequest)\n}\n\nfunc handleResponses(ctx context.Context, conn *websocket.Conn) {\n\tfor {\n\t\tvar response map[string]interface{}\n\n\t\terr := wsjson.Read(ctx, conn, &response)\n\t\tif err != nil {\n\t\t\tlog.Fatalf(\"Error reading message: %v\", err)\n\t\t}\n\n\t\tmsgType := response[\"msg_type\"]\n\t\tif msgType == \"contracts_for\" {\n\t\t\tcontracts := response[\"contracts_for\"].(map[string]interface{})[\"available\"].([]interface{})\n\t\t\tfmt.Println(\"Contracts for Symbol (R_50):\")\n\t\t\tfor _, contract := range contracts {\n\t\t\t\tcontractMap := contract.(map[string]interface{})\n\t\t\t\tfmt.Printf(\"  - Contract Type: %v\\n\", contractMap[\"contract_type\"])\n\t\t\t\tfmt.Printf(\"    - Display Name: %v\\n\", contractMap[\"contract_display\"])\n\t\t\t\tfmt.Printf(\"    - Category: %v\\n\", contractMap[\"contract_category_display\"])\n\t\t\t\tfmt.Printf(\"    - Market: %v\\n\", contractMap[\"market\"])\n\t\t\t\tfmt.Printf(\"    - Submarket: %v\\n\", contractMap[\"submarket\"])\n\t\t\t\tfmt.Printf(\"    - Expiry Type: %v\\n\", contractMap[\"expiry_type\"])\n\t\t\t\tfmt.Printf(\"    - Min Duration: %v\\n\", contractMap[\"min_contract_duration\"])\n\t\t\t\tfmt.Printf(\"    - Max Duration: %v\\n\", contractMap[\"max_contract_duration\"])\n\t\t\t\tfmt.Printf(\"    - Barrier: %v\\n\", contractMap[\"barrier\"])\n\t\t\t\tfmt.Printf(\"    - Sentiment: %v\\n\", contractMap[\"sentiment\"])\n\t\t\t\tfmt.Println(\"    --------------------\")\n\t\t\t}\n\t\t} else {\n\t\t\tfmt.Printf(\"Received message: %v\\n\", response)\n\t\t}\n\t}\n}"
        },
        {
          "language": "text",
          "content": "package main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"log\"\n\t\"time\"\n\n\t\"nhooyr.io/websocket\"\n\t\"nhooyr.io/websocket/wsjson\"\n)\n\nconst (\n\twebSocketURL = \"wss://ws.derivws.com/websockets/v3?app_id=app_id\"//replace with your app_id\n\treadLimit    = 65536 // Set a higher read limit, e.g., 64 KB\n)\n\ntype ContractsForRequest struct {\n\tContractsFor   string `json:\"contracts_for\"`\n\tCurrency       string `json:\"currency\"`\n\tLandingCompany string `json:\"landing_company\"`\n\tProductType    string `json:\"product_type\"`\n}\n\nfunc main() {\n\tctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)\n\tdefer cancel()\n\n\t// Establish WebSocket connection\n\tconn, _, err := websocket.Dial(ctx, webSocketURL, nil)\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to connect to WebSocket: %v\", err)\n\t}\n\tdefer conn.Close(websocket.StatusNormalClosure, \"normal closure\")\n\tfmt.Println(\"[status] WebSocket connection established.\")\n\n\t// Set a higher read limit\n\tconn.SetReadLimit(readLimit)\n\n\t// Send contracts for symbol request\n\terr = sendContractsForSymbolRequest(ctx, conn)\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to send contracts for symbol request: %v\", err)\n\t}\n\n\t// Handle incoming messages\n\thandleResponses(ctx, conn)\n}\n\nfunc sendContractsForSymbolRequest(ctx context.Context, conn *websocket.Conn) error {\n\tcontractsRequest := ContractsForRequest{\n\t\tContractsFor:   \"R_50\",\n\t\tCurrency:       \"USD\",\n\t\tLandingCompany: \"svg\",\n\t\tProductType:    \"basic\",\n\t}\n\tfmt.Println(\"[request] Sending contracts for symbol request...\")\n\treturn wsjson.Write(ctx, conn, contractsRequest)\n}\n\nfunc handleResponses(ctx context.Context, conn *websocket.Conn) {\n\tfor {\n\t\tvar response map[string]interface{}\n\n\t\terr := wsjson.Read(ctx, conn, &response)\n\t\tif err != nil {\n\t\t\tlog.Fatalf(\"Error reading message: %v\", err)\n\t\t}\n\n\t\tmsgType := response[\"msg_type\"]\n\t\tif msgType == \"contracts_for\" {\n\t\t\tcontracts := response[\"contracts_for\"].(map[string]interface{})[\"available\"].([]interface{})\n\t\t\tfmt.Println(\"Contracts for Symbol (R_50):\")\n\t\t\tfor _, contract := range contracts {\n\t\t\t\tcontractMap := contract.(map[string]interface{})\n\t\t\t\tfmt.Printf(\"  - Contract Type: %v\\n\", contractMap[\"contract_type\"])\n\t\t\t\tfmt.Printf(\"    - Display Name: %v\\n\", contractMap[\"contract_display\"])\n\t\t\t\tfmt.Printf(\"    - Category: %v\\n\", contractMap[\"contract_category_display\"])\n\t\t\t\tfmt.Printf(\"    - Market: %v\\n\", contractMap[\"market\"])\n\t\t\t\tfmt.Printf(\"    - Submarket: %v\\n\", contractMap[\"submarket\"])\n\t\t\t\tfmt.Printf(\"    - Expiry Type: %v\\n\", contractMap[\"expiry_type\"])\n\t\t\t\tfmt.Printf(\"    - Min Duration: %v\\n\", contractMap[\"min_contract_duration\"])\n\t\t\t\tfmt.Printf(\"    - Max Duration: %v\\n\", contractMap[\"max_contract_duration\"])\n\t\t\t\tfmt.Printf(\"    - Barrier: %v\\n\", contractMap[\"barrier\"])\n\t\t\t\tfmt.Printf(\"    - Sentiment: %v\\n\", contractMap[\"sentiment\"])\n\t\t\t\tfmt.Println(\"    --------------------\")\n\t\t\t}\n\t\t} else {\n\t\t\tfmt.Printf(\"Received message: %v\\n\", response)\n\t\t}\n\t}\n}"
        }
      ],
      "tables": [],
      "links": []
    },
    "websocket-api": {
      "title": "404 Not Found",
      "url": "https://developers.deriv.com/docs/websocket-api",
      "mainContent": "Page Not Found",
      "headings": [
        {
          "level": "h2",
          "text": "Page Not Found"
        }
      ],
      "codeBlocks": [],
      "tables": [],
      "links": []
    },
    "account-management": {
      "title": "404 Not Found",
      "url": "https://developers.deriv.com/docs/account-management",
      "mainContent": "Page Not Found",
      "headings": [
        {
          "level": "h2",
          "text": "Page Not Found"
        }
      ],
      "codeBlocks": [],
      "tables": [],
      "links": []
    },
    "portfolio-management": {
      "title": "404 Not Found",
      "url": "https://developers.deriv.com/docs/portfolio-management",
      "mainContent": "Page Not Found",
      "headings": [
        {
          "level": "h2",
          "text": "Page Not Found"
        }
      ],
      "codeBlocks": [],
      "tables": [],
      "links": []
    },
    "trading-operations": {
      "title": "404 Not Found",
      "url": "https://developers.deriv.com/docs/trading-operations",
      "mainContent": "Page Not Found",
      "headings": [
        {
          "level": "h2",
          "text": "Page Not Found"
        }
      ],
      "codeBlocks": [],
      "tables": [],
      "links": []
    },
    "bot-trading": {
      "title": "404 Not Found",
      "url": "https://developers.deriv.com/docs/bot-trading",
      "mainContent": "Page Not Found",
      "headings": [
        {
          "level": "h2",
          "text": "Page Not Found"
        }
      ],
      "codeBlocks": [],
      "tables": [],
      "links": []
    },
    "api-guide": {
      "title": "404 Not Found",
      "url": "https://developers.deriv.com/docs/api-guide",
      "mainContent": "Page Not Found",
      "headings": [
        {
          "level": "h2",
          "text": "Page Not Found"
        }
      ],
      "codeBlocks": [],
      "tables": [],
      "links": []
    }
  },
  "summary": {
    "totalCharacters": 206549,
    "pages": [
      "Getting started with Deriv APIs",
      "Account setup",
      "Authentication",
      "Understanding APIs",
      "MT5 APIs",
      "P2P APIs",
      "Application APIs",
      "Account APIs",
      "Market Data APIs",
      "Cashier APIs",
      "Reports APIs",
      "Trading APIs",
      "Utilities APIs",
      "Payment Agent",
      "WebSockets",
      "Functions of API Calls",
      "OAuth",
      "Mark-up",
      "Error codes",
      "Country list",
      "Currency",
      "Copy trading",
      "Affiliates",
      "How to contribute to our docs",
      "Frequently Asked Questions",
      "Create account using API",
      "Trade Options",
      "Digital Options",
      "Rise/Fall",
      "Higher/Lower",
      "Ends Between",
      "Stays Between",
      "Lookbacks",
      "Touch/No Touch",
      "Only Ups/Only Downs",
      "Highest/Lowest Tick",
      "Reset Call/Put",
      "Asian Up/Down",
      "Digit Matches/Differs",
      "Digit Even/Odd",
      "Digit Over/Under",
      "Accumulator Options",
      "Vanilla Options",
      "Turbo Options",
      "Multipliers",
      "Keep connection live",
      "Check website status",
      "Get contracts for a symbol",
      "websocket-api",
      "account-management",
      "portfolio-management",
      "trading-operations",
      "bot-trading",
      "api-guide"
    ]
  }
}