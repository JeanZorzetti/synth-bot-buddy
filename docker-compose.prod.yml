version: '3.8'

services:
  # üöÄ Main Trading Bot Application
  trading-bot:
    build:
      context: .
      dockerfile: Dockerfile.prod
    container_name: ai-trading-bot-prod
    restart: unless-stopped
    environment:
      - ENVIRONMENT=production
      - DERIV_API_KEY=${DERIV_API_KEY}
      - DB_PASSWORD=${DB_PASSWORD}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - SSL_CERT_FILE=/certs/server.crt
      - SSL_KEY_FILE=/certs/server.key
    volumes:
      - ./models:/app/models:ro
      - ./logs:/app/logs
      - ./certs:/certs:ro
      - ./config:/app/config:ro
    ports:
      - "8000:8000"
      - "8443:8443"  # HTTPS
    depends_on:
      - database
      - redis
      - prometheus
    networks:
      - trading-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # üóÑÔ∏è PostgreSQL Database
  database:
    image: postgres:15-alpine
    container_name: trading-bot-db-prod
    restart: unless-stopped
    environment:
      - POSTGRES_DB=trading_bot_prod
      - POSTGRES_USER=trading_user
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/init:/docker-entrypoint-initdb.d:ro
      - ./backups/database:/backups
    ports:
      - "5432:5432"
    networks:
      - trading-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U trading_user -d trading_bot_prod"]
      interval: 10s
      timeout: 5s
      retries: 5

  # üì¶ Redis Cache
  redis:
    image: redis:7-alpine
    container_name: trading-bot-redis-prod
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD} --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    ports:
      - "6379:6379"
    networks:
      - trading-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # üìä Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: trading-bot-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - trading-network

  # üìà Grafana Dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: trading-bot-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SECURITY_DISABLE_GRAVATAR=true
      - GF_ANALYTICS_REPORTING_ENABLED=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks:
      - trading-network

  # üîç Log Aggregation (ELK Stack)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: trading-bot-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - trading-network

  logstash:
    image: docker.elastic.co/logstash/logstash:8.8.0
    container_name: trading-bot-logstash
    volumes:
      - ./monitoring/logstash/logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro
      - ./logs:/logs:ro
    depends_on:
      - elasticsearch
    networks:
      - trading-network

  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    container_name: trading-bot-kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - trading-network

  # üîÑ Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: trading-bot-nginx
    restart: unless-stopped
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - trading-bot
    networks:
      - trading-network

  # üíæ Backup Service
  backup:
    build:
      context: ./backup
      dockerfile: Dockerfile
    container_name: trading-bot-backup
    restart: unless-stopped
    environment:
      - BACKUP_SCHEDULE=0 2 * * *  # Daily at 2 AM
      - POSTGRES_HOST=database
      - POSTGRES_DB=trading_bot_prod
      - POSTGRES_USER=trading_user
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - BACKUP_RETENTION_DAYS=30
    volumes:
      - ./backups:/backups
      - ./models:/models:ro
      - ./logs:/logs:ro
    depends_on:
      - database
    networks:
      - trading-network

  # üö® Alert Manager
  alertmanager:
    image: prom/alertmanager:latest
    container_name: trading-bot-alertmanager
    restart: unless-stopped
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
    volumes:
      - ./monitoring/alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
      - alertmanager_data:/alertmanager
    ports:
      - "9093:9093"
    networks:
      - trading-network

  # üè• Health Check Service
  healthcheck:
    build:
      context: ./healthcheck
      dockerfile: Dockerfile
    container_name: trading-bot-healthcheck
    restart: unless-stopped
    environment:
      - CHECK_INTERVAL=30
      - ALERT_WEBHOOK=${HEALTHCHECK_WEBHOOK_URL}
    volumes:
      - ./logs/healthcheck:/logs
    depends_on:
      - trading-bot
      - database
      - redis
    networks:
      - trading-network

networks:
  trading-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local
  alertmanager_data:
    driver: local