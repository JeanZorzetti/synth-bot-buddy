input {
  # File input for application logs
  file {
    path => "/app/logs/*.log"
    start_position => "beginning"
    sincedb_path => "/dev/null"
    codec => multiline {
      pattern => "^%{TIMESTAMP_ISO8601}"
      negate => true
      what => "previous"
    }
    tags => ["trading-bot", "application"]
  }

  # File input for trading logs
  file {
    path => "/app/logs/trading/*.log"
    start_position => "beginning"
    sincedb_path => "/dev/null"
    codec => json
    tags => ["trading-bot", "trading"]
  }

  # File input for AI model logs
  file {
    path => "/app/logs/ai/*.log"
    start_position => "beginning"
    sincedb_path => "/dev/null"
    codec => json
    tags => ["trading-bot", "ai"]
  }

  # File input for risk management logs
  file {
    path => "/app/logs/risk/*.log"
    start_position => "beginning"
    sincedb_path => "/dev/null"
    codec => json
    tags => ["trading-bot", "risk"]
  }

  # File input for alerts logs
  file {
    path => "/app/logs/alerts/*.log"
    start_position => "beginning"
    sincedb_path => "/dev/null"
    codec => json
    tags => ["trading-bot", "alerts"]
  }

  # Beats input for system metrics
  beats {
    port => 5044
    tags => ["system", "metrics"]
  }

  # HTTP input for webhook logs
  http {
    port => 8080
    tags => ["webhook"]
  }

  # Syslog input
  syslog {
    port => 514
    tags => ["syslog"]
  }

  # Docker logs
  docker {
    containers => ["trading-bot-app", "trading-postgres", "trading-redis"]
    tags => ["docker"]
  }
}

filter {
  # Parse timestamp
  if [tags] and "trading-bot" in [tags] {
    date {
      match => [ "timestamp", "ISO8601" ]
      target => "@timestamp"
    }
  }

  # Parse trading-specific logs
  if [tags] and "trading" in [tags] {
    if [message] =~ /^{.*}$/ {
      json {
        source => "message"
      }
    }

    # Extract trading metrics
    if [order_id] {
      mutate {
        add_tag => ["order"]
        add_field => { "log_type" => "order" }
      }
    }

    if [position_id] {
      mutate {
        add_tag => ["position"]
        add_field => { "log_type" => "position" }
      }
    }

    if [pnl] {
      mutate {
        add_tag => ["pnl"]
        add_field => { "log_type" => "pnl" }
        convert => { "pnl" => "float" }
      }
    }

    if [symbol] {
      mutate {
        add_field => { "trading_symbol" => "%{symbol}" }
      }
    }
  }

  # Parse AI logs
  if [tags] and "ai" in [tags] {
    if [message] =~ /^{.*}$/ {
      json {
        source => "message"
      }
    }

    if [model_name] {
      mutate {
        add_tag => ["model"]
        add_field => { "log_type" => "model" }
      }
    }

    if [prediction] {
      mutate {
        add_tag => ["prediction"]
        add_field => { "log_type" => "prediction" }
        convert => { "prediction" => "float" }
      }
    }

    if [accuracy] {
      mutate {
        convert => { "accuracy" => "float" }
      }
    }
  }

  # Parse risk logs
  if [tags] and "risk" in [tags] {
    if [message] =~ /^{.*}$/ {
      json {
        source => "message"
      }
    }

    if [risk_level] {
      mutate {
        add_tag => ["risk"]
        add_field => { "log_type" => "risk" }
      }
    }

    if [drawdown] {
      mutate {
        convert => { "drawdown" => "float" }
      }
    }
  }

  # Parse alert logs
  if [tags] and "alerts" in [tags] {
    if [message] =~ /^{.*}$/ {
      json {
        source => "message"
      }
    }

    if [alert_type] {
      mutate {
        add_tag => ["alert"]
        add_field => { "log_type" => "alert" }
      }
    }

    if [priority] {
      mutate {
        add_field => { "alert_priority" => "%{priority}" }
      }
    }
  }

  # Parse error logs
  if [level] and [level] == "ERROR" {
    mutate {
      add_tag => ["error"]
    }
  }

  # Parse warning logs
  if [level] and [level] == "WARNING" {
    mutate {
      add_tag => ["warning"]
    }
  }

  # Add environment
  mutate {
    add_field => { "environment" => "production" }
    add_field => { "service" => "trading-bot" }
  }

  # GeoIP for external IPs
  if [client_ip] {
    geoip {
      source => "client_ip"
      target => "geoip"
    }
  }

  # User agent parsing
  if [user_agent] {
    useragent {
      source => "user_agent"
      target => "ua"
    }
  }

  # Remove unnecessary fields
  mutate {
    remove_field => ["beat", "input", "prospector", "offset"]
  }
}

output {
  # Output to Elasticsearch
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "trading-bot-%{+YYYY.MM.dd}"
    template_name => "trading-bot"
    template => "/usr/share/logstash/templates/trading-bot-template.json"
    template_overwrite => true
  }

  # Output trading logs to separate index
  if [tags] and "trading" in [tags] {
    elasticsearch {
      hosts => ["elasticsearch:9200"]
      index => "trading-logs-%{+YYYY.MM.dd}"
    }
  }

  # Output AI logs to separate index
  if [tags] and "ai" in [tags] {
    elasticsearch {
      hosts => ["elasticsearch:9200"]
      index => "ai-logs-%{+YYYY.MM.dd}"
    }
  }

  # Output risk logs to separate index
  if [tags] and "risk" in [tags] {
    elasticsearch {
      hosts => ["elasticsearch:9200"]
      index => "risk-logs-%{+YYYY.MM.dd}"
    }
  }

  # Output alerts to separate index
  if [tags] and "alerts" in [tags] {
    elasticsearch {
      hosts => ["elasticsearch:9200"]
      index => "alert-logs-%{+YYYY.MM.dd}"
    }
  }

  # Output errors to separate index
  if "error" in [tags] {
    elasticsearch {
      hosts => ["elasticsearch:9200"]
      index => "error-logs-%{+YYYY.MM.dd}"
    }
  }

  # Debug output to stdout (disable in production)
  # stdout {
  #   codec => rubydebug
  # }

  # Output to file for backup
  file {
    path => "/var/log/logstash/output.log"
    codec => json_lines
  }

  # Send critical alerts to webhook
  if [tags] and "alert" in [tags] and [alert_priority] == "critical" {
    http {
      url => "http://alertmanager:9093/api/v1/alerts"
      http_method => "post"
      content_type => "application/json"
      format => "json"
      mapping => {
        "alerts" => [
          {
            "labels" => {
              "alertname" => "%{alert_type}"
              "severity" => "%{alert_priority}"
              "service" => "trading-bot"
              "instance" => "%{host}"
            }
            "annotations" => {
              "summary" => "%{message}"
              "description" => "%{message}"
            }
            "generatorURL" => "http://trading-bot/logs"
          }
        ]
      }
    }
  }

  # Send to Kafka for real-time processing (optional)
  # kafka {
  #   bootstrap_servers => "kafka:9092"
  #   topic_id => "trading-logs"
  #   codec => json
  # }
}